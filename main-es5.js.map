{"version":3,"sources":["webpack:///src/app/dashboard/my-studies/my-studies.component.html","webpack:///src/app/register/register.component.css","webpack:///src/app/Model/Study/StudyObjects/Section.ts","webpack:///src/app/dashboard/my-studies/my-studies.component.css","webpack:///src/app/Model/Study/StudyObjects/TextBlock.ts","webpack:///src/app/Model/Study/StudyObjects/VibrationElement.ts","webpack:///src/app/register/register.component.ts","webpack:///src/app/app-settings.ts","webpack:///src/app/Model/Study/CSVConverter/csvconverter.service.ts","webpack:///src/app/dashboard/profile/profile.component.ts","webpack:///src/app/services/auth/auth.service.ts","webpack:///src/app/Model/Study/Result/UserResultTupleDAO.service.ts","webpack:///src/app/app.component.css","webpack:///src/environments/environment.ts","webpack:///src/app/dashboard/my-studies/my-studies.component.ts","webpack:///src/app/Model/User/EMail.ts","webpack:///src/app/services/storage/storage.service.ts","webpack:///src/app/Model/Study/ShortDescription.ts","webpack:///src/app/dashboard/participated-studies/participated-studies.component.ts","webpack:///src/app/dashboard/dashboard.component.html","webpack:///src/app/Model/Study/StudyObjects/SectionElement.ts","webpack:///src/app/Model/Study/ReferenceTuple.ts","webpack:///src/app/studycreation/studycreation.component.css","webpack:///src/app/dashboard/profile/profile.component.css","webpack:///src/app/Model/User/UserDao.service.ts","webpack:///src/app/services/dialogs/dialog-template.html","webpack:///src/app/Model/Study/StudyObjects/Questions/MultipleChoiceQuestion.ts","webpack:///src/app/services/dialogs/confirmDialog.service.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/guards/role/role-guard.service.ts","webpack:///src/app/dashboard/dashboard-routing.module.ts","webpack:///src/app/dashboard/available-studies/available-studies.component.css","webpack:///src/app/Model/Study/StudyObjects/AbstractStudyObject.ts","webpack:///src/app/dashboard/dashboard.component.ts","webpack:///src/app/Model/Study/KeyDataDAO.service.ts","webpack:///src/app/app.routes.ts","webpack:///src/app/app.component.ts","webpack:///src/app/dashboard/dashboard.module.ts","webpack:///src/app/Model/Randomizing/RandomizingStrategies.ts","webpack:///src/app/Model/Study/StudyObjects/Questions/LinearScaleQuestion.ts","webpack:///src/app/Model/Study/ReferenceTupleMembershipVerifier.ts","webpack:///src/app/dashboard/dashboard.component.css","webpack:///src/app/app.component.html","webpack:///src/app/dashboard/participated-studies/participated-studies.component.css","webpack:///src/app/dashboard/dashboard.routes.ts","webpack:///src/app/app.module.ts","webpack:///src/app/dashboard/profile/profile.component.html","webpack:///src/app/dashboard/participated-studies/participated-studies.component.html","webpack:///src/app/guards/auth/auth-guard.service.ts","webpack:///src/app/dashboard/available-studies/available-studies.component.html","webpack:///src/app/Model/Study/StudyPrototype.ts","webpack:///src/app/Model/Study/Result/UserResultTuple.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/Model/Study/StudyStatus.ts","webpack:///src/app/Model/Study/StudyObjects/PauseElement.ts","webpack:///src/app/studycreation/studycreation.component.ts","webpack:///src/app/Model/Study/StudyObjects/AbstractVibrationPatternElement.ts","webpack:///src/app/services/alert/alert.service.ts","webpack:///src/app/Model/Study/StudyObjects/Questions/DateQuestion.ts","webpack:///src/app/login/login.component.css","webpack:///src/app/Model/Study/StudyPrototypeDAO.service.ts","webpack:///src/app/Model/Study/Types.ts","webpack:///src/app/services/study-wrapper/study-wrapper.service.ts","webpack:///src/app/Model/Study/StudyObjects/Questions/QualificationQuestion.ts","webpack:///src/app/Model/Study/KeyData.ts","webpack:///src/app/Model/Study/StudyObjects/Questions/TextQuestion.ts","webpack:///src/app/Model/User/User.ts","webpack:///src/app/studycreation/studycreation.component.html","webpack:///src/app/Model/User/UserPermission.ts","webpack:///src/app/Model/Study/StudyObjects/VibrationPattern.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/login/login.component.ts","webpack:///src/material.module.ts","webpack:///src/app/dashboard/available-studies/available-studies.component.ts","webpack:///src/main.ts","webpack:///src/app/services/app-settings/app-settings.service.ts","webpack:///src/app/Model/Study/StudyObjects/Questions/AbstractQuestion.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["Section","id","name","displayName","skippable","resultRelevant","randomStrategy","_sectionElements","_skippable","_resultRelevant","_randomStrategy","studyObject","index","typeOfReferenceTuple","verifier","getType","SECTIONELEMENT","Error","sectionElements","push","splice","_verifier","TextBlock","text","objectType","_text","VibrationElement","duration","amplitude","ensure8bitNumber","_amplitude","Number","isInteger","temp","RegisterComponent","router","authService","userService","alertService","firstName","lastName","email","password","confirmPassword","isAuthenticated","then","result","navigate","replaceUrl","user","CREATOR","save","alert","selector","template","AppSettings","baseURL","CSVConverter","metaDataHeaders","study","results","download","data","headers","generateHeaders","numberOfQuestions","length","convertAllResultsToData","csvExporter","setOptions","generateCsv","generateResultCSV","participants","forEach","triple","shuffeldUser","map","a","sort","Math","random","value","b","convertParticipantsToData","generateParticipantsCSV","participant","fileType","studyKeyData","keyData","options","fieldSeparator","filename","quoteStrings","decimalseparator","showLabels","showTitle","title","useBom","noDownload","nullToEmptyString","questions","sortedQuestions","sortQuestionsByID","question","concat","tuple","answeredQuestions","convertResultToData","metaData","sortedAnsweredQuestions","csvObj","nameOfProp","answer","insertMetaData","csvObject","timeInMs","brand","device","display","hardware","manufacturer","model","product","androidsdk","booleanToReadableString","hasAmplitude","bool","providedIn","ProfileComponent","confirmDialogService","oldPassword","newPassword","newPasswordRepeat","getUser","checkPassword","isValid","setUser","openDialog","isConfirmed","response","logout","login","AuthService","http","storageService","clear","isTokenExpired","getAuthToken","userIsValid","token","post","toPromise","get","err","permission","setAuthToken","undefined","set","userToken","JSON","parse","_id","_firstName","_lastName","_permission","_email","stringify","UserResultTupleDAO","studyService","studyId","userResult","studyResult","element","answers","questionAnswer","studyObjects","objectId","copied","PARTICIPANT","idUser","object","participantId","success","userId","returnId","environment","production","MyStudiesComponent","studywrapper","keyDataService","csvService","resultService","studies","loading","creating","getStudies","getFromUserId","keyDataResults","keyDataResult","studyStatus","FINISHED","updateStudyState","CREATED","STANDARD","giveResultCSV","giveParticipantsCSV","PUBLISHED","EMail","ensureValidation","StorageService","key","item","localStorage","getItem","setItem","removeItem","maxLength","ShortDescription","ensureTextValidation","toValidate","ParticipatedStudiesComponent","_exampleStudieListItems","SectionElement","_studyObjects","oldIndex","newIndex","highestIndex","RangeError","filter","ID","ReferenceTuple","isFixed","_ID","_isFixed","UserDao","userURL","userPermission","MultipleChoiceQuestion","questionText","answerOptions","maxChoices","_maxChoices","_answerOptions","ConfirmDialogService","dialog","msg","dialogRef","open","DialogTemplate","message","afterClosed","close","RoleGuardService","route","state","expectedRole","DashboardRoutingModule","imports","forChild","exports","AbstractStudyObject","_name","_displayName","DashboardComponent","KeyDataDao","studyURL","qualiQuestionURL","studiesResult","shortDescription","fullDescription","isAmplitudeNecessary","keyDatas","author","availableResult","amplitudeNecessary","routes","path","redirectTo","pathMatch","component","canActivate","loadChildren","m","DashboardModule","StudycreationModule","AppComponent","appSettingsService","declarations","RandomizingStrategies","LinearScaleQuestion","numberOfChoices","leftLabel","rightLabel","_numberOfChoices","_leftLabel","_rightLabel","ReferenceTupleMembershipVerifier","studyPrototype","_studyPrototype","ref","search","searchForId","sections","assignType","answeredQuestion","list","i","QUESTION","TEXT","SECTION","VIBRATIONPATTERN","AppModule","providers","bootstrap","entryComponents","AuthGuardService","StudyPrototype","_refSections","_sections","_answeredQuestion","_keyData","_metaDataOfDevice","metaDataOfDevice","refSections","UserResultTuple","_user","_results","_metaData","StudyStatus","PauseElement","StudyCreationComponent","saving","savingInterval","setInterval","clearInterval","setTimeout","AbstractVibrationPatternElement","pow","_duration","ensure64BitNumber","AlertService","snackBar","panelClass","afterDismissed","dismissedByAction","DateQuestion","start","end","_start","_end","StudyPrototypeDAO","qualiQuestions","qualiQuestion","toInsert","requiredAnswer","sectionRef","section","refArray","sectionElement","studyObjectTypes","questionType","vibrationElements","vibrationPatternElements","vibElement","Types","StudyWrapperService","isDemo","referenceTupleMembershipVerifier","lastID","_study","sectionelement","studyobject","qualiquestion","getLastID","_lastID","QualificationQuestion","_requiredAnswer","KeyData","shortdescription","fulldescription","_qualiQuestions","_amplitudeNecessary","_studyStatus","_author","_shortDescription","_fullDescription","TextQuestion","_length","User","ensureNameValidation","ensurePermissionValidation","toCompare","UserPermission","VibrationPattern","_vibrationPatternElements","AppRoutingModule","forRoot","LoginComponent","toDashboard","materialModules","MaterialModule","AvailableStudiesComponent","bootstrapModule","console","log","AppSettingsService","_hasVibrator","_hasAmplitude","hasVibrator","AbstractQuestion","_questionText","_answer","webpackEmptyAsyncContext","req","Promise","resolve","e","code","keys","module"],"mappings":"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","file":"main-es5.js","sourcesContent":["export default \"<div *ngIf=\\\"loading\\\">\\r\\n    <mat-spinner></mat-spinner>\\r\\n</div>\\r\\n<div *ngFor=\\\"let keyData of studies; let index = index\\\">\\r\\n    <mat-card>\\r\\n        <div class=\\\"card-container\\\">\\r\\n            <mat-card-title class=\\\"card-container-left\\\">{{ keyData.name }}</mat-card-title>\\r\\n            <div class=\\\"buttonrow\\\">\\r\\n                <button *ngIf=\\\"keyData.studyStatus == 0\\\" mat-flat-button class=\\\"greenButton\\\" (click)=\\\"onEditClick(keyData)\\\">\\r\\n                    <mat-icon>edit</mat-icon>&nbsp;Bearbeiten\\r\\n                </button>\\r\\n\\r\\n                <button *ngIf=\\\"keyData.studyStatus == 0\\\" mat-flat-button class=\\\"brownButton\\\" (click)=\\\"publish(keyData)\\\">\\r\\n                    <mat-icon>publish</mat-icon>&nbsp;Veröffentlichen\\r\\n                </button>\\r\\n\\r\\n                <button *ngIf=\\\"keyData.studyStatus == 1\\\" mat-flat-button class=\\\"greenButton\\\" (click)=\\\"onEndClick(keyData)\\\">\\r\\n                    <mat-icon>clear</mat-icon>&nbsp;Beenden\\r\\n                </button>\\r\\n\\r\\n                <button *ngIf=\\\"keyData.studyStatus == 2\\\" mat-flat-button class=\\\"brownButton\\\" (click)=\\\"resetStudy(keyData.id)\\\">\\r\\n                    <mat-icon>replay</mat-icon>&nbsp;Zurücksetzen\\r\\n                </button>\\r\\n\\r\\n                <button *ngIf=\\\"keyData.studyStatus == 2\\\" mat-flat-button class=\\\"greenButton\\\" (click)=\\\"getCSV(keyData.id)\\\">\\r\\n                    <mat-icon>assessment</mat-icon>&nbsp;Ergebnisse\\r\\n                </button>\\r\\n\\r\\n                <button *ngIf=\\\"keyData.studyStatus == 2\\\" mat-flat-button class=\\\"greenButton\\\" (click)=\\\"getParticipants(keyData.id)\\\">\\r\\n                    <mat-icon>supervisor_account</mat-icon>&nbsp;Teilnehmerliste\\r\\n                </button>\\r\\n\\r\\n                <button mat-flat-button class=\\\"redButton\\\" (click)=\\\"onDelete(keyData)\\\" style=\\\"margin-left: 15px\\\">\\r\\n                    <mat-icon>delete</mat-icon>&nbsp;Löschen\\r\\n                </button>\\r\\n            </div>\\r\\n        </div><br>\\r\\n        <mat-divider></mat-divider><br>\\r\\n        <mat-card-content style=\\\"word-wrap: normal;\\\">\\r\\n            {{keyData.shortDescription.text}}\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n    <br />\\r\\n</div>\\r\\n<a mat-fab class=\\\"greenButton\\\" (click)=\\\"onNewClick()\\\" style=\\\"display: block; margin: auto;\\\">\\r\\n    <mat-icon>add</mat-icon>\\r\\n</a>\";","export default \".full-page {\\r\\n    height: 100%;\\r\\n    display: flex;\\r\\n    background-color: #303030;\\r\\n  }\\r\\n  \\r\\n  .login-card {\\r\\n    margin: auto;\\r\\n    width: 350px;\\r\\n  }\\r\\n  \\r\\n  .login-field {\\r\\n    width: 100%;\\r\\n  }\\r\\n  \\r\\n  mat-card {\\r\\n    padding: 50px;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7SUFDWixhQUFhO0lBQ2IseUJBQXlCO0VBQzNCOztFQUVBO0lBQ0UsWUFBWTtJQUNaLFlBQVk7RUFDZDs7RUFFQTtJQUNFLFdBQVc7RUFDYjs7RUFFRjtJQUNJLGFBQWE7QUFDakIiLCJmaWxlIjoic3JjL2FwcC9yZWdpc3Rlci9yZWdpc3Rlci5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmZ1bGwtcGFnZSB7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzMwMzAzMDtcclxuICB9XHJcbiAgXHJcbiAgLmxvZ2luLWNhcmQge1xyXG4gICAgbWFyZ2luOiBhdXRvO1xyXG4gICAgd2lkdGg6IDM1MHB4O1xyXG4gIH1cclxuICBcclxuICAubG9naW4tZmllbGQge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfVxyXG5cclxubWF0LWNhcmQge1xyXG4gICAgcGFkZGluZzogNTBweDtcclxufVxyXG4iXX0= */\";","import { ReferenceTuple } from \"../ReferenceTuple\";\r\nimport { ReferenceTupleMembershipVerifier } from \"../ReferenceTupleMembershipVerifier\";\r\nimport { Types } from \"../Types\";\r\nimport { RandomizingStrategies } from \"../../Randomizing/RandomizingStrategies\";\r\nimport { AbstractStudyObject } from \"./AbstractStudyObject\";\r\n\r\n/**\r\n * Eine Section stellt einen logischen Abschnitt einer Studie dar, das nur Section-Elemente, also\r\n * nur Objekte der Klasse AbstractSectionElement, enthalten darf.\r\n */\r\nexport class Section extends AbstractStudyObject{\r\n\r\n  /**\r\n   * Der verifier wird verwendet um Objekte anhand ihrer id ihren ContainerObjekten zuzuordnen.\r\n   */\r\n  private _verifier: ReferenceTupleMembershipVerifier;\r\n  get verifier(): ReferenceTupleMembershipVerifier {\r\n    return this._verifier;\r\n  }\r\n  set verifier(verifier: ReferenceTupleMembershipVerifier) {\r\n    this._verifier = verifier;\r\n  }\r\n\r\n  /**\r\n   * Das Attribut gibt an, ob eine Section für den Studienteilnehmer überspringbar sein soll.\r\n   */\r\n  private _skippable: boolean;\r\n  get skippable(): boolean {\r\n    return this._skippable;\r\n  }\r\n  set skippable(skippable: boolean) {\r\n    if (skippable == null) {\r\n      throw new Error(\"Skippable darf nicht null sein.\");\r\n    }\r\n    this._skippable = skippable;\r\n  }\r\n\r\n  /**\r\n   * Das Attribut gibt an, ob eine Section in die Ergebnisauswertung miteinbezogen wird.\r\n   */\r\n  private _resultRelevant: boolean;\r\n  get resultRelevant (): boolean {\r\n    return this._resultRelevant;\r\n  }\r\n  set resultRelevant(resultRelevant: boolean) {\r\n    if (resultRelevant == null) {\r\n      throw new Error(\"ResultRelevant darf nicht null sein.\");\r\n    }\r\n    this._resultRelevant = resultRelevant;\r\n  }\r\n\r\n  /**\r\n   * Das Attribut gibt an, welcher Algorithmus für die Randomisierung über die Elemente, die in einer Section liegen verwendet wird\r\n   */\r\n  private _randomStrategy: RandomizingStrategies;\r\n  get randomStrategy(): RandomizingStrategies {\r\n    return this._randomStrategy;\r\n  }\r\n  set randomStrategy(randomStrategy: RandomizingStrategies) {\r\n    if (randomStrategy == null) {\r\n      throw new Error(\"RandomStrategy darf nicht null sein.\");\r\n    }\r\n    this._randomStrategy = randomStrategy;\r\n  }\r\n\r\n\r\n  /**\r\n   * In dem Attribut sind mittels ID Referenzen auf jene Elemente gespeichert, die innerhalb einer Section liegen.\r\n   */\r\n  private _sectionElements: ReferenceTuple[] = [];\r\n  get sectionElements(): ReferenceTuple[] {\r\n    return this._sectionElements;\r\n  }\r\n  set sectionElements(sectionElements: ReferenceTuple[]) {\r\n\r\n    this._sectionElements = sectionElements;\r\n  }\r\n\r\n  /**\r\n   * Ein Attribut, was nicht als Parameter übergeben wird, ist sectionElements.\r\n   * Dieses ist eine AbstractSectionElement-Liste, das die Section-Elemente\r\n   * enthält, die der Studienleiter zu einer Section hinzufügt\r\n   *\r\n   * @param skippable erlaubt das Überspringen der Section innerhalb der Studie\r\n   * @param name bezeichnet den Namen der Section\r\n   * @param resultRelevant entscheidet, ob Ergebnisse der Section ins Endergebnis einer Studie mit\r\n   * einfließen, z.B. ist eine Einführungs-Section mit einem Tutorial, um sich mit der Umgebung\r\n   * vertraut zu machen, nicht von Bedeutung\r\n   */\r\n  constructor(id: number, name: string, displayName: string, skippable: boolean, resultRelevant: boolean, randomStrategy: RandomizingStrategies) {\r\n    super(id, name, displayName);\r\n    this._skippable = skippable;\r\n    this._resultRelevant = resultRelevant;\r\n    this._randomStrategy = randomStrategy;\r\n  }\r\n\r\n  /**\r\n   * Fügt entweder einen Test oder einen Playground hinzu.\r\n   *\r\n   * @param studyObject ist die Referenz auf das StudyObject, das hinzugefügt werden soll.\r\n   * @param index ist die Stelle, an die das Objekt hinzugefügt werden soll. Bei null wird es am Ende der Liste hinzugefügt.\r\n   * @throws Error, falls es kein Test oder Playground ist.\r\n   */\r\n  addStudyObject(studyObject: ReferenceTuple, index?: number): void {\r\n\r\n    const typeOfReferenceTuple = this.verifier.getType(studyObject);\r\n\r\n    if (!(typeOfReferenceTuple === Types.SECTIONELEMENT)) {\r\n      throw new Error(\"In eine Section können nur SectionElements eingefügt werden.\");\r\n    }\r\n\r\n    if (index == null) {\r\n      this.sectionElements.push(studyObject);\r\n    } else {\r\n      this.sectionElements.splice(index, 0, studyObject);\r\n    }\r\n  }\r\n}\r\n","export default \".card-container {\\r\\n    display: flex;\\r\\n    justify-content: space-between;\\r\\n}\\r\\n\\r\\nbutton {\\r\\n    margin-left: 15px;\\r\\n    padding-bottom: 3px;\\r\\n}\\r\\n\\r\\nmat-card-title {\\r\\n    padding-top: 10px;\\r\\n}\\r\\n\\r\\n.greenButton {\\r\\n    background-color: #3e753b;\\r\\n    color: white;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGFzaGJvYXJkL215LXN0dWRpZXMvbXktc3R1ZGllcy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksYUFBYTtJQUNiLDhCQUE4QjtBQUNsQzs7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIsWUFBWTtBQUNoQiIsImZpbGUiOiJzcmMvYXBwL2Rhc2hib2FyZC9teS1zdHVkaWVzL215LXN0dWRpZXMuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jYXJkLWNvbnRhaW5lciB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG59XHJcblxyXG5idXR0b24ge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDE1cHg7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogM3B4O1xyXG59XHJcblxyXG5tYXQtY2FyZC10aXRsZSB7XHJcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcclxufVxyXG5cclxuLmdyZWVuQnV0dG9uIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzZTc1M2I7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbn0iXX0= */\";","import { AbstractStudyObject } from \"./AbstractStudyObject\";\r\n\r\n/**\r\n * Ein TextBlock stellt ein Studienobjekt dar, das nur einen unformatierten\r\n * Text enthält.\r\n */\r\nexport class TextBlock extends AbstractStudyObject {\r\n  objectType = \"TextBlock\";\r\n\r\n  /**\r\n   * Text der in der Studie angezeigt wird.\r\n   */\r\n  private _text: string;\r\n  get text(): string {\r\n    return this._text;\r\n  }\r\n  set text(text: string) {\r\n    this._text = text;\r\n  }\r\n\r\n  /**\r\n   * @param text ist der Inhalt, also der Text des TextBlocks\r\n   * @param id ist die eindeutige Identifikationsnummer des TextBlocks\r\n   * @param fixed entscheidet, ob der TextBlock innerhalb eines Section-Elements eine feste Position hat oder die\r\n   * Position von Studieninstanz zu Studieninstanz mit Hilfe von Randomisierung variiert\r\n   */\r\n  constructor(id: number, name: string, displayName: string, text: string) {\r\n    super(id, name, displayName);\r\n    this.text = text;\r\n  }\r\n}\r\n","import { AbstractVibrationPatternElement } from \"./AbstractVibrationPatternElement\";\r\n\r\nexport class VibrationElement extends AbstractVibrationPatternElement {\r\n\r\n  /**\r\n   * Amplitude gibt an wie stark die Vibration die ausgeführt werden soll ist.\r\n   */\r\n  private _amplitude: number;\r\n  get amplitude(): number {\r\n    return this._amplitude;\r\n  }\r\n  set amplitude(amplitude: number) {\r\n    if (amplitude == null) {\r\n      throw new Error(\"Amplitude konnte nicht gesetzt werden, da sie undefiniert ist.\");\r\n    }\r\n    const temp = Number(amplitude);\r\n    this.ensure8bitNumber(temp);\r\n    this._amplitude = temp;\r\n  }\r\n\r\n  constructor(duration: number, amplitude: number) {\r\n    super(duration);\r\n    this.ensure8bitNumber(amplitude);\r\n    this._amplitude = amplitude;\r\n  }\r\n\r\n  // Stellt sicher, dass der Parameter im erlaubten Bereich von 0 bis 255 liegt\r\n  private ensure8bitNumber(amplitude: number) {\r\n    if (!Number.isInteger(amplitude)) {\r\n      throw new Error(\"Es sind nur Ganzzahlen erlaubt.\");\r\n    }\r\n    if (!(amplitude > 0 && amplitude <= 255)) {\r\n      throw new Error(\"Es sind nur Werte zwischen 1 und 255 erlaubt.\");\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { EMail } from '../Model/User/EMail';\r\nimport { User } from '../Model/User/User';\r\nimport { UserDao } from '../Model/User/UserDao.service';\r\nimport { UserPermission } from '../Model/User/UserPermission';\r\nimport { AlertService } from '../services/alert/alert.service';\r\nimport { AuthService } from '../services/auth/auth.service';\r\n\r\n@Component({\r\n    selector: 'app-register',\r\n    templateUrl: './register.component.html',\r\n    styleUrls: ['./register.component.css']\r\n})\r\n/**\r\n * Die Registrierungskomponente ist für die Registrierung von Nutzern zuständig,\r\n * die noch nicht in der Datenbank stehen.\r\n */\r\nexport class RegisterComponent implements OnInit {\r\n    /**\r\n     * Das Feld, in das der Vorname eingetragen wird.\r\n     */\r\n    firstName = \"\";\r\n    /**\r\n     * Das Feld, in das der Nachname eingetragen wird.\r\n     */\r\n    lastName = \"\";\r\n    /**\r\n     * Das Feld, in das die EMail Adresse eingetragen wird.\r\n     */\r\n    email = \"\";\r\n    /**\r\n     * Das Feld, in das das Passwort eingetragen wird.\r\n     */\r\n    password = \"\";\r\n    /**\r\n     * Das Feld, in dem das Passwort wiederholt wird.\r\n     */\r\n    confirmPassword = \"\";\r\n\r\n    /**\r\n     * Konstruktor der RegisterComponent. Darin werden sämtliche Services initialisert,\r\n     * die für das Registrieren gebraucht werden.\r\n     * @param router router Router Singleton, zum Routen des Pfads nach Eintritt eines Ereignisses\r\n     * @param authService authService AuthService Singleton, ist für die Authentifizierung des Nutzers zuständig\r\n     * @param userService\r\n     */\r\n    constructor(private router: Router, private authService: AuthService,\r\n        private userService: UserDao, private alertService: AlertService) { }\r\n\r\n    /**\r\n     * Navigiert zum Dashboard wenn ein User authentifiziert wurde.\r\n     */\r\n    async ngOnInit(): Promise<void> {\r\n        await this.authService.isAuthenticated().then(result => {\r\n            if (result) {\r\n                this.router.navigate([\"dashboard\"], { replaceUrl: true });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Registriert für den Nutzer einen User in der Datenbank, falls er alle Eingabefelde\r\n     * korrekt eingetragen hat.\r\n     */\r\n    async register() {\r\n        if (this.firstName != \"\" && this.lastName != \"\" && this.email != \"\"\r\n            && this.password != \"\" && this.password == this.confirmPassword) {\r\n            let user = new User(0, this.firstName, this.lastName, UserPermission.CREATOR, new EMail(this.email));\r\n            await this.userService.save(user, \"\", this.password).then(result => {\r\n                if (result) {\r\n                    this.router.navigate([\"login\"], { replaceUrl: true });\r\n                } else {\r\n                    this.alertService.alert(\"Registration fehlgeschlagen. Vermutlich existiert bereits ein Account unter dieser E-Mail.\");\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n","export class AppSettings {\r\n    public static baseURL = \"https://bitschi.hopto.org/\"; // HIER * DURCH BACKEND SERVER URL ERSETZEN\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { UserResultTuple } from '../Result/UserResultTuple';\r\nimport { StudyPrototype } from '../StudyPrototype';\r\nimport { ExportToCsv } from 'export-to-csv';\r\nimport { AbstractQuestion } from '../StudyObjects/Questions/AbstractQuestion';\r\nimport { ICSVObject } from './csvObject';\r\nimport { MetaData } from '../MetaData';\r\nimport { User } from '../../User/User';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CSVConverter {\r\n    private metaDataHeaders = [\"Zeit in Millisekunden\", \"Marke\", \"Gerät\", \"Display\", \"Hardware\", \"Hersteller\", \"Model\", \"Produkt\", \"AndroidSDK\", \"Amplitude\"];\r\n\r\n    constructor() { }\r\n\r\n\r\n    generateResultCSV(study: StudyPrototype, results: UserResultTuple[], download: boolean): ExportToCsv {\r\n        let data = []; \r\n        const headers = this.generateHeaders(results[0].results);\r\n        const numberOfQuestions = headers.length - this.metaDataHeaders.length;\r\n\r\n        data = this.convertAllResultsToData(results, numberOfQuestions, data);\r\n\r\n        const csvExporter = new ExportToCsv(this.setOptions(headers, study, \"Ergebnisse\"));\r\n        return csvExporter.generateCsv(data, download);\r\n    }\r\n\r\n    giveResultCSV(study: StudyPrototype, results: UserResultTuple[]): ExportToCsv {\r\n        return this.generateResultCSV(study, results, false);\r\n    }\r\n\r\n    generateParticipantsCSV(study: StudyPrototype, results: UserResultTuple[], download: boolean) {\r\n        const headers = [\"Vorname\", \"Nachname\", \"E-Mail\"];\r\n        let data = [];\r\n        let participants: User[] = [];\r\n\r\n        results.forEach(triple => { participants.push(triple.user); });\r\n\r\n        const shuffeldUser = participants.map((a) => ({ sort: Math.random(), value: a }))\r\n            .sort((a, b) => a.sort - b.sort)\r\n            .map((a) => a.value);\r\n\r\n        data = this.convertParticipantsToData(shuffeldUser, data);\r\n\r\n        const csvExporter = new ExportToCsv(this.setOptions(headers, study, \"Teilnehmerliste\"));\r\n        return csvExporter.generateCsv(data, download);\r\n    }\r\n\r\n    giveParticipantsCSV(study: StudyPrototype, results: UserResultTuple[]) {\r\n        return this.generateParticipantsCSV(study, results, false);\r\n    }\r\n\r\n\r\n    private convertParticipantsToData(participants: User[], data: any): any {\r\n\r\n        participants.forEach(participant => {\r\n            data.push({ firstName: participant.firstName, lastName: participant.lastName, email: participant.email.email });\r\n        });\r\n\r\n        return data;\r\n    }\r\n\r\n    private setOptions(headers: string[], study: StudyPrototype, fileType: string): any { //TODO: nciht so schön\r\n        const studyKeyData = study.keyData;\r\n        const options = {\r\n            fieldSeparator: ';',\r\n            filename: studyKeyData.name + \" - \" + fileType,\r\n            quoteStrings: '\"',\r\n            decimalseparator: '.',\r\n            showLabels: true,\r\n            showTitle: true,\r\n            title: fileType + ' ' + studyKeyData.name,\r\n            useBom: true,\r\n            noDownload: true,\r\n            headers: headers,\r\n            nullToEmptyString: true,\r\n        };\r\n        return options;\r\n    }\r\n\r\n    private generateHeaders(questions: AbstractQuestion[]): string[] {\r\n        let headers: string[] = [];\r\n        const sortedQuestions = this.sortQuestionsByID(questions);\r\n\r\n        sortedQuestions.forEach(question => {\r\n            headers.push(question.name + \"(\" + question.id + \")\");\r\n        });\r\n\r\n        headers = headers.concat(this.metaDataHeaders);\r\n\r\n        return headers;\r\n    }\r\n\r\n    private sortQuestionsByID(questions: AbstractQuestion[]): AbstractQuestion[] {\r\n        return questions.sort((a, b) => (a.id > b.id) ? 1 : -1);\r\n    }\r\n\r\n    private convertAllResultsToData(results: UserResultTuple[], numberOfQuestions: number, data : any) {\r\n        results.forEach(tuple => {\r\n            const answeredQuestions = tuple.results;\r\n            if (answeredQuestions.length !== numberOfQuestions) {\r\n                throw new Error(\"Es wurden nicht alle Fragen beantwortet.\");\r\n            }\r\n            data = this.convertResultToData(answeredQuestions, tuple.metaData, data);\r\n        });\r\n        return data;\r\n    }\r\n\r\n    private convertResultToData(result: AbstractQuestion[], metaData: MetaData, data : any) {\r\n        const sortedAnsweredQuestions = this.sortQuestionsByID(result);\r\n        let csvObj: ICSVObject = {};\r\n\r\n        sortedAnsweredQuestions.forEach(question => {\r\n            const nameOfProp = \"question\" + question.id;\r\n            csvObj[nameOfProp] = question.answer;\r\n        });\r\n\r\n        csvObj = this.insertMetaData(csvObj, metaData);\r\n\r\n        data.push(csvObj);\r\n        return data;\r\n    }\r\n\r\n    private insertMetaData(csvObject: ICSVObject, metaData: MetaData): ICSVObject {\r\n        csvObject[\"time\"] = metaData.timeInMs;\r\n        csvObject[\"brand\"] = metaData.brand;\r\n        csvObject[\"device\"] = metaData.device;\r\n        csvObject[\"display\"] = metaData.display;\r\n        csvObject[\"hardware\"] = metaData.hardware;\r\n        csvObject[\"manufacturer\"] = metaData.manufacturer;\r\n        csvObject[\"model\"] = metaData.model;\r\n        csvObject[\"product\"] = metaData.product;\r\n        csvObject[\"androidsdk\"] = metaData.androidsdk;\r\n        csvObject[\"amplitude\"] = this.booleanToReadableString(metaData.hasAmplitude);\r\n\r\n        return csvObject;\r\n    }\r\n\r\n    private booleanToReadableString(bool: boolean): string { //TODO: dafür gibt es bestimmt schon was\r\n        if (bool) {\r\n            return \"Ja\";\r\n        }\r\n        return \"Nein\";\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { User } from '@src/app/Model/User/User';\r\nimport { UserDao } from '@src/app/Model/User/UserDao.service';\r\nimport { AlertService } from '@src/app/services/alert/alert.service';\r\nimport { ConfirmDialogService } from '@src/app/services/dialogs/confirmDialog.service';\r\nimport { AuthService } from '../../services/auth/auth.service';\r\n\r\n@Component({\r\n    selector: 'app-profile',\r\n    templateUrl: './profile.component.html',\r\n    styleUrls: ['./profile.component.css']\r\n})\r\n/**\r\n * Die ProfileComponent befähigt den Nutzer dazu alle Accountdaten zu verwalten,\r\n * die er momentan in der Datenbank abgespeichert hat. Dafür wird dem Nutzer\r\n * die Profil-Ansicht angeboten.\r\n */\r\nexport class ProfileComponent implements OnInit {\r\n\r\n    /**\r\n     * User-Objekt des aktuell eingeloggten Nutzers.\r\n     */\r\n    user: User;\r\n\r\n    oldPassword = \"\";\r\n    newPassword = \"\";\r\n    newPasswordRepeat = \"\";\r\n\r\n    constructor(private authService: AuthService, private userService: UserDao, private alertService: AlertService, private confirmDialogService: ConfirmDialogService) { }\r\n\r\n    /**\r\n     * Initialisiert die ProfileComponent.\r\n     */\r\n    async ngOnInit() {\r\n        this.user = this.authService.getUser();\r\n    }\r\n\r\n    /**\r\n     * Speichert den neuen Nutzer innerhalb der Datenbank und dem lokalen Speicher ab.\r\n     */\r\n    async saveUser() {\r\n        await this.userService.checkPassword(this.user.id, this.oldPassword).then(async isValid => {\r\n            if (isValid) {\r\n                await this.userService.save(this.user, this.oldPassword, this.oldPassword).then(result => {\r\n                    if (result) {\r\n                        this.alertService.alert(\"Accountdaten erfolgreich gespeichert!\");\r\n                        this.authService.setUser(this.user);\r\n                        this.oldPassword = \"\";\r\n                    } else {\r\n                        this.alertService.alert(\"Das vorherige Passwort ist nicht korrekt. Accountdaten wurden nicht geändert.\");\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Entfernt den Nutzer aus der Datenbank und loggt ihn aus der Anwendung aus.\r\n     */\r\n    async deleteUser() {\r\n        this.confirmDialogService.openDialog(\"Hiermit werden alle deine Daten, inklusive deiner erstellten Studien, unwiderruflich gelöscht!\").then(async isConfirmed => {\r\n            if (isConfirmed) {\r\n                await this.userService.delete(this.user).then(response => {\r\n                    if (response) {\r\n                        this.alertService.alert(\"Account erfolgreich gelöscht!\");\r\n                    }\r\n                });\r\n                this.authService.logout();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Speichert das neue Passwort ab.\r\n     */\r\n    async savePassword() {\r\n        if (this.newPassword == this.newPasswordRepeat) {\r\n            await this.userService.save(this.user, this.oldPassword, this.newPassword).then(async result => {\r\n                if (result) {\r\n                    await this.authService.login(this.user.email.email, this.newPassword);\r\n                    this.newPassword = \"\";\r\n                    this.newPasswordRepeat = \"\";\r\n                    this.oldPassword = \"\";\r\n                    this.alertService.alert(\"Passwort erfolgreich geändert!\");\r\n                } else {\r\n                    this.alertService.alert(\"Das vorherige Passwort ist nicht korrekt. Das Passwort wurde nicht geändert.\");\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AppSettings } from '@src/app/app-settings';\r\nimport { EMail } from '@src/app/Model/User/EMail';\r\nimport { User } from '@src/app/Model/User/User';\r\nimport { AlertService } from '../alert/alert.service';\r\nimport { StorageService } from '../storage/storage.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n/**\r\n * Der AuthService verwaltet die Authentifizierung, Registrierung und\r\n * Abmeldung des Nutzers in der Anwendung.\r\n */\r\nexport class AuthService {\r\n    /**\r\n     * Konstruktor des AuthService. Darin werden sämtliche Services initialisert,\r\n     * die für eine Authentifizierung des Nutzers gebraucht werden.\r\n     * @param router Router Singleton, zum Routen des Pfads nach Eintritt eines Ereignisses\r\n     * @param http HttpClient der zurückgi\r\n     * @param storageService StorageService, zum Ablegen des authentifizierten Nutzers in den lokalen Speicher\r\n     * @param alertService\r\n     */\r\n    constructor(private http: HttpClient, private router: Router, private storageService: StorageService, private alertService: AlertService) { }\r\n\r\n    /**\r\n     * Löscht den registrierten Nutzer aus dem lokalen Speicher.\r\n     */\r\n    clear(): void {\r\n        this.storageService.clear();\r\n    }\r\n\r\n    /**\r\n     * Überprüft ob ein gegebener User in der Datenbank existiert\r\n     * und auch autehntifiziert werden kann.\r\n     * @returns Promise<boolean>, je nachdem ob der Nutzer existiert oder nicht\r\n     */\r\n    async isAuthenticated(): Promise<boolean> {\r\n        let result = false;\r\n        if (!this.isTokenExpired()) {\r\n            if (this.getUser() && this.getAuthToken()) {\r\n                await this.userIsValid(this.getUser().id, this.getAuthToken()).then(response => {\r\n                    if (response) {\r\n                        result = true;\r\n                    } else {\r\n                        this.alertService.alert(\"Login-Session abgelaufen. Bitte erneut anmelden!\");\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Checkt ob ein Nutzer valide ist.\r\n     * @param id number des User-Objekts vom Nutzer\r\n     * @param token string Token des Nutzers\r\n     */\r\n    async userIsValid(id: number, token: string): Promise<boolean> {\r\n        let isValid = false;\r\n        await this.http.post(AppSettings.baseURL + \"VerifyUser/\", { id: id, token: token }).toPromise().then(result => {\r\n            if (result) {\r\n                isValid = true;\r\n            }\r\n        });\r\n        return isValid;\r\n    }\r\n\r\n    /**\r\n     * Checkt ob ein Token für die Sitzung mit dem Nutzer schon abgelaufen ist oder nicht.\r\n     * @returns boolean ob Token abgelaufen ist oder nicht\r\n     */\r\n    isTokenExpired(): boolean {\r\n        try {\r\n            this.storageService.get(\"userToken\");\r\n        } catch (err) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Loggt einen Nutzer in die Anwendung ein, indem das User-Objekt aus der Datenbank geholt wird\r\n     * und anschließend in den lokalen Speicher reingeladen wird, falls das eingegebene Passwort\r\n     * mit dem des Nutzers in der Datenbank übereinstimmt.\r\n     * @param email string für die E-Mail Adresse des Nutzers\r\n     * @param password string für das Passwort des Nutzers\r\n     * @throws Error, wenn kein solcher Nutzer in der Datenbank enthalten ist\r\n     */\r\n    async login(email: string, password: string): Promise<boolean> {\r\n\r\n        let user: User;\r\n        await this.http.post(AppSettings.baseURL + \"Login/\", {\r\n            email: email,\r\n            password: password,\r\n        }).toPromise().then(data => {\r\n            if ((data as any).id) {\r\n                user = new User((data as any).id, (data as any).firstName, (data as any).lastName,\r\n                    (data as any).permission, new EMail((data as any).email));\r\n                this.setUser(user);\r\n                this.setAuthToken((data as any).token);\r\n            } else {\r\n\r\n                throw new Error(\"No such user found in database.\");\r\n            }\r\n        });\r\n        return user != undefined;\r\n    }\r\n\r\n    /**\r\n     * Setzt ein Authentifizierungstoken im lokalen Speicher.\r\n     * @param token string des Tokens\r\n     */\r\n    setAuthToken(token: string) {\r\n        this.storageService.set(\"token\", token);\r\n    }\r\n\r\n    /**\r\n     * Holt den Authentifizierungstoke aus dem lokalen Speicher.\r\n     */\r\n    getAuthToken(): string {\r\n        return this.storageService.get(\"token\");\r\n    }\r\n\r\n    /**\r\n     * Generiert einen Standardnutzer welcher durch den Nutzer, der im userToken spezifiziert wurde, überschrieben\r\n     * wird. Dieser wird dann anschließend als registrierter Nutzer zurückgeschrieben.\r\n     * @returns User-Objekt des aktuell registrierten Nutzers\r\n     * @throws Error, wenn kein Nutzer im lokalen Speicher enthalten ist\r\n     */\r\n    getUser(): User {\r\n        let user: User;\r\n        if (this.storageService.get(\"userToken\") != undefined) {\r\n            let userToken = JSON.parse(this.storageService.get(\"userToken\"));\r\n            user = new User(userToken._id, userToken._firstName, userToken._lastName, userToken._permission,\r\n                new EMail(userToken._email._email));\r\n        }\r\n        return user;\r\n    }\r\n\r\n    /**\r\n     * Setzt einen Nutzer in den lokalen Speicher, indem sein User-Objekt\r\n     * zu eiem JSON konvertiert und anschließend abgespeichert wird.\r\n     * Hierbei wird im lokalen Speicher genau ein Nutzer abgelegt.\r\n     * @param user User-Objekt des Nutzers, der in den lokalen Speicher gesetzt werden soll\r\n     * @throws Error, wenn der Nutzer auf null oder undefined gesetzt wird\r\n     */\r\n    setUser(user: User) {\r\n        if (user == null) {\r\n            throw new Error(\"Setting the User to null or undefined is not allowed.\");\r\n        }\r\n        this.storageService.set(\"userToken\", JSON.stringify(user));\r\n    }\r\n\r\n    /**\r\n     * Entfernt den registrieten Nutzer aus dem lokalen Speicher und navigiert zur Login-Ansicht.\r\n     */\r\n    logout(): void {\r\n        this.clear();\r\n        this.router.navigate([\"login\"], { replaceUrl: true });\r\n    }\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { AppSettings } from \"@src/app/app-settings\";\r\nimport { AuthService } from \"@src/app/services/auth/auth.service\";\r\nimport { EMail } from \"../../User/EMail\";\r\nimport { User } from \"../../User/User\";\r\nimport { UserPermission } from \"../../User/UserPermission\";\r\nimport { StudyPrototype } from \"../StudyPrototype\";\r\nimport { StudyPrototypeDAO } from \"../StudyPrototypeDAO.service\";\r\nimport { UserResultTuple } from \"./UserResultTuple\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class UserResultTupleDAO {\r\n\r\n    constructor(private http: HttpClient, private studyService: StudyPrototypeDAO, private authService: AuthService) { }\r\n\r\n    /**\r\n     * Die Methode gibt asynchron ein UserResultTuple zurück, welches eindeutig durch die id identifiziert wird.\r\n     * @param studyId number ist die ID des UserResultTuple, der aus der Datenbank geholt werden soll\r\n     */\r\n    async get(studyId: number): Promise<UserResultTuple[]> {\r\n        let userResult: UserResultTuple[] = [];\r\n        let study: StudyPrototype;\r\n        await this.studyService.get(studyId).then(studyResult => {\r\n            study = studyResult;\r\n        });\r\n\r\n        await this.http.post(AppSettings.baseURL + \"Result/\" + studyId + \"/\", \r\n        { token: this.authService.getAuthToken() })\r\n        .toPromise().then(result => {\r\n            for (let element of result as any) {\r\n                let answers = [];\r\n                let index = 0;\r\n                for (let questionAnswer of element.answers) {\r\n                    for (let studyObject of study.studyObjects) {\r\n                        if (studyObject.id == questionAnswer.objectId) {\r\n                            let copied = _.cloneDeep(studyObject);\r\n                            copied.id = index++;\r\n                            copied.answer = questionAnswer.answer;\r\n                            answers.push(copied);\r\n                        }\r\n                    }\r\n                }\r\n                userResult.push(new UserResultTuple(new User(0, element.participant.firstName, element.participant.lastName, UserPermission.PARTICIPANT, \r\n                    new EMail(element.participant.email)), answers, element.metaData));\r\n            }\r\n        });\r\n\r\n        return userResult;\r\n    }\r\n\r\n    /**\r\n     * Die Methode speichert asynchron ein UserResultTuple in einer Datenbank, welches nachdem \r\n     * es gespeichert wurde wieder mit get aufgerufen werden kann.\r\n     * @param studyId number Id der Studie\r\n     * @param idUser number Id des Users der an der Studie teilgenomment hat\r\n     * @param object UserResultTuple ist der UserResultTuple, der gespeichert werden soll\r\n     * @param participantId number Id die der User innerhalb der Studie zugewiesen bekommen hat\r\n     */\r\n    async save(studyId: number, idUser: number, object: UserResultTuple, participantId: number): Promise<boolean> {\r\n        let success = false;\r\n        await this.http.post(AppSettings.baseURL + \"SaveResult/\", {\r\n            participantId: participantId,\r\n            studyId: studyId,\r\n            userId: idUser,\r\n            metaData: object.metaData,\r\n            answeredQuestions: object.answeredQuestions,\r\n            token: this.authService.getAuthToken(),\r\n        }).toPromise().then(result => {\r\n            if (result) {\r\n                success = true;\r\n            }\r\n        });\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * Startet die Ausführung einer bestimmten Studie für einen Nutzer\r\n     * @param studyId number id der Studie die gestartet wird\r\n     * @param userId number id des Users der an der Studie teilnimmt\r\n     */\r\n    async startStudy(studyId: number, userId: Number): Promise<number> {\r\n        let returnId: number = -1;\r\n        await this.http.post(AppSettings.baseURL + \"StartStudy/\", {studyId: studyId, userId: userId, \r\n            token: this.authService.getAuthToken()})\r\n            .toPromise().then(result => {\r\n            if (result != -1) {\r\n                returnId = result as any;\r\n            }\r\n        });\r\n        return returnId;\r\n    }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\";","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { KeyData } from '@src/app/Model/Study/KeyData';\r\nimport { KeyDataDao } from '@src/app/Model/Study/KeyDataDAO.service';\r\nimport { ShortDescription } from '@src/app/Model/Study/ShortDescription';\r\nimport { StudyPrototypeDAO } from '@src/app/Model/Study/StudyPrototypeDAO.service';\r\nimport { StudyStatus } from '@src/app/Model/Study/StudyStatus';\r\nimport { AuthService } from '../../services/auth/auth.service';\r\nimport { StudyWrapperService } from '@src/app/services/study-wrapper/study-wrapper.service';\r\nimport { CSVConverter } from '@src/app/Model/Study/CSVConverter/csvconverter.service';\r\nimport { StudyPrototype } from '@src/app/Model/Study/StudyPrototype';\r\nimport { UserResultTuple } from '@src/app/Model/Study/Result/UserResultTuple';\r\nimport { UserResultTupleDAO } from '@src/app/Model/Study/Result/UserResultTupleDAO.service';\r\nimport { RandomizingStrategies } from '@src/app/Model/Randomizing/RandomizingStrategies';\r\nimport { ConfirmDialogService } from '@src/app/services/dialogs/confirmDialog.service';\r\n\r\n@Component({\r\n    selector: 'app-my-studies',\r\n    templateUrl: './my-studies.component.html',\r\n    styleUrls: ['./my-studies.component.css']\r\n})\r\n/**\r\n * Die MyStudiesComponent blendet dem Nutzer alle Studien ein, welcher er selbst erstellt hat.\r\n * In der \"Meine-Studien\"-Ansicht kann der Nutzer seine eigenen Studien bearbeiten, veröffentlichen,\r\n * beenden und die Ergebnisse einsehen, sowie exportieren.\r\n */\r\nexport class MyStudiesComponent implements OnInit {\r\n\r\n    /**\r\n     * Das Array<KeyData> enthält alle Studien, die der eingeloggte Nutzer erstellt hat.\r\n     */\r\n    studies: KeyData[] = [];\r\n    /**\r\n     * boolean, welches zeigt, ob etwas lädt oder nicht.\r\n     */\r\n    loading: boolean = true;\r\n    /**\r\n     * boolean, welches zeigt, ob etwas erstellt wird oder nicht.\r\n     */\r\n    creating: boolean = false;\r\n\r\n    /**\r\n     * Konstruktor der MyStudiesComponent. Darin werden sämtliche Services initialisert,\r\n     * die für die \"Meine Studien\"-Ansicht gebraucht werden.\r\n     * @param router Router Singleton, zum Routen des Pfads nach Eintritt eines Ereignisses\r\n     * @param studywrapper StudyWrapperService Singleton, indem die zu bearbeitende Studie enthalten ist\r\n     * @param keyDataService KeyDataDao Singleton, um auf die Schlüsselinformationen aller verfügbaren Studien zuzugreifen\r\n     * @param studyService StudyPrototypeDAO Singleton, um auf sämtliche Studien zuzugreifen, die vom Nutzer erstellt wurde\r\n     * @param authService AuthService Singleton, ist für die Authentifizierung des Nutzers zuständig\r\n     * @param csvService CSVConverter ist zum konvertierten der Ergebnisse und zum Abspeichern dieser da\r\n     * @param resultService UserResultTupleDAO, um UserResultTuple aus der Datenbank anzusprechen\r\n     */\r\n    constructor(\r\n        private router: Router,\r\n        private studywrapper: StudyWrapperService,\r\n        public keyDataService: KeyDataDao,\r\n        private studyService: StudyPrototypeDAO,\r\n        private authService: AuthService,\r\n        private csvService: CSVConverter,\r\n        private resultService: UserResultTupleDAO,\r\n        private confirmDialogService: ConfirmDialogService\r\n    ) { }\r\n\r\n    /**\r\n     * Initialisiert die AvailableStudiesComponent.\r\n     */\r\n    async ngOnInit() {\r\n        if (this.authService.getUser().permission == 0) {\r\n            this.router.navigate([\"dashboard\"], { replaceUrl: true });\r\n        } else {\r\n            await this.getStudies();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Holt die vom Nutzer erstellten Studien.\r\n     */\r\n    async getStudies() {\r\n        this.loading = true;\r\n        await this.keyDataService.getFromUserId(this.authService.getUser().id).then(keyDataResults => {\r\n            if (keyDataResults.length > 0) {\r\n                this.studies = keyDataResults;\r\n            } else {\r\n                this.studies = [];\r\n            }\r\n            this.loading = false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Navigiert den Nutzer zur Studienerstellung-Ansicht, der jeweiligen ausgewählten Studie.\r\n     * @param keyData KeyData sind die Schlüsselinformationen der ausgewählten Studie\r\n     */\r\n    async onEditClick(keyData: KeyData) {\r\n        await this.studyService.get(keyData.id).then(studyResult => {\r\n            this.studywrapper.study = studyResult;\r\n        });\r\n        this.router.navigate([\"studycreation/general-editing\"], { replaceUrl: true });\r\n    }\r\n\r\n    /**\r\n     * Löscht die ausgewählte Studie aus der Datenbank.\r\n     * @param keyData KeyData sind die Schlüsselinformationen der ausgewählten Studie\r\n     */\r\n    async onDelete(keyData: KeyData) {\r\n        this.confirmDialogService.openDialog(\"Hiermit wird die Studie unwiderruflich gelöscht!\").then(async isConfirmed => {\r\n            if (isConfirmed) {\r\n                await this.keyDataService.delete(keyData.id).then(keyDataResult => {\r\n                    this.getStudies();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Beendet eine veröffentlichte Studie des Nutzers.\r\n     * @param keyData KeyData sind die Schlüsselinformationen der ausgewählten Studie\r\n     */\r\n    async onEndClick(keyData: KeyData) {\r\n        keyData.studyStatus = StudyStatus.FINISHED;\r\n        await this.keyDataService.updateStudyState(keyData.id, StudyStatus.FINISHED).then(result => {\r\n            if (result) {\r\n                this.getStudies();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Navigiert den Nutzer zur Studienerstellung-Ansicht, um eine neue Studie anzulegen.\r\n     */\r\n    async onNewClick() {\r\n        if (!this.creating) {\r\n            this.creating = true;\r\n            let user = await this.authService.getUser();\r\n            let keyData = new KeyData(-1, user, StudyStatus.CREATED, new ShortDescription(\"Neue Studie\"), \"Neue Studie\", false, \"Neue Studie\");\r\n            let study = new StudyPrototype(keyData);\r\n            study.randomStrategy = RandomizingStrategies.STANDARD;\r\n            await this.studyService.save(study).then(async result => {\r\n                if (result) {\r\n                    await this.studyService.get(result).then(studyResult => {\r\n                        this.studywrapper.study = studyResult;\r\n                        this.creating = false;\r\n                        this.router.navigate([\"studycreation/general-editing\"], { replaceUrl: true });\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Konvertiert die Ergebnisse in eine .csv-Datei und legt diese auf dem Endsystem des Nutzers ab.\r\n     * @param studyId number ist die ID der Studie, dessen Ergebnisse exportiert werden\r\n     */\r\n    async getCSV(studyId: number) {\r\n        let study: StudyPrototype;\r\n        await this.studyService.get(studyId).then(studyResult => {\r\n            study = studyResult;\r\n        });\r\n        let userResult: UserResultTuple[];\r\n        await this.resultService.get(studyId).then(result => {\r\n            userResult = result;\r\n        });\r\n        this.csvService.giveResultCSV(study, userResult);\r\n    }\r\n\r\n    /**\r\n     * Trägt alle Teilnehmer einer ausgewählten Studie in eine .csv-Datei ein und\r\n     * legt diese auf dem Endsystem des Nutzers ab.\r\n     * @param studyId number ist die ID der Studie, dessen Ergebnisse exportiert werden\r\n     */\r\n    async getParticipants(studyId: number) {\r\n        let study: StudyPrototype;\r\n        await this.studyService.get(studyId).then(studyResult => {\r\n            study = studyResult;\r\n        });\r\n        let userResult: UserResultTuple[];\r\n        await this.resultService.get(studyId).then(result => {\r\n            userResult = result;\r\n        });\r\n        this.csvService.giveParticipantsCSV(study, userResult);\r\n    }\r\n\r\n    /**\r\n     * Setzt eine Studie zurück.\r\n     * @param studyId number ist die ID der Studie, die zurückgesetzt wird\r\n     */\r\n    async resetStudy(studyId: number) {\r\n        this.confirmDialogService.openDialog(\"Beim Zurücksetzen der Studie werden auch alle Studienergebnisse gelöscht!\").then(async isConfirmed => {\r\n            if (isConfirmed) {\r\n                let study: StudyPrototype;\r\n                await this.studyService.get(studyId).then(studyResult => {\r\n                    study = studyResult;\r\n                });\r\n                study.keyData.studyStatus = StudyStatus.CREATED;\r\n                await this.keyDataService.delete(study.keyData.id);\r\n                await this.studyService.save(study);\r\n                this.getStudies();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Veröffentlicht eine ausgewählte Studie.\r\n     * @param keyData KeyData sind die Schlüsselinformationen der ausgewählten Studie\r\n     */\r\n    async publish(keyData: KeyData) {\r\n        keyData.studyStatus = StudyStatus.PUBLISHED;\r\n        await this.keyDataService.updateStudyState(keyData.id, StudyStatus.PUBLISHED).then(result => {\r\n            if (result) {\r\n                this.getStudies();\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","\r\n/**\r\n *Die public class Email definiert eine E-Mail Adresse\r\n */\r\nexport class EMail {\r\n\r\n    /**\r\n     * Das Attribut repräsentiert eine EMail Adresse\r\n     */\r\n    private _email: string;\r\n\r\n    /**\r\n     * Hier wird eine neue E-Mail erstellt und ihre Gültigkeit sichergestellt.\r\n     * @param email \r\n     */\r\n    constructor(email: string) {\r\n        if (this.ensureValidation(email)) {\r\n            this._email = email;\r\n        }\r\n    }\r\n\r\n    get email(): string {\r\n        return this._email;\r\n    }\r\n\r\n    /**\r\n     * Das Attribut email wird gesetzt und ihre Gültigkeit sichergestellt.\r\n     * @param email \r\n     */\r\n    set email(email: string) {\r\n        if (this.ensureValidation(email)) {\r\n            this._email = email;\r\n        }\r\n\r\n    }\r\n\r\n    private ensureValidation(email: string): boolean {\r\n        if (!email) {\r\n            throw new Error(\"Email kann nicht null oder leer sein.\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\n/**\r\n * Der StorageService verwaltet die Speicherung, Bearbeitung und Löschen von Items, welche\r\n * im lokalen Speicher der Sitzung abgelegt werden.\r\n */\r\nexport class StorageService {\r\n\r\n\t/**\r\n\t * Standardkonstruktor eines Services\r\n\t */\r\n\tconstructor() { }\r\n\r\n\t/**\r\n\t * Gibt das Item, welches den Schlüssel hat, aus dem lokalen Speicher zurück.\r\n\t * @param key string ist der Schlüssel des Items\r\n\t * @returns string des Items\r\n\t * @throws Error sobald das zurückgegebene Item null ist\r\n\t */\r\n\tget(key: string) {\r\n\t\tconst item = localStorage.getItem(key);\r\n\t\tif(item == null) {\r\n\t\t\tthrow new Error(\"No such data with given key found in local storage.\");\r\n\t\t}\r\n\t\treturn localStorage.getItem(key);\r\n\t}\r\n\r\n\t/**\r\n\t * Legt ein Item im lokalen Speicher ab.\r\n\t * @param key string ist der Schlüssel des Items\r\n\t * @param data string sind die Nutzdaten des Items\r\n\t * @throws Error sobald key oder data null oder undefined ist\r\n\t */\r\n\tset(key: string, data: string) {\r\n\t\tif((key == null) || (data == null)) {\r\n\t\t\tthrow new Error(\"Key or data is null or undefined.\");\r\n\t\t}\r\n\t\tlocalStorage.setItem(key, data);\r\n\t}\r\n\r\n\t/**\r\n\t * Löscht alle abgelegten Items innerhalb des lokalen Speichers.\r\n\t */\r\n\tclear() {\r\n\t\tlocalStorage.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * Löscht ein Item, welches den Schlüssel hat, aus dem lokalen Speicher.\r\n\t * @param key String ist der Schlüssel des Items\r\n\t */\r\n\tremove(key: string) {\r\n\t\tlocalStorage.removeItem(key);\r\n\t}\r\n}\r\n","/**\r\n * Die Konstante definiert, wie lang in Zeichen der String einer ShortDescription sein darf\r\n */\r\nconst maxLength = 200;\r\n\r\n/**\r\n * ShortDescription enthält die Kurzbeschreibung, die in der Studienübersicht angezeigt wird\r\n */\r\nexport class ShortDescription {\r\n\r\n    /**\r\n     * Der Text der Kurzbeschreibung.\r\n     */\r\n    private _text: string;\r\n    get text(): string {\r\n        return this._text;\r\n    }\r\n    /**\r\n     * Setzt den Text der Kurzbeschreibung und prüft ob die Beschreibung kürzer als die maximal erlaubte Länge ist\r\n     * @param text Text der Kurzbeschreibung\r\n     */\r\n    set text(text: string) {\r\n        if (this.ensureTextValidation(text)) {\r\n            this._text = text;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Erzeugt eine Kurzbeschreibung dabei kann wahlweise direkt der Text mitgegeben werden,\r\n     * der in der Kurzbeschreibung stehen soll.\r\n     * @param text\r\n     */\r\n    constructor(text?: string) {\r\n        if (this.ensureTextValidation(text)) {\r\n            this._text = text;\r\n        }\r\n    }\r\n\r\n    private ensureTextValidation(toValidate: string): boolean {\r\n        if (toValidate.length > maxLength) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ObservableArray } from '@nativescript/core';\r\nimport { KeyData } from '@src/app/Model/Study/KeyData';\r\n\r\n\r\n@Component({\r\n  selector: 'app-participated-studies',\r\n  templateUrl: './participated-studies.component.html',\r\n  styleUrls: ['./participated-studies.component.css']\r\n})\r\nexport class ParticipatedStudiesComponent implements OnInit {\r\n\r\n  private _exampleStudieListItems: ObservableArray<KeyData>;\r\n\r\n  get exampleStudieListItems(): ObservableArray<KeyData> {\r\n    return this._exampleStudieListItems;\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  constructor() { }\r\n\r\n}\r\n\r\n","export default \"<mat-toolbar>\\r\\n    <img src=\\\"assets/images/Icon.png\\\" style=\\\"height: 4vh;\\\" />\\r\\n    <span>&nbsp;&nbsp;VibroStudies</span>\\r\\n    <span class=\\\"flexExpand\\\"></span>\\r\\n    <a class=\\\"helpButton\\\" mat-flat-button href=\\\"https://www.youtube.com/watch?v=RfdquOH7AxI\\\" target=\\\"_blank\\\">\\r\\n        <mat-icon>help</mat-icon>&nbsp;Hilfe\\r\\n    </a>\\r\\n</mat-toolbar>\\r\\n<mat-sidenav-container>\\r\\n    <mat-sidenav opened mode=\\\"side\\\">\\r\\n        <mat-nav-list><br>\\r\\n            <div style=\\\"margin-left: 15px;\\\">\\r\\n                <h2>Hallo {{ this.authService.getUser().firstName }}!&nbsp;<mat-icon\\r\\n                        style=\\\"position:relative;top: 5px;\\\">emoji_people</mat-icon>\\r\\n                </h2>\\r\\n            </div>\\r\\n            <mat-divider></mat-divider>\\r\\n            <a mat-list-item [routerLink]=\\\"['profile']\\\">\\r\\n                <mat-icon>person</mat-icon>&nbsp;Profil\\r\\n            </a>\\r\\n            <div *ngIf=\\\"this.authService.getUser().permission != 0\\\">\\r\\n                <mat-divider></mat-divider>\\r\\n                <a mat-list-item [routerLink]=\\\"['my-studies']\\\">\\r\\n                    <mat-icon>question_answer</mat-icon>&nbsp;Meine Studien\\r\\n                </a>\\r\\n            </div>\\r\\n            <mat-divider></mat-divider>\\r\\n\\r\\n            <div class=\\\"bottomrow\\\">\\r\\n                <mat-divider></mat-divider>\\r\\n                <a mat-list-item (click)=\\\"logout()\\\" class>\\r\\n                    <mat-icon>exit_to_app</mat-icon>&nbsp;Abmelden\\r\\n                </a>\\r\\n            </div>\\r\\n\\r\\n        </mat-nav-list>\\r\\n    </mat-sidenav>\\r\\n    <mat-sidenav-content>\\r\\n        <router-outlet></router-outlet>\\r\\n        <br><br>\\r\\n    </mat-sidenav-content>\\r\\n</mat-sidenav-container>\";","import { ReferenceTuple } from \"../ReferenceTuple\";\r\nimport { ReferenceTupleMembershipVerifier } from \"../ReferenceTupleMembershipVerifier\";\r\nimport { RandomizingStrategies } from \"../../Randomizing/RandomizingStrategies\";\r\nimport { AbstractStudyObject } from \"./AbstractStudyObject\";\r\n\r\n/**\r\n * Ein SectionElement bezeichnet einen allgemeinen Container, in den man,\r\n * abhängig von der konkreten Unterklasse, nur bestimmte Studienobjekte einfügen kann.\r\n */\r\nexport class SectionElement extends AbstractStudyObject{\r\n\r\n  /**\r\n   * Der verifier wird verwendet um Objekte anhand ihrer id ihren ContainerObjekten zuzuordnen.\r\n   */\r\n  private _verifier: ReferenceTupleMembershipVerifier;\r\n  get verifier(): ReferenceTupleMembershipVerifier {\r\n    return this._verifier;\r\n  }\r\n  set verifier(verifier: ReferenceTupleMembershipVerifier) {\r\n    this._verifier = verifier;\r\n  }\r\n\r\n  /**\r\n   * Das Attribut gibt an, ob ein SectionElement für den Studienteilnehmer überspringbar sein soll.\r\n   */\r\n  private _skippable = false;\r\n  get skippable(): boolean {\r\n    return this._skippable;\r\n  }\r\n  set skippable(skippable: boolean) {\r\n    if (skippable == null) {\r\n      throw new Error(\"Skippable darf nicht null sein.\");\r\n    }\r\n    this._skippable = skippable;\r\n  }\r\n\r\n  /**\r\n   * In dem Attribut sind mittels ID Referenzen auf jene Elemente gespeichert, die innerhalb eines SectionElements liegen.\r\n   */\r\n  private _studyObjects: ReferenceTuple[] = [];\r\n  get studyObjects(): ReferenceTuple[] {\r\n    return this._studyObjects;\r\n  }\r\n  set studyObjects(studyObjects: ReferenceTuple[]) {\r\n    this._studyObjects = studyObjects;\r\n  }\r\n\r\n  /**\r\n   * Das Attribut gibt an, welcher Algorithmus für die Randomisierung über die Elemente, die in einer Section liegen verwendet wird\r\n   */\r\n  private _randomStrategy: RandomizingStrategies;\r\n  get randomStrategy(): RandomizingStrategies {\r\n    return this._randomStrategy;\r\n  }\r\n  set randomStrategy(randomStrategy: RandomizingStrategies) {\r\n    if (randomStrategy == null) {\r\n      throw new Error(\"RandomStrategy darf nicht null sein.\");\r\n    }\r\n    this._randomStrategy = randomStrategy;\r\n  }\r\n\r\n  /**\r\n   * Das Attribut gibt an, ob ein SectionElement in die Ergebnisauswertung miteinbezogen wird.\r\n   */\r\n  private _resultRelevant = true;\r\n  get resultRelevant (): boolean {\r\n    return this._resultRelevant;\r\n  }\r\n  set resultRelevant(resultRelevant: boolean) {\r\n    if (resultRelevant == null) {\r\n      throw new Error(\"ResultRelevant darf nicht null sein.\");\r\n    }\r\n    this._resultRelevant = resultRelevant;\r\n  }\r\n\r\n  /**\r\n   * Ein Attribut, was nicht als Parameter übergeben wird, ist studyObjects. Dieses ist eine\r\n   * AbstractStudyObjectProduct-Liste, das die vom Studienleiter in das Section-Element eingefügten Studienobjekte enthält\r\n   *\r\n   * @param name ist der Name des Section-Elements\r\n   * @param fixed entscheidet, ob das Section-Element eine feste Position in einer Section hat oder die\r\n   * Position von Studieninstanz zu Studieninstanz mit Hilfe von Randomisierung variiert\r\n   */\r\n  constructor(id: number, name: string, displayName: string, randomStrategy: RandomizingStrategies, studyObjects?: ReferenceTuple[],\r\n    verifier?: ReferenceTupleMembershipVerifier) {\r\n    super(id, name, displayName);\r\n    if (studyObjects == null) {\r\n      this._studyObjects = [];\r\n    } else {\r\n      this._studyObjects = studyObjects;\r\n    }\r\n    this._verifier = verifier;\r\n    this._randomStrategy = randomStrategy;\r\n  }\r\n\r\n  /**\r\n   * Die Methode tauscht ein StudyObject an den angegebenen Index.\r\n   * @Deprecated\r\n   * @param oldIndex ist der Index, an dem das StudyObject liegt.\r\n   * @param newIndex ist der gewünschte Index, an dem das StudyObject liegen soll.\r\n   * @throws RangeError, wenn der Index außerhalb des Bereiches der Liste war.\r\n   */\r\n  swapStudyObject(oldIndex: number, newIndex: number): void {\r\n    const highestIndex = (this.studyObjects.length - 1);\r\n\r\n    if (oldIndex > highestIndex || newIndex > highestIndex\r\n      || oldIndex < 0 || newIndex < 0) {\r\n      throw new RangeError(\"Index liegt außerhalb des Bereich.\");\r\n    }\r\n\r\n    const temp = this._studyObjects[oldIndex];\r\n    this._studyObjects[oldIndex] = this._studyObjects[newIndex];\r\n    this._studyObjects[newIndex] = temp;\r\n  }\r\n\r\n/**\r\n * Löscht ein StudyObject.\r\n * @Deprecated\r\n * @param id ist die ID des zu löschenden Objektes.\r\n */\r\n  removeStudyObject(id: number): void {\r\n    this.studyObjects = this.studyObjects.filter(element => element.ID !== id);\r\n  }\r\n\r\n  /**\r\n   * Fügt ein StudyObject hinzu.\r\n   * @Deprecated\r\n   * @param studyObject ist die Referenz auf das StudyObject, das hinzugefügt werden soll.\r\n   * @param index ist die Stelle, an die das Objekt hinzugefügt werden soll. Bei null wird es am Ende der Liste hinzugefügt.\r\n   */\r\n  addStudyObject(studyObject: ReferenceTuple, index?: number): void {\r\n    if (index == null) {\r\n      this.studyObjects.push(studyObject);\r\n    } else if (this.studyObjects == null && index === 0) {\r\n      this.studyObjects.push(studyObject);\r\n    } else if (this.studyObjects == null && index !== 0) {\r\n      throw new Error(\"Index des Section Elements fehlerhaft!\");\r\n    } else if (0 <= index && index <= this.studyObjects.length) {\r\n      this.studyObjects.splice(index, 0, studyObject);\r\n    } else {\r\n      throw new Error(\"Index des Section Elements fehlerhaft!\");\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Ein ReferenceTuple liegt in einer Container Objekt und speichert die ID des Elements,\r\n * welches dem Container zugeordnet werden soll, sowie die Information, ob das entspechende \r\n * Objekt bei einer Randomisierung des Containers seine Position behalten soll.\r\n */\r\nexport class ReferenceTuple {\r\n    /**\r\n     * ID des Objekts, dass dem Container zugeordnet wird.\r\n     */\r\n    private _ID: number;\r\n    get ID(): number {\r\n        return this._ID;\r\n    }\r\n    set ID(ID: number) {\r\n        this._ID = ID;\r\n    }\r\n\r\n    /**\r\n     * Information, ob Objekt bei Randomisierung des Containers seine Position behaöten soll.\r\n     */\r\n    private _isFixed: boolean;\r\n    get isFixed(): boolean {\r\n        return this._isFixed;\r\n    }\r\n    set isFixed(isFixed: boolean) {\r\n        this._isFixed = isFixed;\r\n    }\r\n\r\n    constructor(ID: number, isFixed: boolean) {\r\n        this._ID = ID;\r\n        this._isFixed = isFixed;\r\n    }\r\n}\r\n","export default \"mat-sidenav-container {\\r\\n    height: 94vh;\\r\\n}\\r\\n\\r\\nmat-sidenav-content {\\r\\n    padding: 15px;\\r\\n}\\r\\n\\r\\nmat-sidenav {\\r\\n    width: 13vw;\\r\\n}\\r\\n\\r\\nmat-toolbar {\\r\\n    height: 6vh;\\r\\n}\\r\\n\\r\\n.bottomrow {\\r\\n    position: absolute;\\r\\n    bottom: 0;\\r\\n    left: 0;\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\n.flexExpand {\\r\\n    flex: 1 1 auto;\\r\\n  }\\r\\n\\r\\n.helpButton {\\r\\n    background-color: #3e753b;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi9zdHVkeWNyZWF0aW9uLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixTQUFTO0lBQ1QsT0FBTztJQUNQLFdBQVc7QUFDZjs7QUFFQTtJQUNJLGNBQWM7RUFDaEI7O0FBRUY7SUFDSSx5QkFBeUI7QUFDN0IiLCJmaWxlIjoic3JjL2FwcC9zdHVkeWNyZWF0aW9uL3N0dWR5Y3JlYXRpb24uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIm1hdC1zaWRlbmF2LWNvbnRhaW5lciB7XHJcbiAgICBoZWlnaHQ6IDk0dmg7XHJcbn1cclxuXHJcbm1hdC1zaWRlbmF2LWNvbnRlbnQge1xyXG4gICAgcGFkZGluZzogMTVweDtcclxufVxyXG5cclxubWF0LXNpZGVuYXYge1xyXG4gICAgd2lkdGg6IDEzdnc7XHJcbn1cclxuXHJcbm1hdC10b29sYmFyIHtcclxuICAgIGhlaWdodDogNnZoO1xyXG59XHJcblxyXG4uYm90dG9tcm93IHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGJvdHRvbTogMDtcclxuICAgIGxlZnQ6IDA7XHJcbiAgICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuLmZsZXhFeHBhbmQge1xyXG4gICAgZmxleDogMSAxIGF1dG87XHJcbiAgfVxyXG4gIFxyXG4uaGVscEJ1dHRvbiB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2U3NTNiO1xyXG59Il19 */\";","export default \".full-page {\\r\\n    height: 100%;\\r\\n    display: flex;\\r\\n  }\\r\\n  \\r\\n  .login-card {\\r\\n    margin: auto;\\r\\n    width: 350px;\\r\\n  }\\r\\n  \\r\\n  .login-field {\\r\\n    width: 100%;\\r\\n  }\\r\\n  \\r\\n  mat-card {\\r\\n    padding: 50px;\\r\\n}\\r\\n  \\r\\n  .header {\\r\\n  font-size: 18px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGFzaGJvYXJkL3Byb2ZpbGUvcHJvZmlsZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksWUFBWTtJQUNaLGFBQWE7RUFDZjs7RUFFQTtJQUNFLFlBQVk7SUFDWixZQUFZO0VBQ2Q7O0VBRUE7SUFDRSxXQUFXO0VBQ2I7O0VBRUY7SUFDSSxhQUFhO0FBQ2pCOztFQUVBO0VBQ0UsZUFBZTtBQUNqQiIsImZpbGUiOiJzcmMvYXBwL2Rhc2hib2FyZC9wcm9maWxlL3Byb2ZpbGUuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5mdWxsLXBhZ2Uge1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICB9XHJcbiAgXHJcbiAgLmxvZ2luLWNhcmQge1xyXG4gICAgbWFyZ2luOiBhdXRvO1xyXG4gICAgd2lkdGg6IDM1MHB4O1xyXG4gIH1cclxuICBcclxuICAubG9naW4tZmllbGQge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfVxyXG5cclxubWF0LWNhcmQge1xyXG4gICAgcGFkZGluZzogNTBweDtcclxufVxyXG5cclxuLmhlYWRlciB7XHJcbiAgZm9udC1zaXplOiAxOHB4O1xyXG59Il19 */\";","import { User } from \"./User\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { EMail } from \"./EMail\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { AppSettings } from \"@src/app/app-settings\";\r\nimport { AuthService } from \"@src/app/services/auth/auth.service\";\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\n/**\r\n * Das UserDAO ist für den Zugriff auf die User Objekte in der Datenbank verantwortlich.\r\n */\r\nexport class UserDao {\r\n    userURL: string = AppSettings.baseURL + \"User/\";\r\n\r\n    constructor(private http: HttpClient, private authService: AuthService) { }\r\n\r\n    /**\r\n     * Die Methode gibt asynchron ein User Objekt zurück, welches eindeutig durch die id identifiziert wird.\r\n     * @param id number ist die ID des Users, der aus der Datenbank geholt werden soll\r\n     */\r\n    async get(id: number): Promise<User> {\r\n        let user: User;\r\n\r\n        await this.http.post(this.userURL + id + \"/\", { token: this.authService.getAuthToken() }).toPromise().then(data => {\r\n            user = new User((data as any).id, (data as any).firstName, (data as any).lastName,\r\n                (data as any).userPermission, new EMail((data as any).email));\r\n        });\r\n\r\n        return user;\r\n    }\r\n\r\n    /**\r\n     * Prüft, ob das gegebene Passwort zum Passwort des User in der Datenbank passt\r\n     * @param userId number ID des User \r\n     * @param password string Passwort das zu prüfen ist\r\n     */\r\n    async checkPassword(userId: number, password: string): Promise<boolean> {\r\n        let result = false;\r\n        await this.http.post(AppSettings.baseURL + \"CheckPassword/\", {\r\n            id: userId,\r\n            password: password,\r\n            token: this.authService.getAuthToken(),\r\n        }).toPromise().then(response => {\r\n            if (response) {\r\n                result = true;\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Die Methode speichert asynchron object in einer Datenbank, welches nachdem es gespeichert wurde wieder mit get aufgerufen werden kann.\r\n     * @param object User ist der Nutzer, der gespeichert werden soll\r\n     * @param oldPassword string altes Passwort des User\r\n     * @param newPassword string neues Passwort des User\r\n     */\r\n    async save(object: User, oldPassword: string, newPassword: string): Promise<boolean> {\r\n        let result = false;\r\n        await this.http.post(AppSettings.baseURL + \"SaveUser/\", {\r\n            id: object.id,\r\n            firstName: object.firstName,\r\n            lastName: object.lastName,\r\n            oldPassword: oldPassword,\r\n            newPassword: newPassword,\r\n            email: object.email.email,\r\n        }).toPromise().then(data => {\r\n            if (data) {\r\n                result = true;\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Löscht das User Objekt object aus der Datenbank.\r\n     * @param object User ist der Nutzer, der gelöscht werden soll\r\n     */\r\n    async delete(object: User): Promise<boolean> {\r\n        let success = false;\r\n        await this.http.post(AppSettings.baseURL + \"DeleteUser/\" + object.id + \"/\", \r\n        { token: this.authService.getAuthToken() }).toPromise().then(data => {\r\n            if (data) {\r\n                success = true;\r\n            }\r\n        });\r\n        return success;\r\n    }\r\n}\r\n","export default \"<h1 mat-dialog-title>Bist du dir sicher?</h1>\\r\\n<div mat-dialog-content>\\r\\n  <p>{{data.message}}</p>\\r\\n</div>\\r\\n<div mat-dialog-actions>\\r\\n  <button mat-button (click)=\\\"onCancel()\\\">Abbrechen</button>\\r\\n  <button mat-button (click)=\\\"onConfirm()\\\">Bestätigen</button>\\r\\n</div>\";","import { AbstractQuestion } from \"./AbstractQuestion\";\r\n\r\n/**\r\n * Ein MultipleChoiceQuestion ist ein Fragenobjekt, das sowohl mehrere Antworten\r\n * anbieten als auch mehrere Antworten akzeptieren kann\r\n */\r\nexport class MultipleChoiceQuestion extends AbstractQuestion {\r\n  objectType = \"MultipleChoiceQuestion\";\r\n\r\n  private _maxChoices: number;\r\n  get maxChoices(): number {\r\n    return this._maxChoices;\r\n  }\r\n  set maxChoices(maxChoices: number) {\r\n    if (maxChoices == null) {\r\n      throw new Error(\"MaxChoices darf nicht null sein.\"); \r\n    }\r\n    if (maxChoices < 1) {\r\n      throw new Error(\"Es muss mindestens eine Antwort angegeben werden können\"); \r\n    }\r\n    this._maxChoices = maxChoices;\r\n  }\r\n\r\n  private _answerOptions: string[];\r\n  get answerOptions(): string[] {\r\n    return this._answerOptions;\r\n  }\r\n\r\n  set answerOptions(answerOptions: string[]) {\r\n    this._answerOptions = answerOptions;\r\n  }\r\n\r\n  /**\r\n   * Ein Attribut, was nicht als Parameter übergeben wird, ist answerOptions. Dieses ist eine\r\n   * String-Liste, dass vorkonfigurierte Antworten enthält\r\n   *\r\n   * Ein weiteres Attribut, was nicht als Parameter übergeben wird, ist answer. Dieses ist eine String-Liste, die\r\n   * die ausgewählten Antwortoptionen als Antwort auf die Frage beinhaltet.\r\n   *\r\n   * @param maxChoices beschreibt die maximale Anzahl an Antworten, die man auf eine Frage geben kann\r\n   * @param questionText ist die Frage, die gestellt werden soll\r\n   * @param id ist die eindeutige Identifikationsnummer des MultipleChoiceQuestions\r\n   * @param fixed entscheidet, ob MultipleChoiceQuestion innerhalb eines Section-Elements eine feste Position hat oder die\r\n   * Position von Studieninstanz zu Studieninstanz mit Hilfe von Randomisierung variiert\r\n   */\r\n  constructor(\r\n    id: number, \r\n    name: string, \r\n    questionText: string, \r\n    displayName: string,\r\n    answerOptions: string[],\r\n    maxChoices: number,\r\n  ) {\r\n    super(id, name, questionText, displayName);\r\n    this.maxChoices = maxChoices;\r\n    this.answerOptions = answerOptions;\r\n    super.answer = [];\r\n  }\r\n}\r\n","import { Component, Injectable, Inject } from '@angular/core';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n\r\nexport interface Message {\r\n    message: string;\r\n}\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ConfirmDialogService {\r\n\r\n    constructor(public dialog: MatDialog) {\r\n    }\r\n\r\n    async openDialog(msg: string): Promise<boolean> {\r\n        let isConfirmed = false;\r\n        const dialogRef = this.dialog.open(DialogTemplate,\r\n            { data: { message: msg } }\r\n        );\r\n        await dialogRef.afterClosed().toPromise().then(result => {\r\n            isConfirmed = result;\r\n        });\r\n        return isConfirmed;\r\n    }\r\n}\r\n\r\n\r\n\r\n@Component({\r\n    selector: 'dialog-template',\r\n    templateUrl: 'dialog-template.html',\r\n})\r\nexport class DialogTemplate {\r\n\r\n    constructor(\r\n        public dialogRef: MatDialogRef<DialogTemplate>, @Inject(MAT_DIALOG_DATA) public data: Message) { }\r\n\r\n    onCancel(): void {\r\n        this.dialogRef.close(false);\r\n    }\r\n\r\n    onConfirm(): void {\r\n        this.dialogRef.close(true);\r\n    }\r\n}\r\n","export default \"<div class=\\\"full-page\\\">\\r\\n    <mat-card class=\\\"login-card\\\">\\r\\n        <mat-card-title style=\\\"text-align: center;\\\">\\r\\n            <img src=\\\"../../assets/images/Icon.png\\\" width=\\\"100\\\"><br><br>\\r\\n            VibroStudies Registrierung\\r\\n        </mat-card-title>\\r\\n        <mat-card-content>\\r\\n            <mat-form-field class=\\\"login-field\\\">\\r\\n                <input matInput placeholder=\\\"Vorname\\\" name=\\\"firstName\\\" [(ngModel)]=\\\"firstName\\\" type=\\\"text\\\"\\r\\n                    (keyup.enter)=\\\"register()\\\" />\\r\\n            </mat-form-field>\\r\\n            <mat-form-field class=\\\"login-field\\\">\\r\\n                <input matInput placeholder=\\\"Nachname\\\" name=\\\"lastName\\\" [(ngModel)]=\\\"lastName\\\" type=\\\"text\\\"\\r\\n                    (keyup.enter)=\\\"register()\\\" />\\r\\n            </mat-form-field>\\r\\n            <mat-form-field class=\\\"login-field\\\">\\r\\n                <input matInput placeholder=\\\"E-Mail\\\" name=\\\"email\\\" [(ngModel)]=\\\"email\\\" type=\\\"email\\\"\\r\\n                    (keyup.enter)=\\\"register()\\\" />\\r\\n            </mat-form-field>\\r\\n            <mat-form-field class=\\\"login-field\\\">\\r\\n                <input matInput placeholder=\\\"Passwort\\\" name=\\\"password\\\" [(ngModel)]=\\\"password\\\" type=\\\"password\\\"\\r\\n                    (keyup.enter)=\\\"register()\\\" />\\r\\n            </mat-form-field>\\r\\n            <mat-form-field class=\\\"login-field\\\">\\r\\n                <input matInput placeholder=\\\"Passwort wiederholen\\\" name=\\\"password\\\" [(ngModel)]=\\\"confirmPassword\\\"\\r\\n                    type=\\\"password\\\" (keyup.enter)=\\\"register()\\\" />\\r\\n            </mat-form-field>\\r\\n        </mat-card-content>\\r\\n        <mat-card-actions>\\r\\n        <div style=\\\"text-align: center\\\">\\r\\n            <button mat-raised-button class=\\\"greenButton\\\" (click)=\\\"register()\\\" type=\\\"submit\\\">\\r\\n                Registrieren\\r\\n            </button>\\r\\n        </div>\\r\\n        </mat-card-actions>\\r\\n        <div style=\\\"text-align: center\\\">\\r\\n            <button mat-flat-button class=\\\"redButton\\\" [routerLink]=\\\"['../login']\\\">Zurück</button>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n</div>\";","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { AuthService } from '@src/app/services/auth/auth.service';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n/**\r\n * Der RoleGuardService ist ein Guard, also für die Navigation der Route innerhalb der Anwendung zuständig.\r\n * Dieser Guard ist für die Identifikation der Rolle des Nutzers zuständig (CREATOR, PARTICIPANT, ADMIN).\r\n * Dazu verwendet es das CanActivate Interface, welches von jedem anderen Guard verwendet wird.\r\n * Nur wenn alle Guards wahr sind, kann auf die gewünschte Ansicht navigiert werden, sonst nicht.\r\n */\r\nexport class RoleGuardService implements CanActivate {\r\n\r\n    /**\r\n     * Konstruktor des RoleGuardService. Darin werden sämtliche Services initialisert,\r\n     * die für den RoleGuardService gebraucht werden.\r\n     * @param authService AuthService Singleton, ist für das Aufrufen des registrierten Nutzers zuständig\r\n     * @param router Router Singleton, zum Routen des Pfads nach Eintritt eines Ereignisses\r\n     */\r\n    constructor(private router: Router, private authService: AuthService) { }\r\n\r\n    /**\r\n     * Die vom Interface zu implementierende Methode, welche den Guard aktiviert oder deaktiviert.\r\n     * @param route ActivatedRouteSnapshot ist der aktuellen Zustand der aktivierten Route \r\n     * @param state RouterSnapshot ist der aktuelle Zustand des Routers\r\n     * @returns Promise<boolean>, je nachdem ob der Nutzer die benötigte Rolle für das Aufrufen der Ansicht besitzt oder nicht.\r\n     */\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot)\r\n    : boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\r\n        if (!this.authService.getUser().permission >= route.data.expectedRole) {\r\n            this.router.navigate([\"login\"], { replaceUrl: true });\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { routes } from \"./dashboard.routes\";\r\n\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class DashboardRoutingModule { }\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2Rhc2hib2FyZC9hdmFpbGFibGUtc3R1ZGllcy9hdmFpbGFibGUtc3R1ZGllcy5jb21wb25lbnQuY3NzIn0= */\";","\r\n/**\r\n * Eine abstrakte Oberklasse für alle Elemente, die eine Studie beinhaltet.\r\n */\r\nexport abstract class AbstractStudyObject {\r\n\r\n  /**\r\n   * Die id ist innerhalb einer Studie ein eindeutiger Identifizierer für Objekte.\r\n   */\r\n  private _id: number;\r\n  get id(): number {\r\n    return this._id;\r\n  }\r\n  set id(id: number) {\r\n    if (id == null) {\r\n      throw new Error(\"Id darf nicht null sein.\");\r\n    }\r\n    this._id = id;\r\n  }\r\n\r\n   /**\r\n   * Der Name eines Objekts ist ein Differenzierungsmerkmal, mit dem einem Objekt eine Bedeutung zugewiesen werden kann.\r\n   */\r\n  private _name: string;\r\n  get name(): string {\r\n    return this._name;\r\n  }\r\n  set name(name: string) {\r\n    this._name = name;\r\n  }\r\n\r\n  private _displayName: string;\r\n  get displayName(): string {\r\n    return this._displayName;\r\n  }\r\n  set displayName(displayName: string) {\r\n    this._displayName = displayName;\r\n  }\r\n\r\n\r\n  /**\r\n   * @param id ist die eindeutige Identifikationsnummer des Studienobjekts\r\n   * @param fixed entscheidet, ob das Studienobjekt innerhalb eines Section-Elements eine feste Position hat oder die\r\n   * Position von Studieninstanz zu Studieninstanz mit Hilfe von Randomisierung variiert\r\n   */\r\n  constructor(id: number, name: string, displayName: string) {\r\n    if (id == null) {\r\n      throw new Error(\"Id darf nicht null sein.\");\r\n    }\r\n    this._id = id;\r\n    this._name = name;\r\n    this._displayName = displayName;\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthService } from '../services/auth/auth.service';\r\nimport { StudyWrapperService } from '../services/study-wrapper/study-wrapper.service';\r\n\r\n@Component({\r\n    selector: 'app-dashboard',\r\n    templateUrl: './dashboard.component.html',\r\n    styleUrls: ['./dashboard.component.css']\r\n})\r\n/**\r\n * Die DashboardComponent enthält die Seitenansicht in der Anwendung.\r\n * Darin sind alle Dienste festgehalten, die invariant zu jeder anderen Sicht (außer der Studienerstellung und -teilnahme) sind.\r\n */\r\nexport class DashboardComponent implements OnInit {\r\n    /**\r\n     * Konstruktor der AvailableStudiesComponent. Darin werden sämtliche Services initialisert,\r\n     * die für die \"Verfügbare Studien\"-Ansicht gebraucht werden.\r\n     * @param authService AuthService Singleton, ist für die Authentifizierung des Nutzers zuständig\r\n     * @param route ActivatedRoute ist die aktivierte Route\r\n     */\r\n    constructor(private studywrapper: StudyWrapperService, public authService: AuthService, public route: ActivatedRoute) { }\r\n\r\n    /**\r\n     * Initialisiert die DashboardComponent.\r\n     */\r\n    async ngOnInit() {\r\n        this.studywrapper.study = undefined;\r\n    }\r\n\r\n    /**\r\n     * Loggt den Nutzer aus der Anwendung aus und navigiert ihn zurück zur Login-Ansicht.\r\n     */\r\n    logout() {\r\n        this.authService.logout();\r\n    }\r\n}\r\n","\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { KeyData } from \"./KeyData\";\r\nimport { ShortDescription } from \"./ShortDescription\";\r\nimport { User } from \"../User/User\";\r\nimport { EMail } from \"../User/EMail\";\r\nimport { AppSettings } from \"@src/app/app-settings\";\r\nimport { UserPermission } from \"../User/UserPermission\";\r\nimport { AuthService } from \"@src/app/services/auth/auth.service\";\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\n/**\r\n * Das KeyDataDAO ist für den Zugriff auf die KeyData Objekte in der Datenbank verantwortlich.\r\n */\r\nexport class KeyDataDao {\r\n    studyURL: string = AppSettings.baseURL + \"Study/\";\r\n    qualiQuestionURL: string = AppSettings.baseURL + \"QualificationQuestion/\";\r\n    userURL: string = AppSettings.baseURL + \"User/\";\r\n\r\n    constructor(private http: HttpClient, private authService: AuthService) { }\r\n\r\n    /**\r\n     * Die Methode gibt asynchron ein KeyData Objekt zurück, welches eindeutig durch die id identifiziert wird.\r\n     * @param userId number ist die ID der KeyData, die aus der Datenbank geholt werden soll\r\n     */\r\n    async getFromUserId(userId: number): Promise<KeyData[]> {\r\n        let keyData: KeyData[] = [];\r\n\r\n        await this.http.post(AppSettings.baseURL + \"MyStudies/\" + userId \r\n        + \"/\", { token: this.authService.getAuthToken() })\r\n        .toPromise()\r\n        .then(studiesResult => {\r\n            for (let element of studiesResult as any) {\r\n                keyData.push(new KeyData(element.id, this.authService.getUser(), element.studyStatus, \r\n                new ShortDescription(element.shortDescription), element.fullDescription, element.isAmplitudeNecessary, element.name));\r\n            }\r\n        });\r\n\r\n        return keyData;\r\n    }\r\n\r\n    /**\r\n     * Liefert alle Studien an denen der Benutzer mit der id userId bereits teilgenommen hat.\r\n     * @param userId number des Users\r\n     */\r\n    async getParticipated(userId: number): Promise<KeyData[]> {\r\n        let result: KeyData[] = [];\r\n\r\n        await this.http.post(AppSettings.baseURL + \"ParticipatedStudies/\" + \r\n        userId + \"/\", { token: this.authService.getAuthToken() })\r\n        .toPromise()\r\n        .then(keyDatas => {\r\n            for (let element of keyDatas as any) {\r\n                result.push(new KeyData(element.id, \r\n                    new User(0, element.author.firstName, element.author.lastName, UserPermission.CREATOR, \r\n                        new EMail(element.author.email)), element.studyStatus, new ShortDescription(element.shortDescription), \r\n                        element.fullDescription, element.isAmplitudeNecessary, element.name));\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Die Methode gibt asynchron eine Liste aller KeyData Objekte zurück, die für einen Benutzer verfügbar sind.\r\n     * @param userId number des Users der die Studien anfordert\r\n     * @param hasAmplitude boolean Info ob der Nutzer eine Amplitudenunterstützung braucht.\r\n     */\r\n    async getAvailableStudies(userId: number, hasAmplitude: boolean): Promise<KeyData[]> {\r\n        let result = [];\r\n        await this.http.post(AppSettings.baseURL + \"AvailableStudies/?userId=\" + userId + \r\n        \"&hasAmplitude=\" + hasAmplitude, { token: this.authService.getAuthToken() }).toPromise().then(availableResult => {\r\n            for (let study of availableResult as any) {\r\n                result.push(new KeyData(study.id, \r\n                    new User(0, study.author.firstName, study.author.lastName, UserPermission.CREATOR, \r\n                        new EMail(study.author.email)), study.studyStatus, study.shortDescription, study.fullDescription, study.amplitudeNecessary, study.name));\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Die Methode aktualisiert den Status einer Studie\r\n     * @param id number ist die Id der Studie deren Status aktualisiert wird\r\n     * @param state number ist der Status auf den aktualisiert wird\r\n     */\r\n    async updateStudyState(id: number, state: number): Promise<boolean> {\r\n        let result = false;\r\n        await this.http.post(AppSettings.baseURL + \"UpdateStudyState/\" + id + \r\n        \"/\", { token: this.authService.getAuthToken(), state: state }).toPromise().then(response => {\r\n            if (response) {\r\n                result = true;\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Löscht das KeyData Objekt object aus der Datenbank.\r\n     * @param id number sind die Schlüsselinformationen, die gelöscht werden sollen\r\n     */\r\n    async delete(id: number): Promise<boolean> {\r\n        let success = false;\r\n        await this.http.post(AppSettings.baseURL + \"DeleteStudy/\" + id \r\n        + \"/\", { token: this.authService.getAuthToken(), id: id }).toPromise().then(result => {\r\n            if (result) {\r\n                success = true;\r\n            }\r\n        });\r\n        return success;\r\n    }\r\n}\r\n","import { Routes } from '@angular/router';\r\nimport { DashboardComponent } from './dashboard/dashboard.component';\r\nimport { AuthGuardService } from './guards/auth/auth-guard.service';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { StudyCreationComponent } from './studycreation/studycreation.component';\r\n\r\nexport const routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: '/login',\r\n    pathMatch: 'full',\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginComponent,\r\n  },\r\n  {\r\n    path: \"register\",\r\n    component: RegisterComponent,\r\n  },\r\n  {\r\n    path: \"dashboard\",\r\n    component: DashboardComponent,\r\n    canActivate: [AuthGuardService],\r\n    loadChildren: () => import(\"@src/app/dashboard/dashboard.module\").then(m => m.DashboardModule)\r\n  },\r\n  {\r\n    path: \"studycreation\",\r\n    component: StudyCreationComponent,\r\n    canActivate: [AuthGuardService],\r\n    loadChildren: () => import(\"@src/app/studycreation/studycreation.module\").then(m => m.StudycreationModule)\r\n  },\r\n\r\n];\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AppSettingsService } from './services/app-settings/app-settings.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n  constructor(private appSettingsService: AppSettingsService) {\r\n\r\n  }\r\n  \r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DashboardRoutingModule } from '@src/app/dashboard/dashboard-routing.module';\r\nimport { MaterialModule } from '@src/material.module';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MyStudiesComponent } from '@src/app/dashboard/my-studies/my-studies.component';\r\nimport { AvailableStudiesComponent } from '@src/app/dashboard/available-studies/available-studies.component';\r\nimport { ParticipatedStudiesComponent } from '@src/app/dashboard/participated-studies/participated-studies.component';\r\nimport { ProfileComponent } from './profile/profile.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ProfileComponent, \r\n    MyStudiesComponent, \r\n    AvailableStudiesComponent, \r\n    ParticipatedStudiesComponent],\r\n  imports: [\r\n    CommonModule,\r\n    DashboardRoutingModule,\r\n    MaterialModule,\r\n    FormsModule\r\n  ]\r\n})\r\nexport class DashboardModule { }\r\n","export enum RandomizingStrategies {\r\n    NONE, STANDARD\r\n}\r\n","import { AbstractQuestion } from \"./AbstractQuestion\";\r\n\r\n/**\r\n * Ein LinearScaleQuestion ist ein Fragenobjekt, das eine lineare Skala darstellt.\r\n * Auf der Skala können nur natürliche Zahlen angezeigt werden.\r\n * Es kann nur ein Wert auf der Skala als Antwort ausgewählt werden.\r\n */\r\nexport class LinearScaleQuestion extends AbstractQuestion {\r\n  objectType = \"LinearScaleQuestion\";\r\n\r\n  private _numberOfChoices: number;\r\n  get numberOfChoices(): number {\r\n    return this._numberOfChoices;\r\n  }\r\n  set numberOfChoices(numberOfChoices: number) {\r\n    if (numberOfChoices == null) {\r\n      throw new Error(\"NumberOfChoices darf nicht null sein.\");\r\n    }\r\n    if (numberOfChoices < 2) {\r\n      throw new Error(\"NumberOfChoices muss mindestens 2 sein.\");\r\n    }\r\n    this._numberOfChoices = numberOfChoices;\r\n  }\r\n\r\n\r\n  private _leftLabel: string;\r\n  get leftLabel(): string {\r\n    return this._leftLabel;\r\n  }\r\n  set leftLabel(leftLabel: string) {\r\n    this._leftLabel = leftLabel;\r\n  }\r\n\r\n\r\n  private _rightLabel: string;\r\n  get rightLabel(): string {\r\n    return this._rightLabel;\r\n  }\r\n  set rightLabel(rightLabel: string) {\r\n    this._rightLabel = rightLabel;\r\n  }\r\n\r\n  /**\r\n   * Ein Attribut, was nicht als Parameter übergeben wird, ist answer. Dieses bezeichnet die Wahl\r\n   * auf der Skala als Antwort auf die Frage vom Typ number.\r\n   *\r\n   * @param numberOfChoices bezeichnet das Zahlenintervall, beginnend bei 1 und endet bei numberOfChoices\r\n   * @param leftLabel ist eine Bezeichnung für den Anfang der Skala, z.B. gut\r\n   * @param rightLabel ist eine Bezeichnung für das Ende der Skala, z.B. schlecht\r\n   * @param questionText ist die Frage, die gestellt werden soll\r\n   * @param id ist die eindeutige Identifikationsnummer des LinearScaleQuestions\r\n   * @param fixed entscheidet, ob LinearScaleQuestion innerhalb eines Section-Elements eine feste Position hat oder die\r\n   * Position von Studieninstanz zu Studieninstanz mit Hilfe von Randomisierung variiert\r\n   */\r\n  constructor(\r\n    id: number, \r\n    name: string, \r\n    questionText: string, \r\n    displayName: string,\r\n    numberOfChoices: number,\r\n    leftLabel: string,\r\n    rightLabel: string) {\r\n    super(id, name, questionText, displayName);\r\n    this._numberOfChoices = numberOfChoices;\r\n    this._leftLabel = leftLabel;\r\n    this._rightLabel = rightLabel;\r\n    super.answer = -1;\r\n  }\r\n}\r\n","import { StudyPrototype } from \"./StudyPrototype\";\r\nimport { ReferenceTuple } from \"./ReferenceTuple\";\r\nimport { Types } from \"./Types\";\r\nimport { Section } from \"./StudyObjects/Section\";\r\nimport { AbstractQuestion } from \"./StudyObjects/Questions/AbstractQuestion\";\r\nimport { VibrationPattern } from \"./StudyObjects/VibrationPattern\";\r\nimport { TextBlock } from \"./StudyObjects/TextBlock\";\r\nimport { SectionElement } from \"./StudyObjects/SectionElement\";\r\n\r\n/**\r\n * Der ReferenceTupleMembershipVerifier kann innerhalb einer Studie festellen, welchen\r\n * Typ ein ReferenceTuple hat und das Objekt zurückgeben, welches auf das ReferenceTuple zeigt.\r\n */\r\nexport class ReferenceTupleMembershipVerifier {\r\n    /**\r\n     * Studie auf die sich die ReferenceTuple beziehen, mit denen der Verifier arbeitet.\r\n     */\r\n    private _studyPrototype: StudyPrototype;\r\n    get studyPrototype(): StudyPrototype {\r\n        return this._studyPrototype;\r\n    }\r\n    set studyPrototype(studyPrototype: StudyPrototype) {\r\n        this._studyPrototype = studyPrototype;\r\n    }\r\n\r\n    constructor(studyPrototype: StudyPrototype) {\r\n        this._studyPrototype = studyPrototype;\r\n    }\r\n\r\n    /**\r\n     * Gibt zu ref den Typ des Objekts an, zu dem die ID in ref gehört.\r\n     * @param ref ReferenceTuple ist das Referenztupel zu dem der Typ ermittelt werden soll\r\n     */\r\n    getType(ref: ReferenceTuple): Types {\r\n        let search = this.searchForId(this.studyPrototype.sections, ref); // TODO: entcopypasten\r\n        if (search[1]) {\r\n            return this.assignType(search[0]);\r\n        }\r\n        search = this.searchForId(this.studyPrototype.answeredQuestion, ref);\r\n        if (search[1]) {\r\n            return this.assignType(search[0]);\r\n        }\r\n\r\n        search = this.searchForId(this.studyPrototype.sectionElements, ref);\r\n        if (search[1]) {\r\n            return this.assignType(search[0]);\r\n        }\r\n\r\n        search = this.searchForId(this.studyPrototype.studyObjects, ref);\r\n        if (search[1]) {\r\n            return this.assignType(search[0]);\r\n        }\r\n        throw new Error(\"Element mit der angegebenen ID befindet sich in keiner Liste.\");\r\n    }\r\n\r\n    /**\r\n     * Gibt zu ref das Objekt zurück, zu dem die ID in ref gehört.\r\n     * @param ref ReferenceTuple ist das Referenztupel welches gedowncastet wird\r\n     */\r\n    getObject(ref: ReferenceTuple): any {\r\n        let search = this.searchForId(this.studyPrototype.sections, ref); // TODO: entcopypasten\r\n        if (search[1]) {\r\n            return search[0];\r\n        }\r\n\r\n        search = this.searchForId(this.studyPrototype.answeredQuestion, ref);\r\n        if (search[1]) {\r\n            return search[0];\r\n        }\r\n\r\n        search = this.searchForId(this.studyPrototype.sectionElements, ref);\r\n        if (search[1]) {\r\n            return search[0];\r\n        }\r\n\r\n        search = this.searchForId(this.studyPrototype.studyObjects, ref);\r\n        if (search[1]) {\r\n            return search[0];\r\n        }\r\n        throw new Error(\"Element mit der angegebenen ID befindet sich in keiner Liste.\");\r\n    }\r\n\r\n    private searchForId(list: any[], ref: ReferenceTuple): [any, boolean] {\r\n        if (list == null) {\r\n            return [null, false];\r\n        }\r\n        for (let i = 0; i < list.length; i = i + 1) {\r\n            if (list[i].id === ref.ID) {\r\n                return [list[i], true];\r\n            }\r\n        }\r\n        return [null, false];\r\n    }\r\n\r\n    private assignType(element: any): Types {\r\n        switch (true) {\r\n            case element instanceof SectionElement: {\r\n                return Types.SECTIONELEMENT;\r\n            }\r\n            case element instanceof AbstractQuestion: {\r\n                return Types.QUESTION;\r\n            }\r\n            case element instanceof TextBlock: {\r\n                return Types.TEXT;\r\n            }\r\n            case element instanceof Section: {\r\n                return Types.SECTION;\r\n            }\r\n            case element instanceof VibrationPattern: {\r\n                return Types.VIBRATIONPATTERN;\r\n            }\r\n            default: {\r\n                throw new Error(\"Kein passender Typ gefunden.\");\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n","export default \"mat-sidenav-container {\\r\\n    height: 94vh;\\r\\n  }\\r\\n  \\r\\n  mat-sidenav-content {\\r\\n    padding: 15px;\\r\\n  }\\r\\n  \\r\\n  mat-sidenav {\\r\\n    width: 250px;\\r\\n  }\\r\\n  \\r\\n  mat-toolbar {\\r\\n    height: 6vh;\\r\\n  }\\r\\n  \\r\\n  .bottomrow {\\r\\n  position: absolute;\\r\\n  bottom: 0;\\r\\n  left: 0;\\r\\n  width: 100%;\\r\\n}\\r\\n  \\r\\n  .flexExpand {\\r\\n  flex: 1 1 auto;\\r\\n}\\r\\n  \\r\\n  .helpButton {\\r\\n  background-color: #3e753b;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGFzaGJvYXJkL2Rhc2hib2FyZC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksWUFBWTtFQUNkOztFQUVBO0lBQ0UsYUFBYTtFQUNmOztFQUVBO0lBQ0UsWUFBWTtFQUNkOztFQUVBO0lBQ0UsV0FBVztFQUNiOztFQUVGO0VBQ0Usa0JBQWtCO0VBQ2xCLFNBQVM7RUFDVCxPQUFPO0VBQ1AsV0FBVztBQUNiOztFQUVBO0VBQ0UsY0FBYztBQUNoQjs7RUFFQTtFQUNFLHlCQUF5QjtBQUMzQiIsImZpbGUiOiJzcmMvYXBwL2Rhc2hib2FyZC9kYXNoYm9hcmQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIm1hdC1zaWRlbmF2LWNvbnRhaW5lciB7XHJcbiAgICBoZWlnaHQ6IDk0dmg7XHJcbiAgfVxyXG4gIFxyXG4gIG1hdC1zaWRlbmF2LWNvbnRlbnQge1xyXG4gICAgcGFkZGluZzogMTVweDtcclxuICB9XHJcbiAgXHJcbiAgbWF0LXNpZGVuYXYge1xyXG4gICAgd2lkdGg6IDI1MHB4O1xyXG4gIH1cclxuICBcclxuICBtYXQtdG9vbGJhciB7XHJcbiAgICBoZWlnaHQ6IDZ2aDtcclxuICB9XHJcbiAgXHJcbi5ib3R0b21yb3cge1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBib3R0b206IDA7XHJcbiAgbGVmdDogMDtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuLmZsZXhFeHBhbmQge1xyXG4gIGZsZXg6IDEgMSBhdXRvO1xyXG59XHJcblxyXG4uaGVscEJ1dHRvbiB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogIzNlNzUzYjtcclxufSJdfQ== */\";","export default \"<router-outlet></router-outlet>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2Rhc2hib2FyZC9wYXJ0aWNpcGF0ZWQtc3R1ZGllcy9wYXJ0aWNpcGF0ZWQtc3R1ZGllcy5jb21wb25lbnQuY3NzIn0= */\";","import { Routes } from \"@angular/router\";\r\nimport { AuthGuardService } from \"../guards/auth/auth-guard.service\";\r\nimport { RoleGuardService } from \"../guards/role/role-guard.service\";\r\nimport { UserPermission } from \"../Model/User/UserPermission\";\r\nimport { AvailableStudiesComponent } from \"./available-studies/available-studies.component\";\r\nimport { MyStudiesComponent } from \"./my-studies/my-studies.component\";\r\nimport { ParticipatedStudiesComponent } from \"./participated-studies/participated-studies.component\";\r\nimport { ProfileComponent } from \"./profile/profile.component\";\r\n\r\nexport const routes: Routes = [\r\n    {\r\n        path: \"\",\r\n        redirectTo: \"my-studies\",\r\n        pathMatch: \"full\"\r\n    },\r\n    {\r\n        path: \"profile\",\r\n        component: ProfileComponent,\r\n        canActivate: [AuthGuardService],\r\n    },\r\n    {\r\n        path: \"my-studies\",\r\n        component: MyStudiesComponent,\r\n        canActivate: [RoleGuardService, AuthGuardService],\r\n        data: {\r\n            expectedRole: UserPermission.CREATOR,\r\n        }\r\n    },\r\n    {\r\n        path: \"available-studies\",\r\n        component: AvailableStudiesComponent,\r\n        canActivate: [AuthGuardService],\r\n    },\r\n    {\r\n        path: \"participated-studies\",\r\n        component: ParticipatedStudiesComponent,\r\n        canActivate: [AuthGuardService],\r\n    }\r\n];\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { AppRoutingModule } from '@src/app/app-routing.module';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { LoginComponent } from '@src/app/login/login.component';\r\nimport { MaterialModule } from '@src/material.module';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RegisterComponent } from '@src/app/register/register.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { DashboardComponent } from '@src/app/dashboard/dashboard.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { DashboardModule } from '@src/app/dashboard/dashboard.module';\r\nimport { StudyCreationComponent } from '@src/app/studycreation/studycreation.component';\r\nimport { AppComponent } from './app.component';\r\nimport { DialogTemplate } from '@src/app/services/dialogs/confirmDialog.service';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    DashboardComponent,\r\n    StudyCreationComponent,\r\n    DialogTemplate,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    MaterialModule,\r\n    FormsModule,\r\n    RouterModule,\r\n    HttpClientModule,\r\n    DashboardModule,\r\n    MatDialogModule,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent],\r\n  entryComponents: [\r\n    DialogTemplate\r\n  ]\r\n})\r\nexport class AppModule { }\r\n","export default \"<mat-card>\\r\\n    <mat-card-title class=\\\"header\\\">\\r\\n        Accountdaten\\r\\n    </mat-card-title><br>\\r\\n    <mat-divider></mat-divider><br><br>\\r\\n    <mat-card-content>\\r\\n        <mat-form-field class=\\\"login-field\\\">\\r\\n            <input matInput placeholder=\\\"Vorname\\\" name=\\\"firstName\\\" [(ngModel)]=\\\"this.user.firstName\\\" type=\\\"text\\\" />\\r\\n        </mat-form-field>\\r\\n        <mat-form-field class=\\\"login-field\\\">\\r\\n            <input matInput placeholder=\\\"Nachname\\\" name=\\\"lastName\\\" [(ngModel)]=\\\"this.user.lastName\\\" type=\\\"text\\\" />\\r\\n        </mat-form-field>\\r\\n        <mat-form-field class=\\\"login-field\\\">\\r\\n            <input matInput placeholder=\\\"E-Mail\\\" name=\\\"email\\\" [(ngModel)]=\\\"this.user.email.email\\\" type=\\\"email\\\" />\\r\\n        </mat-form-field>\\r\\n        <mat-form-field class=\\\"login-field\\\">\\r\\n            <input matInput placeholder=\\\"Vorheriges Passwort\\\" name=\\\"oldPassword\\\" [(ngModel)]=\\\"this.oldPassword\\\" type=\\\"password\\\" />\\r\\n        </mat-form-field>\\r\\n    </mat-card-content>\\r\\n    <button mat-flat-button class=\\\"greenButton\\\" (click)=\\\"saveUser()\\\">Speichern</button>\\r\\n</mat-card>\\r\\n<br>\\r\\n<mat-card>\\r\\n    <mat-card-title class=\\\"header\\\">\\r\\n        Passwort ändern\\r\\n    </mat-card-title><br>\\r\\n    <mat-divider></mat-divider><br><br>\\r\\n    <mat-card-content>\\r\\n        <mat-form-field class=\\\"login-field\\\">\\r\\n            <input matInput placeholder=\\\"Vorheriges Passwort\\\" name=\\\"oldPassword\\\" [(ngModel)]=\\\"this.oldPassword\\\" type=\\\"password\\\" />\\r\\n        </mat-form-field>\\r\\n        <mat-form-field class=\\\"login-field\\\">\\r\\n            <input matInput placeholder=\\\"Neues Passwort\\\" name=\\\"newPassword\\\" [(ngModel)]=\\\"this.newPassword\\\" type=\\\"password\\\" />\\r\\n        </mat-form-field>\\r\\n        <mat-form-field class=\\\"login-field\\\">\\r\\n            <input matInput placeholder=\\\"Neues Passwort erneut eingeben\\\" name=\\\"newPasswordRepeat\\\" [(ngModel)]=\\\"this.newPasswordRepeat\\\" type=\\\"password\\\" />\\r\\n        </mat-form-field>\\r\\n    </mat-card-content>\\r\\n    <button mat-flat-button class=\\\"greenButton\\\" (click)=\\\"savePassword()\\\">Speichern</button>\\r\\n</mat-card>\\r\\n<br>\\r\\n<!--<mat-card>\\r\\n    <mat-card-title>\\r\\n        Accountrechte\\r\\n    </mat-card-title><br>\\r\\n    <mat-divider></mat-divider><br><br>\\r\\n    <mat-card-content>\\r\\n\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n<br>-->\\r\\n<mat-card>\\r\\n    <mat-card-title class=\\\"header\\\">\\r\\n        Account löschen\\r\\n    </mat-card-title><br>\\r\\n    <mat-divider></mat-divider><br><br>\\r\\n    <mat-card-content>\\r\\n        <button mat-flat-button class=\\\"redButton\\\" (click)=\\\"deleteUser()\\\">Endgültig löschen</button>\\r\\n    </mat-card-content>\\r\\n</mat-card>\";","export default \"<p>participated-studies works!</p>\\r\\n\";","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { AuthService } from '@src/app/services/auth/auth.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n/**\r\n * Der AuthGuardService ist ein Guard, also für die Navigation der Route innerhalb der Anwendung zuständig.\r\n * Dieser Guard ist für die Authentifizierung des Nutzers zuständig.\r\n * Dazu verwendet es das CanActivate Interface, welches von jedem anderen Guard verwendet wird.\r\n * Nur wenn alle Guards wahr sind, kann auf die gewünschte Ansicht navigiert werden, sonst nicht.\r\n */\r\nexport class AuthGuardService implements CanActivate {\r\n\r\n    /**\r\n     * Konstruktor des AuthGuardService. Darin werden sämtliche Services initialisert,\r\n     * die für den AuthGuardService gebraucht werden.\r\n     * @param authService AuthService Singleton, ist für die Authentifizierung des Nutzers zuständig\r\n     * @param router Router Singleton, zum Routen des Pfads nach Eintritt eines Ereignisses\r\n     */\r\n    constructor(private authService: AuthService, private router: Router) { }\r\n    \r\n    /**\r\n     * Die vom Interface zu implementierende Methode, welche den Guard aktiviert oder deaktiviert.\r\n     * @param route ActivatedRouteSnapshot ist der aktuellen Zustand der aktivierten Route \r\n     * @param state RouterSnapshot ist der aktuelle Zustand des Routers\r\n     * @returns Promise<boolean>, je nachdem ob der Nutzer authentifizierbar ist oder nicht\r\n     */\r\n    async canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\r\n        let isAuthenticated = false;\r\n        await this.authService.isAuthenticated().then(result => isAuthenticated = result);\r\n        if (!isAuthenticated) {\r\n            this.router.navigate([\"login\"], { replaceUrl: true });\r\n            this.authService.clear();\r\n            return isAuthenticated;\r\n        } else {\r\n            return isAuthenticated;\r\n        }\r\n    }\r\n}\r\n","export default \"<p>available-studies works!</p>\\r\\n\";","import { IPrototype } from \"../GenericIPrototype\";\r\nimport { Section } from \"./StudyObjects/Section\";\r\nimport { SectionElement } from \"./StudyObjects/SectionElement\";\r\nimport { AbstractStudyObject } from \"./StudyObjects/AbstractStudyObject\";\r\nimport { MetaData } from \"./MetaData\";\r\nimport { AbstractQuestion } from \"./StudyObjects/Questions/AbstractQuestion\";\r\nimport { ReferenceTuple } from \"./ReferenceTuple\";\r\nimport { RandomizingStrategies } from \"../Randomizing/RandomizingStrategies\";\r\nimport { KeyData } from \"./KeyData\";\r\nimport * as _ from \"lodash\";\r\n\r\n/**\r\n * Die Klasse public class StudyPrototype ist ein Template für die Instanz einer Studie,\r\n *  in der gleichzeitig das Ergebnis nach Ausführung der Studie durch einen User gespeichert wird.\r\n */\r\nexport class StudyPrototype implements IPrototype<StudyPrototype> {\r\n\r\n    /**\r\n     * In diesem Attribut sind alle wichtigen Schlüsselinformationen zu einer Studie enthalten.\r\n     */\r\n    private _keyData: KeyData;\r\n    get keyData(): KeyData {\r\n        return this._keyData;\r\n    }\r\n    set keyData(keyData: KeyData) {\r\n        this._keyData = keyData;\r\n    }\r\n\r\n    /**\r\n     * In diesem Attribut werden die Metadaten des Endgerätes als JSON gespeichert.\r\n     */\r\n    private _metaDataOfDevice: MetaData;\r\n    get metaDataOfDevice(): MetaData {\r\n        return this._metaDataOfDevice;\r\n    }\r\n    set metaDataOfDevice(metaDataOfDevice: MetaData) {\r\n        if (!metaDataOfDevice) {\r\n            throw new Error(\"Parameter darf nicht null sein!\");\r\n        }\r\n        this._metaDataOfDevice = metaDataOfDevice;\r\n    }\r\n\r\n    /**\r\n     * Diese Liste repräsentiert die Reihenfolge in der Sections in der Studienausführung drankommen.\r\n     */\r\n    private _refSections: ReferenceTuple[] = [];\r\n    get refSections(): ReferenceTuple[] {\r\n        return this._refSections;\r\n    }\r\n    set refSections(refSections: ReferenceTuple[]) {\r\n        if (refSections == null) {\r\n            throw new Error(\"RefSections darf nicht null sein!\");\r\n        }\r\n        this._refSections = refSections;\r\n    }\r\n\r\n    /**\r\n     * Enthält alle Sections der Studie.\r\n     */\r\n    private _sections: Section[] = [];\r\n    get sections(): Section[] {\r\n        return this._sections;\r\n    }\r\n    set sections(sections: Section[]) {\r\n        if (!sections) {\r\n            throw new Error(\"Sections darf nicht null sein!\");\r\n        }\r\n        this._sections = sections;\r\n    }\r\n\r\n    /**\r\n     * In dieser Liste werden alle Section Elemente einer Studie gespeichert.\r\n     */\r\n    _sectionElements: SectionElement[] = [];\r\n    get sectionElements(): SectionElement[] {\r\n        return this._sectionElements;\r\n    }\r\n    set sectionElements(sectionElements: SectionElement[]) {\r\n        if (sectionElements == null) {\r\n            throw new Error(\"SectionElements darf nicht null sein!\");\r\n        }\r\n        this._sectionElements = sectionElements;\r\n    }\r\n\r\n    /**\r\n     * In dieser Liste werden bereits erstellte Study Objects einer Studie gepeichert.\r\n     */\r\n    _studyObjects: AbstractStudyObject[] = [];\r\n    get studyObjects(): AbstractStudyObject[] {\r\n        return this._studyObjects;\r\n    }\r\n    set studyObjects(studyObjects: AbstractStudyObject[]) {\r\n        if (studyObjects == null) {\r\n            throw new Error(\"StudyObjects darf nicht null sein!\");\r\n        }\r\n        this._studyObjects = studyObjects;\r\n    }\r\n\r\n    private _answeredQuestion: AbstractQuestion[] = []; // in der Reihenfolge, in der sie bearbeitet wurden\r\n    get answeredQuestion(): AbstractQuestion[] {\r\n        return this._answeredQuestion;\r\n    }\r\n\r\n    /**\r\n     * Enthält die Randomisierungsstrategie welche auf die Liste refSections angewendet wird.\r\n     */\r\n    private _randomStrategy: RandomizingStrategies;\r\n    get randomStrategy(): RandomizingStrategies {\r\n        return this._randomStrategy;\r\n    }\r\n    set randomStrategy(randomStrategy: RandomizingStrategies) {\r\n        this._randomStrategy = randomStrategy;\r\n    }\r\n\r\n    /**\r\n     * Erzeugt einen neuen StudyPrototype\r\n     *\r\n     * @param metaDataOfDevice;\r\n     * @param sections;\r\n     * @param randomStrategy;\r\n     */\r\n    constructor(keyData: KeyData) {\r\n        this._keyData = keyData; \r\n    }\r\n\r\n    /**\r\n     * Erzeugt ein neues Objekt vom Typ StudyPrototype mit den selben Werten wie das aktuelle\r\n     */\r\n    clone(): StudyPrototype {\r\n        return _.cloneDeep(this);\r\n    }\r\n\r\n    addAnsweredQuestion(answer: AbstractQuestion): void {\r\n        this._answeredQuestion.push(answer);\r\n    }\r\n}\r\n","import { ResultTuple } from \"@src/app/Model/Study/Result/ResultTuple\";\r\nimport { User } from \"../../User/User\";\r\nimport { MetaData } from \"../MetaData\";\r\nimport { AbstractQuestion } from \"../StudyObjects/Questions/AbstractQuestion\";\r\n\r\n/**\r\n * Die Klasse enthält die Ausführung einer Studie zu einem Nutzer.\r\n */\r\nexport class UserResultTuple {\r\n    /**\r\n     * Der User der die Studie ausgeführt hat.\r\n     */\r\n    private _user: User;\r\n    get user(): User {\r\n        return this._user;\r\n    }\r\n    set user(user: User) {\r\n        this._user = user;\r\n    }\r\n\r\n    /**\r\n     * Die Fragen und Antworten die gegeben wurden, in der Reihenfolge in der der User die Fragen erhalten hat.\r\n     */\r\n    private _results: AbstractQuestion[];\r\n    get results(): AbstractQuestion[] {\r\n        return this._results;\r\n    }\r\n    set results(results: AbstractQuestion[]) {\r\n        this._results = results;\r\n    }\r\n\r\n    /**\r\n     * Referenzen auf die Fragen mit der orginalen Id aus der Study\r\n     */\r\n    answeredQuestions: ResultTuple[] = [];\r\n\r\n    /**\r\n     * Die MetaDaten die bei der Durchführung der Studie entstanden sind, sowie Daten über das Gerät, auf dem die Studie ausgeführt wurde.\r\n     */\r\n    private _metaData: MetaData;\r\n    get metaData(): MetaData {\r\n        return this._metaData;\r\n    }\r\n    set metaData(metaData: MetaData) {\r\n        this._metaData = metaData;\r\n    }\r\n\r\n    constructor(user: User, results: AbstractQuestion[], metaData: MetaData) {\r\n        this._user = user;\r\n        this._results = results;\r\n        this._metaData = metaData;\r\n    }\r\n}\r\n","export default \"<div class=\\\"full-page\\\">\\r\\n  <mat-card class=\\\"login-card\\\">\\r\\n    <mat-card-title style=\\\"text-align: center;\\\">\\r\\n      <img src=\\\"../../assets/images/Icon.png\\\" width=\\\"100\\\"><br><br>\\r\\n      VibroStudies Login\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n      <mat-form-field class=\\\"login-field\\\">\\r\\n        <input matInput placeholder=\\\"E-Mail\\\" name=\\\"email\\\" [(ngModel)]=\\\"email\\\" type=\\\"email\\\" (keyup.enter)=\\\"login()\\\" />\\r\\n      </mat-form-field>\\r\\n      <mat-form-field class=\\\"login-field\\\">\\r\\n        <input matInput placeholder=\\\"Passwort\\\" name=\\\"password\\\" [(ngModel)]=\\\"password\\\" type=\\\"password\\\"\\r\\n          (keyup.enter)=\\\"login()\\\" />\\r\\n      </mat-form-field>\\r\\n    </mat-card-content>\\r\\n    <mat-card-actions>\\r\\n    <div style=\\\"text-align: center\\\">\\r\\n      <button mat-raised-button class=\\\"greenButton\\\" (click)=\\\"login()\\\" type=\\\"submit\\\">\\r\\n        Login\\r\\n      </button>\\r\\n       </div>\\r\\n    </mat-card-actions>\\r\\n    <mat-divider></mat-divider><br>\\r\\n    <div style=\\\"text-align: center\\\">\\r\\n      <h3>Neu hier?</h3>\\r\\n      <button mat-flat-button class=\\\"redButton\\\" (click)=\\\"toRegister()\\\">Jetzt Registrieren</button>\\r\\n    </div>\\r\\n  </mat-card>\\r\\n</div>\";","export enum StudyStatus {\r\n    /**\r\n     * Die Studie wurde erstellt und ist noch in Bearbeitung also nicht veröffentlicht\r\n     */\r\n    CREATED,\r\n\r\n    /**\r\n     * Die Studie wurde veröffentlicht und Studienteilnehmer können an der Studie teilnehmen\r\n     */\r\n    PUBLISHED,\r\n\r\n    /**\r\n     * Es ist nicht mehr möglich an der Studie teilzunehmen.\r\n     * Der Studienleiter kann nun die Ergebnisse auswerten\r\n     */\r\n    FINISHED\r\n}\r\n","import { AbstractVibrationPatternElement } from \"./AbstractVibrationPatternElement\";\r\n\r\nexport class PauseElement extends AbstractVibrationPatternElement {\r\n  constructor(duration: number) {\r\n    super(duration);\r\n  }\r\n}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { StudyPrototypeDAO } from '../Model/Study/StudyPrototypeDAO.service';\r\nimport { StudyWrapperService } from '../services/study-wrapper/study-wrapper.service';\r\n\r\n@Component({\r\n    selector: 'app-studycreation',\r\n    templateUrl: './studycreation.component.html',\r\n    styleUrls: ['./studycreation.component.css']\r\n})\r\nexport class StudyCreationComponent implements OnInit, OnDestroy {\r\n    saving: boolean = false;\r\n\r\n    savingInterval;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        public studywrapper: StudyWrapperService,\r\n        private studyService: StudyPrototypeDAO,\r\n    ) { }\r\n\r\n    ngOnDestroy() {\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (!this.studywrapper.study) {\r\n            this.router.navigate([\"dashboard\"]);\r\n        } else {\r\n            this.savingInterval = setInterval(() => {\r\n                if (this.studywrapper.study) {\r\n                    this.save();\r\n                } else {\r\n                    clearInterval(this.savingInterval);\r\n                }\r\n            }, 10000);\r\n        }\r\n    }\r\n\r\n    async save() {\r\n        if (!this.saving) {\r\n            this.saving = true;\r\n            await this.studyService.save(this.studywrapper.study).then(result => {\r\n                if (result) {\r\n                    setTimeout(() => {\r\n                        this.saving = false;\r\n                    }, 1000);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n","import { AbstractStudyObject } from \"./AbstractStudyObject\";\r\n\r\n/**\r\n * Ein AbstractVibrationPatternElement ist ein abstraktes Element, aus dem Vibrationen\r\n * erstellt werden können. Die Klasse spezialisiert sich in Pause und VibrationElemente.\r\n */\r\nexport abstract class AbstractVibrationPatternElement {\r\n\r\n  /**\r\n   * Duration gibt an wie lange in Millisekunden der Effekt der ausgeführt wird.\r\n   */\r\n  private _duration: number;\r\n  get duration(): number {\r\n    return this._duration;\r\n  }\r\n  // 2^64 weil long. Long weil es gecastet werden muss\r\n  set duration(duration: number) {\r\n    this.ensure64BitNumber(duration);\r\n    this._duration = duration;\r\n  }\r\n\r\n  /**\r\n   * Dieser Konstruktor prüft, bevor es ein AbstractVibrationPatternElement erstellt, den Paramter duration, da\r\n   * dieser nur Werte zwischen 0 und 2^(64) - 1 annehmen darf.\r\n   * @param duration beschreibt die Dauer in ms\r\n   */\r\n  constructor(duration: number) {\r\n    this.duration = duration;\r\n  }\r\n\r\n  private ensure64BitNumber(duration: number): void {\r\n    if (duration == null) {\r\n      throw new Error(\"Duration darf nicht null sein.\");\r\n    }\r\n    if (!(duration >= 0 && duration < Math.pow(2, 64))) {\r\n      throw new Error(\"Es sind nur positive long Werte, also Werte zwischen 0 und 2^(64) - 1, akzeptiert.\");\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AlertService {\r\n\r\n    constructor(private snackBar: MatSnackBar) { }\r\n\r\n    async alert(message: string): Promise<boolean> {\r\n        let result = false;\r\n        await this.snackBar.open(message, \"Ok\", {panelClass: \"snackbar-style\"}).afterDismissed().toPromise().then(response => {\r\n            if (response.dismissedByAction) {\r\n                result = true;\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n}\r\n","import { AbstractQuestion } from \"./AbstractQuestion\";\r\n\r\n/**\r\n * Ein DateQuestion stellt ein Fragenobjekt dar, bei dem man nur ein Kalenderdatum vom Typ\r\n * Date als Antwort angeben kann.\r\n */\r\nexport class DateQuestion extends AbstractQuestion {\r\n    objectType = \"DateQuestion\";\r\n\r\n    private _start: Date;\r\n    get start(): Date {\r\n        return this._start;\r\n    }\r\n    set start(start: Date) {\r\n        this._start = start;\r\n    }\r\n\r\n    private _end: Date;\r\n    get end(): Date {\r\n        return this._end;\r\n    }\r\n    set end(end: Date) {\r\n        this._end = end;\r\n    }\r\n\r\n    /**\r\n     * Ein Attribut, was nicht als Parameter übergeben wird, ist answer. Dieses bezeichnet die Antwort,\r\n     * die auf die Frage gegeben wird. Die Antwort stellt ein Datum vom Typ Date dar.\r\n     *\r\n     * @param questionText ist die Frage, die gestellt werden soll\r\n     * @param id ist die eindeutige Identifikationsnummer des DateQuestions\r\n     * @param fixed entscheidet, ob DateQuestion innerhalb eines Section-Elements eine feste Position hat oder die\r\n     * Position von Studieninstanz zu Studieninstanz mit Hilfe von Randomisierung variiert\r\n     */\r\n    constructor(id: number, name: string, questionText: string, displayName: string, start?: Date, end?: Date) {\r\n        super(id, name, questionText, displayName);\r\n        this.start = start;\r\n        this.end = end;\r\n        super.answer = \"\";\r\n    }\r\n}\r\n","export default \".full-page {\\r\\n    height: 100%;\\r\\n    display: flex;\\r\\n    background-color: #303030;\\r\\n}\\r\\n\\r\\n.login-card {\\r\\n    margin: auto;\\r\\n    width: 350px;\\r\\n}\\r\\n\\r\\n.login-field {\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\nmat-card {\\r\\n    padding: 50px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7SUFDWixhQUFhO0lBQ2IseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0ksWUFBWTtJQUNaLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxhQUFhO0FBQ2pCIiwiZmlsZSI6InNyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5mdWxsLXBhZ2Uge1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzMDMwMzA7XHJcbn1cclxuXHJcbi5sb2dpbi1jYXJkIHtcclxuICAgIG1hcmdpbjogYXV0bztcclxuICAgIHdpZHRoOiAzNTBweDtcclxufVxyXG5cclxuLmxvZ2luLWZpZWxkIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG5tYXQtY2FyZCB7XHJcbiAgICBwYWRkaW5nOiA1MHB4O1xyXG59Il19 */\";","import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { EMail } from \"../User/EMail\";\r\nimport { User } from \"../User/User\";\r\nimport { KeyData } from \"./KeyData\";\r\nimport { ReferenceTuple } from \"./ReferenceTuple\";\r\nimport { SectionElement } from \"./StudyObjects/SectionElement\";\r\nimport { Section } from \"./StudyObjects/Section\";\r\nimport { ShortDescription } from \"./ShortDescription\";\r\nimport { PauseElement } from \"./StudyObjects/PauseElement\";\r\nimport { DateQuestion } from \"./StudyObjects/Questions/DateQuestion\";\r\nimport { LinearScaleQuestion } from \"./StudyObjects/Questions/LinearScaleQuestion\";\r\nimport { MultipleChoiceQuestion } from \"./StudyObjects/Questions/MultipleChoiceQuestion\";\r\nimport { TextQuestion } from \"./StudyObjects/Questions/TextQuestion\";\r\nimport { TextBlock } from \"./StudyObjects/TextBlock\";\r\nimport { VibrationElement } from \"./StudyObjects/VibrationElement\";\r\nimport { VibrationPattern } from \"./StudyObjects/VibrationPattern\";\r\nimport { StudyPrototype } from \"./StudyPrototype\";\r\nimport { AppSettings } from \"@src/app/app-settings\";\r\nimport { AuthService } from \"@src/app/services/auth/auth.service\";\r\nimport { QualificationQuestion } from \"./StudyObjects/Questions/QualificationQuestion\";\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\n/**\r\n * Das StudyPrototypeDAO ist für den Zugriff auf die StudyPrototype Objekte in der Datenbank verantwortlich.\r\n */\r\nexport class StudyPrototypeDAO {\r\n    studyURL: string = AppSettings.baseURL + \"Study/\";\r\n    qualiQuestionURL: string = AppSettings.baseURL + \"QualificationQuestion/\";\r\n    userURL: string = AppSettings.baseURL + \"User/\";\r\n\r\n\r\n    constructor(private authService: AuthService, private http: HttpClient) { }\r\n\r\n    /**\r\n     * Die Methode gibt asynchron ein StudyPrototype Objekt zurück, welches eindeutig durch die id identifiziert wird.\r\n     * @param id number ist die ID der StudyPrototype, die aus der Datenbank geholt werden soll\r\n     */\r\n    async get(id: number): Promise<StudyPrototype> {\r\n        let study: StudyPrototype;\r\n\r\n        await (this.http.post(AppSettings.baseURL + \"StudyNew/\" + id + \"/\", { token: this.authService.getAuthToken() }) as Observable<StudyPrototype>).toPromise().then(studyResult => {\r\n            let keyData = new KeyData(studyResult.keyData.id,\r\n                new User(studyResult.keyData.author.id,\r\n                    studyResult.keyData.author.firstName,\r\n                    studyResult.keyData.author.lastName,\r\n                    studyResult.keyData.author.permission,\r\n                    new EMail(studyResult.keyData.author.email as any)),\r\n                studyResult.keyData.studyStatus,\r\n                new ShortDescription(studyResult.keyData.shortDescription as any),\r\n                studyResult.keyData.fullDescription,\r\n                studyResult.keyData.amplitudeNecessary,\r\n                studyResult.keyData.name);\r\n\r\n            for (let qualiQuestion of studyResult.keyData.qualiQuestions) {\r\n                let toInsert = new QualificationQuestion(qualiQuestion.id, qualiQuestion.name, qualiQuestion.questionText, qualiQuestion.displayName, qualiQuestion.requiredAnswer);\r\n                keyData.qualiQuestions.push(toInsert);\r\n            }\r\n\r\n            study = new StudyPrototype(keyData);\r\n            study.randomStrategy = studyResult.randomStrategy;\r\n\r\n            let sectionRef = [];\r\n            for (let ref of studyResult.refSections) {\r\n                sectionRef.push(new ReferenceTuple(ref.ID, ref.isFixed));\r\n            }\r\n            study.refSections = sectionRef;\r\n\r\n            let sections = [];\r\n            for (let section of studyResult.sections) {\r\n                let refArray = [];\r\n                for (let ref of section.sectionElements) {\r\n                    refArray.push(new ReferenceTuple(ref.ID, ref.isFixed));\r\n                }\r\n                let toInsert = new Section(section.id, section.name, section.displayName, section.skippable, section.resultRelevant, section.randomStrategy);\r\n                toInsert.sectionElements = refArray;\r\n                sections.push(toInsert);\r\n            }\r\n            study.sections = sections;\r\n\r\n            let sectionElements = [];\r\n            for (let sectionElement of studyResult.sectionElements) {\r\n                let refArray = [];\r\n                for (let ref of sectionElement.studyObjects) {\r\n                    refArray.push(new ReferenceTuple(ref.ID, ref.isFixed));\r\n                }\r\n                sectionElements.push(new SectionElement(sectionElement.id, sectionElement.name, sectionElement.displayName, sectionElement.randomStrategy, refArray));\r\n            }\r\n            study.sectionElements = sectionElements;\r\n\r\n            let studyObjects = [];\r\n            for (let studyObject of (studyResult as any).studyObjects) {\r\n                switch (studyObject.studyObjectTypes) {\r\n                    case 3: // TEXTBLOCK\r\n                        studyObjects.push(new TextBlock(studyObject.id, studyObject.name, studyObject.displayName, studyObject.text));\r\n                        break;\r\n                    case 4: // QUESTION\r\n                        switch (studyObject.questionType) {\r\n                            case 0: // DATE\r\n                                studyObjects.push(new DateQuestion(studyObject.id, studyObject.name,\r\n                                    studyObject.questionText, studyObject.displayName));\r\n                                break;\r\n                            case 1: // LINEAR SCALE\r\n                                studyObjects.push(new LinearScaleQuestion(studyObject.id,\r\n                                    studyObject.name, studyObject.questionText, studyObject.displayName,\r\n                                    studyObject.numberOfChoices, studyObject.leftLabel, studyObject.rightLabel));\r\n                                break;\r\n                            case 2: // MULTIPLE\r\n                                studyObjects.push(new MultipleChoiceQuestion(studyObject.id,\r\n                                    studyObject.name, studyObject.questionText,\r\n                                    studyObject.displayName, studyObject.answerOptions, studyObject.maxChoices));\r\n                                break;\r\n                            case 3: // TEXT\r\n                                studyObjects.push(new TextQuestion(studyObject.id, studyObject.name,\r\n                                    studyObject.questionText, studyObject.displayName));\r\n                                break;\r\n                        }\r\n                        break;\r\n                    case 5: // VIBRATIONPATTERN\r\n                        let vibrationElements = [];\r\n                        for (let vibElement of (studyObject as VibrationPattern).vibrationPatternElements) {\r\n                            if ((vibElement as any).amplitude == 0) {\r\n                                vibrationElements.push(new PauseElement(vibElement.duration));\r\n                            } else {\r\n                                vibrationElements.push(new VibrationElement(vibElement.duration,\r\n                                    (vibElement as VibrationElement).amplitude));\r\n                            }\r\n                        }\r\n                        let vibElement = new VibrationPattern(studyObject.id, studyObject.name, studyObject.displayName);\r\n                        vibElement.vibrationPatternElements = vibrationElements;\r\n                        studyObjects.push(vibElement);\r\n                        break;\r\n                }\r\n            }\r\n            study.studyObjects = studyObjects;\r\n        })\r\n\r\n        return study;\r\n    }\r\n\r\n    /**\r\n     * Die Methode speichert asynchron object in einer Datenbank, welches nachdem es gespeichert wurde wieder mit get aufgerufen werden kann.\r\n     * @param study StudyPrototype ist die Studie, die gespeichert werden soll\r\n     */\r\n    async save(study: StudyPrototype): Promise<number> {\r\n        let id = -1;\r\n        await this.http.post(AppSettings.baseURL + \"SaveStudy/\",\r\n            { study: study, token: this.authService.getAuthToken() }).toPromise().then(result => {\r\n                if (result != -1) {\r\n                    id = result as number;\r\n                }\r\n            });\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Die Methode aktualisiert object mit der Datenbank asynchron anhand seiner id.\r\n     * @param object StudyPrototype ist die Studie, die aktualisiert werden soll\r\n     */\r\n    async update(object: StudyPrototype): Promise<boolean> {\r\n        await this.save(object);\r\n        return true;\r\n    }\r\n\r\n\r\n}\r\n","export enum Types {\r\n    /**\r\n     * Ein SectionElement welches ein Container Objekt für die meisten StudyObjects ist und welches dem Container Section zugeordnet wird\r\n     */\r\n    SECTIONELEMENT,\r\n\r\n    /**\r\n     * Dieser Typ bezieht sich auf die Klasse VibrationPattern, aus der direkt eine Vibration generiert wird.\r\n     */\r\n    VIBRATIONPATTERN,\r\n\r\n    /**\r\n     * Allgemeiner Typ für alle Arten von Fragen\r\n     */\r\n    QUESTION,\r\n\r\n    /**\r\n     * Eine Section ist ein Container Objekt für SectionElements\r\n     */\r\n    SECTION,\r\n\r\n    /**\r\n     * Texte beziehen sich auf die Klasse TextBlock, in welchen nur Texte gespeichert werden\r\n     */\r\n    TEXT\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ReferenceTupleMembershipVerifier } from '@src/app/Model/Study/ReferenceTupleMembershipVerifier';\r\nimport { StudyPrototype } from '@src/app/Model/Study/StudyPrototype';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n/**\r\n * Der StudyWrapperService setzt eine beliebige Studie als Property des Services, sodass man mit dieser\r\n * in der Studienteilnahme, sowie Studienerstellung umgehen kann.\r\n */\r\nexport class StudyWrapperService {\r\n    private _study: StudyPrototype;\r\n    private _lastID: number;\r\n    isDemo: boolean = false;\r\n    /**\r\n     * Ist der ReferenceTupleMembershipVerifier für die jeweilige Studie\r\n     */\r\n    referenceTupleMembershipVerifier: ReferenceTupleMembershipVerifier;\r\n\r\n    get study(): StudyPrototype {\r\n        return this._study;\r\n    }\r\n\r\n    set study(study: StudyPrototype) {\r\n        this._study = study;\r\n        this.referenceTupleMembershipVerifier.studyPrototype = this._study;\r\n        this.lastID = this.getLastID();\r\n    }\r\n\r\n    set lastID(lastID: number) {\r\n        if (lastID == null) {\r\n            throw new Error(\"Setting the last ID to null or undefined is not allowed.\")\r\n        }\r\n        this._lastID = lastID;\r\n    }\r\n\r\n    /**\r\n     * Auf jeden get()-Aufruf wird die aktuelle lastID inkrementiert zurückgegeben.\r\n     */\r\n    get lastID(): number {\r\n        this._lastID += 1;\r\n        return this._lastID;\r\n    }\r\n\r\n    /**\r\n     * Gibt die höchste bzw. letzte ID innerhalb der Menge von Sections, SectionElements, StudyObjects\r\n     * und QualificationQuestions zurück.\r\n     */\r\n    private getLastID(): number {\r\n        let lastID = 0;\r\n        if (this._study) {\r\n\r\n            for (let section of this._study.sections) {\r\n                if (section.id > lastID) {\r\n                    lastID = section.id;\r\n                }\r\n            }\r\n            for (let sectionelement of this._study.sectionElements) {\r\n                if (sectionelement.id > lastID) {\r\n                    lastID = sectionelement.id;\r\n                }\r\n            }\r\n            for (let studyobject of this._study.studyObjects) {\r\n                if (studyobject.id > lastID) {\r\n                    lastID = studyobject.id;\r\n                }\r\n            }\r\n            for (let qualiquestion of this._study.keyData.qualiQuestions) {\r\n                if (qualiquestion.id > lastID) {\r\n                    lastID = qualiquestion.id;\r\n                }\r\n            }\r\n        }\r\n        return lastID;\r\n    }\r\n\r\n    /**\r\n     * Setzt für den StudyWrapperService den ReferenceTupleMembershipVerifier. Dieser war dann undefiniert.\r\n     */\r\n    constructor() {\r\n        this.referenceTupleMembershipVerifier = new ReferenceTupleMembershipVerifier(undefined);\r\n    }\r\n\r\n    /**\r\n     * Holt sich zu einer bestimmten number den Zufallstypen ab.\r\n     * @param value number für den Zufallstypen der zurückgegeben wird\r\n     */\r\n    getRandomizerName(value: number) {\r\n        switch (value) {\r\n            case 0:\r\n                return \"Keine\";\r\n            case 1:\r\n                return \"Einfacher Zufall\";\r\n        }\r\n    }\r\n}\r\n\r\n","import { MultipleChoiceQuestion } from \"./MultipleChoiceQuestion\";\r\nimport { AbstractQuestion } from \"./AbstractQuestion\";\r\n\r\n/**\r\n * Ein QualificationQuestion ist ein Fragenobjekt, das eine Ausschlussfrage modellieren soll\r\n * (als Teilnahmevoraussetzung zu einer Studie). Man kann nur zwei, selbst definierbare,\r\n * Antwortoptionen zur Verfügung stellen. Damit soll eine Ja-Nein-Ausschlussfrage realisiert werden.\r\n * Man kann dann auch nur eine Antwortoption auswählen.\r\n */\r\nexport class QualificationQuestion extends AbstractQuestion {\r\n  /**\r\n   * Ein Attribut, was nicht als Parameter übergeben wird, ist answerOptions. Dieses ist eine\r\n   * String-Liste, dass vorkonfigurierte Antworten enthält\r\n   *\r\n   * Ein weiteres Attribut, was nicht als Parameter übergeben wird, ist answer. Dieses ist ein String, das\r\n   * die ausgewählte Antwortoption als Antwort auf die Frage darstellt.\r\n   *\r\n   * maxChoices ist 1, weil............\r\n   *\r\n   * @param questionText ist die Frage, die gestellt werden soll\r\n   * @param id ist die eindeutige Identifikationsnummer des QualificationQuestions\r\n   * @param fixed entscheidet, ob QualificationQuestion innerhalb eines Section-Elements eine feste Position hat oder die\r\n   * Position von Studieninstanz zu Studieninstanz mit Hilfe von Randomisierung variiert\r\n   */\r\n  constructor(id: number, name: string, questionText: string, displayName: string, requiredAnswer: boolean) {\r\n    super(id, name, questionText, displayName);\r\n    this.requiredAnswer = requiredAnswer;\r\n  }\r\n  \r\n  private _requiredAnswer: boolean;\r\n  get requiredAnswer(): boolean {\r\n    return this._requiredAnswer;\r\n  }\r\n  set requiredAnswer(requiredAnswer: boolean) {\r\n    if (requiredAnswer == null) {\r\n      throw new Error(\"RequiredAnswer darf nicht null sein.\");\r\n    }\r\n    this._requiredAnswer = requiredAnswer;\r\n  }\r\n}\r\n","import { StudyStatus } from \"./StudyStatus\";\r\nimport { User } from \"../User/User\";\r\nimport { ShortDescription } from \"./ShortDescription\";\r\nimport { QualificationQuestion } from \"./StudyObjects/Questions/QualificationQuestion\";\r\n\r\n/**\r\n * Die Klasse public class KeyData enthählt alle wichtigen Schlüsselinformationen die für eine Studie benötigt werden.\r\n */\r\nexport class KeyData {\r\n\r\n    /**\r\n     * Dieses Attribut gibt einer (nicht ausgeführten) Studie eine eindeutige ID um sie von anderen Studien zu unterscheiden. \r\n     */\r\n    private _id: number;\r\n    get id(): number {\r\n        return this._id;\r\n    }\r\n    set id(id: number) {\r\n        this._id = id;\r\n    }\r\n\r\n    /**\r\n     * Dieses Attribut gibt es Autoren einer Studie an.\r\n     */\r\n    private _author: User;\r\n    get author(): User {\r\n        return this._author;\r\n    }\r\n    set author(user: User) {\r\n        this._author = user;\r\n    }\r\n\r\n    /**\r\n     * Dieses Attribut gibt an, ob das Gerät auf dem die Studie ausgeführt wird, die Amplitude unterstützen muss.\r\n     */\r\n    private _amplitudeNecessary: boolean;\r\n    get amplitudeNecessary(): boolean {\r\n        return this._amplitudeNecessary;\r\n    }\r\n    set amplitudeNecessary(amplitudeNecessary: boolean) {\r\n        if (amplitudeNecessary == null) {\r\n            throw new Error(\"Parameter darf nicht null sein!\");\r\n        }\r\n        this._amplitudeNecessary = amplitudeNecessary;\r\n    }\r\n\r\n    /**\r\n     * Dieses Attribut gibt an, in welchem Zustand sich die Studie befindet. Sie kann CREATED,\r\n     * PUBLISHED oder FINISHED sein.\r\n     */\r\n    private _studyStatus: StudyStatus;\r\n    get studyStatus() {\r\n        return this._studyStatus;\r\n    }\r\n    set studyStatus(studyStatus: StudyStatus) {\r\n        if (studyStatus == null) {\r\n            throw new Error(\"Parameter darf nicht null sein!\");\r\n        }\r\n        this._studyStatus = studyStatus;\r\n    }\r\n\r\n    /**\r\n     * Dieses Attribut speichert den Namen der Studie.\r\n     */\r\n    private _name: string;\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n    set name(name: string) {\r\n        if (!name) {\r\n            throw new Error(\"Parameter darf nicht null sein!\");\r\n        }\r\n        this._name = name;\r\n    }\r\n\r\n    /**\r\n     * ShortDescription enthält die Kurzbeschreibung eine Studie \r\n     * welche in der Listenansicht in der alle verfügbaren Studien angezeigt werden sichtbar ist.\r\n     */\r\n    private _shortDescription: ShortDescription;\r\n    get shortDescription(): ShortDescription {\r\n        return this._shortDescription;\r\n    }\r\n    set shortDescription(shortDescription: ShortDescription) {\r\n        this._shortDescription = shortDescription;\r\n    }\r\n\r\n    /**\r\n     * FullDescription enthält die volle Beschreibung einer Studie die dem User beim öffnen einer Studie angezeigt wird.\r\n     */\r\n    private _fullDescription: string;\r\n    get fullDescription(): string {\r\n        return this._fullDescription;\r\n    }\r\n    set fullDescription(fullDescription: string) {\r\n        this._fullDescription = fullDescription;\r\n    }\r\n\r\n    /**\r\n     * Die Liste enthält Ja Nein Fragen die alle korrekt beantwortet werden müssen, bevor ein Nutzer an einer Studie teilnehmen darf.\r\n     */\r\n    private _qualiQuestions: QualificationQuestion[] = [];\r\n    get qualiQuestions(): QualificationQuestion[] {\r\n        return this._qualiQuestions;\r\n    }\r\n    set qualiQuestions(qualiQuestions: QualificationQuestion[]) {\r\n        this._qualiQuestions = qualiQuestions;\r\n    }\r\n\r\n    constructor(id: number,\r\n        author: User,\r\n        studyStatus: StudyStatus,\r\n        shortdescription: ShortDescription,\r\n        fulldescription: string,\r\n        amplitudeNecessary: boolean,\r\n        name: string) {\r\n        this._amplitudeNecessary = amplitudeNecessary;\r\n        this._studyStatus = studyStatus;\r\n        this._id = id;\r\n        this._author = author;\r\n        this._shortDescription = shortdescription;\r\n        this._fullDescription = fulldescription;\r\n        this._name = name;\r\n    }\r\n}\r\n","import { AbstractQuestion } from \"./AbstractQuestion\";\r\n\r\n/**\r\n * Ein TextQuestion ist ein Fragenobjekt, bei dem man als Antwort\r\n * nur einen Text schreiben kann.\r\n */\r\nexport class TextQuestion extends AbstractQuestion {\r\n  objectType = \"TextQuestion\";\r\n\r\n  private _length: number;\r\n  get length(): number {\r\n    return this._length;\r\n  }\r\n  set length(length: number) {\r\n    this._length = length;\r\n  }\r\n\r\n  /**\r\n   * Ein Attribut, was nicht als Parameter übergeben wird, ist answer. Dieses bezeichnet die Antwort,\r\n   * die auf die Frage gegeben wird. Die Antwort stellt einen Text vom Typ string dar.\r\n   *\r\n   * @param questionText ist die Frage, die gestellt werden soll\r\n   * @param id ist die eindeutige Identifikationsnummer des TextQuestions\r\n   * @param fixed entscheidet, ob TextQuestion innerhalb eines Section-Elements eine feste Position hat oder die\r\n   * Position von Studieninstanz zu Studieninstanz mit Hilfe von Randomisierung variiert\r\n   */\r\n  constructor(id: number, name: string, questionText: string, displayName: string, length?: number) {\r\n    super(id, name, questionText, displayName);\r\n    this.length = length;\r\n    super.answer = \"\";\r\n  }\r\n}\r\n","import { UserPermission } from \"./UserPermission\";\r\nimport { EMail } from \"./EMail\";\r\n\r\n/**\r\n * Die Klasse User stellt einen Benutzer da.\r\n */\r\nexport class User {\r\n\r\n    /**\r\n     * Die eindeutige ID eines Benutzers.\r\n     */\r\n    private _id: number;\r\n    get id(): number {\r\n        return this._id;\r\n    }\r\n    set id(id: number ){\r\n        this._id = id;\r\n    }\r\n\r\n    /**\r\n     * Der Vorname des Benutzers\r\n     */\r\n    private _firstName: string;\r\n    get firstName(): string {\r\n        return this._firstName;\r\n    } \r\n    set firstName(firstName: string) {\r\n        if (this.ensureNameValidation(firstName)) {\r\n            this._firstName = firstName;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Der Nachname des Benutzers.\r\n     */\r\n    private _lastName: string;\r\n    get lastName(): string {\r\n        return this._lastName;\r\n    } \r\n    set lastName(lastName: string) {\r\n        if (this.ensureNameValidation(lastName)) {\r\n            this._lastName = lastName;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Die Rechte, die ein Benutzer innerhalb der Vibrostudies Anwendung hat.\r\n     */\r\n    private _permission: UserPermission;\r\n    get permission(): UserPermission {\r\n        return this._permission;\r\n    }\r\n    set permission(permission: UserPermission) {\r\n        if (this.ensurePermissionValidation(permission)) {\r\n            this._permission = permission;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Die EMail Adresse, die der Benutzer angegeben hat.\r\n     */\r\n    private _email: EMail;\r\n    get email(): EMail {\r\n        return this._email;\r\n    }\r\n    set email(email: EMail) {\r\n        this._email = email;\r\n    }\r\n\r\n    /**\r\n     * Ein neuer Benutzer wird erstellt und dabei wird sichergestellt, dass die Parameter gültig sind.\r\n     * @param id \r\n     * @param firstName \r\n     * @param lastName \r\n     * @param permission sagt aus, welche Aktionen ein Benuter durchführen kann\r\n     * @param password \r\n     * @param email \r\n     */\r\n    constructor(id: number, firstName: string, lastName: string, permission: UserPermission, email: EMail) {\r\n\r\n        this.id = id;\r\n\r\n        if (this.ensureNameValidation(firstName)) {\r\n            this.firstName = firstName;\r\n        }\r\n\r\n        if (this.ensureNameValidation(lastName)) {\r\n            this.lastName = lastName;\r\n        }\r\n\r\n        if (this.ensurePermissionValidation(permission)) {\r\n            this.permission = permission;\r\n        }\r\n\r\n        this.email = email;\r\n    }\r\n\r\n    private ensureNameValidation(toValidate: string): boolean {\r\n        if (!toValidate) {\r\n            throw new Error(\"Name kann nicht null oder leer sein.\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private ensurePermissionValidation(permission: UserPermission): boolean {\r\n        if (permission == undefined) {\r\n            throw new Error(\"Userpermission kann nicht null oder leer sein.\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Überprüft, ob der angegebene User toCompare mit dem aktuellen User übereinstimmt.\r\n     * @param toCompare \r\n     */\r\n    equals(toCompare: User): boolean {\r\n        if (this.firstName == toCompare.firstName && this.id == toCompare.id && \r\n            this.lastName == toCompare.lastName && this.permission == toCompare.permission) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","export default \"<mat-toolbar>\\r\\n    <img src=\\\"assets/images/Icon.png\\\" style=\\\"height: 4vh;\\\" />\\r\\n    <span>&nbsp;&nbsp;Neue Studie erstellen</span>\\r\\n    <span class=\\\"flexExpand\\\"></span>\\r\\n    <a class=\\\"helpButton\\\" mat-flat-button href=\\\"https://www.youtube.com/watch?v=RfdquOH7AxI\\\" target=\\\"_blank\\\">\\r\\n        <mat-icon>help</mat-icon>&nbsp;Hilfe\\r\\n    </a>\\r\\n</mat-toolbar>\\r\\n<mat-sidenav-container>\\r\\n    <mat-sidenav opened mode=\\\"side\\\">\\r\\n        <mat-nav-list>\\r\\n            <a mat-list-item [routerLink]=\\\"['general-editing']\\\">\\r\\n                <mat-icon>settings_applications</mat-icon>&nbsp;Allgemein\\r\\n            </a>\\r\\n            <mat-divider></mat-divider>\\r\\n            <a mat-list-item [routerLink]=\\\"['question-editing']\\\">\\r\\n                <mat-icon>speaker_notes</mat-icon>&nbsp;Fragen\\r\\n            </a>\\r\\n            <a mat-list-item [routerLink]=\\\"['textblock-editing']\\\">\\r\\n                <mat-icon>article</mat-icon>&nbsp;Texte\\r\\n            </a>\\r\\n            <a mat-list-item [routerLink]=\\\"['vibrationpattern-editing']\\\">\\r\\n                <mat-icon>vibration</mat-icon>&nbsp;Vibrationsmuster\\r\\n            </a>\\r\\n            <mat-divider></mat-divider>\\r\\n            <a mat-list-item [routerLink]=\\\"['sectionelement-editing']\\\">\\r\\n                <mat-icon>view_carousel</mat-icon>&nbsp;Studienseiten\\r\\n            </a>\\r\\n            <mat-divider></mat-divider>\\r\\n            <a mat-list-item [routerLink]=\\\"['section-editing']\\\">\\r\\n                <mat-icon>receipt</mat-icon>&nbsp;Abschnitte\\r\\n            </a>\\r\\n            <mat-divider></mat-divider>\\r\\n            <a mat-list-item [routerLink]=\\\"['sequence-editing']\\\">\\r\\n                <mat-icon>reorder</mat-icon>&nbsp;Studienablauf\\r\\n            </a>\\r\\n            <mat-divider></mat-divider>\\r\\n\\r\\n            <div class=\\\"bottomrow\\\">\\r\\n                <mat-divider></mat-divider>\\r\\n                <a mat-list-item (click)=\\\"save()\\\">\\r\\n\\r\\n                    <mat-icon>save</mat-icon>&nbsp;Speichern&nbsp;<mat-spinner *ngIf=\\\"this.saving\\\" color=\\\"accent\\\"\\r\\n                        diameter=\\\"25\\\"></mat-spinner>\\r\\n                </a>\\r\\n                <mat-divider></mat-divider>\\r\\n                <a mat-list-item [routerLink]=\\\"['../dashboard/my-studies']\\\">\\r\\n                    <mat-icon>keyboard_backspace</mat-icon>&nbsp;Zurück\\r\\n                </a>\\r\\n            </div>\\r\\n        </mat-nav-list>\\r\\n    </mat-sidenav>\\r\\n    <mat-sidenav-content>\\r\\n        <router-outlet></router-outlet>\\r\\n        <br><br>\\r\\n    </mat-sidenav-content>\\r\\n</mat-sidenav-container>\";","\r\n/**\r\n * Das public enum UserPermission definiert, welche Aktionen ein Benutzer ausführen darf.\r\n */\r\nexport enum UserPermission {\r\n    /**\r\n     * Ein PARTICIPANT kann an einer Studie teilnehmen.\r\n     */\r\n    PARTICIPANT,\r\n    /**\r\n     * Ein CREATOR kann an einer Studie teilnehmen, die nicht von ihm erstellt wurde und eigene Studien erstellen.\r\n     */\r\n    CREATOR,\r\n    /**\r\n     * Ein ADMINISTRATOR kann die Stufe eines Benutzers verändern. Außerdem kann er Studien erstellen und an ihnen teilnehmen.\r\n     */\r\n    ADMINISTRATOR\r\n}\r\n\r\n","import { ReferenceTuple } from \"../ReferenceTuple\";\r\nimport { AbstractStudyObject } from \"./AbstractStudyObject\";\r\nimport { AbstractVibrationPatternElement } from \"./AbstractVibrationPatternElement\";\r\nimport { PauseElement } from \"./PauseElement\";\r\nimport { VibrationElement } from \"./VibrationElement\";\r\n\r\n/**\r\n * Ein VibrationPattern stellt ein Studienobjekt dar, mit dem benutzerdefinierte\r\n * Vibrationsmuster, bestehend aus einstellbaren Pause- und Vibrieren-Elementen, erstellt werden können.\r\n */\r\nexport class VibrationPattern extends AbstractStudyObject {\r\n    objectType = \"VibrationPattern\";\r\n\r\n    /**\r\n     * Das Array enthält die Vibration und PauseElemente aus denen sich eine Vibration zusammensetzt.\r\n     */\r\n    private _vibrationPatternElements: AbstractVibrationPatternElement[];\r\n    get vibrationPatternElements(): AbstractVibrationPatternElement[] {\r\n        return this._vibrationPatternElements;\r\n    }\r\n    set vibrationPatternElements(vibrationPatternElements: AbstractVibrationPatternElement[]) {\r\n        if (vibrationPatternElements == null) {\r\n            throw new Error(\"Die Liste vibrationPatternElements konnte nicht gesetzt werden, da sie undefiniert ist.\");\r\n        }\r\n        this._vibrationPatternElements = vibrationPatternElements;\r\n    }\r\n\r\n    /**\r\n     * Ein Attribut, was nicht als Parameter übergeben wird, ist timings. Dieses ist eine Number-Liste, mit dem ein Vibrationsmuster\r\n     * kodiert wird. Werte in dieser Liste stellen eine Zeitdauer in ms dar. Alle geraden Indizes in der Liste entsprechen\r\n     * einem Pause-Element, wohingegen alle ungeraden Indizes in der Liste einem Vibrieren-Element entsprechen.\r\n     *\r\n     * Ein weiteres Attribut, was nicht als Parameter übergeben wird, ist amplitudes. Dieses bezeichnet eine Number-Liste,\r\n     * das die Amplituden-Werte für die Pause- und Vibrieren-Elemente enthält. Hierbei entspricht der i-te Wert der pattern-Liste\r\n     * dem i-ten Wert der amplitudes-Liste. In diesem Liste können Werte zwischen 0 und 255 vorkommen.\r\n     *\r\n     * @param id ist die eindeutige Identifikationsnummer des VibrationPatterns\r\n     * @param fixed entscheidet, ob das VibrationPattern innerhalb eines Section-Elements eine feste Position hat oder die\r\n     * Position von Studieninstanz zu Studieninstanz mit Hilfe von Randomisierung variiert\r\n     */\r\n    constructor(id: number, name: string, displayName: string) {\r\n        super(id, name, displayName);\r\n        this.vibrationPatternElements = [];\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { routes } from '@src/app/app.routes';\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AlertService } from '../services/alert/alert.service';\r\nimport { AuthService } from '../services/auth/auth.service';\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.css']\r\n})\r\n/**\r\n * Die LoginComponent ist zum Anmelden des Users zuständig. Falls der Nutzer noch nicht\r\n * registriert ist, wird er durch die LoginComponent in die Registrier-Ansicht navigiert.\r\n * Falls er bereits authentifiziert wurde, gelangt er durch Anmeldung automatisch in die Anwendung.\r\n */\r\nexport class LoginComponent implements OnInit {\r\n    /**\r\n     * Das Attribut enthält die E-Mail Adresse des Users der sich einloggen will.\r\n     */\r\n    email = \"\";\r\n    /**\r\n     * Das Attribut enthält das Passwort zur zugehörigen E-Mail Adresse.\r\n     */\r\n    password = \"\";\r\n\r\n    /**\r\n     * Konstruktor der LoginComponent. Darin werden sämtliche Services initialisert,\r\n     * die für das Anmelden gebraucht werden.\r\n     * @param router Router Singleton, zum Routen des Pfads nach Eintritt eines Ereignisses\r\n     * @param authService AuthService Singleton, ist für die Authentifizierung des Nutzers zuständig\r\n     */\r\n    constructor(private router: Router, private authService: AuthService, private alertService: AlertService) { }\r\n\r\n    /**\r\n     * Navigiert zum Dashboard wenn ein User authentifiziert wurde.\r\n     */\r\n    ngOnInit(): void {\r\n        if (this.authService.isAuthenticated()) {\r\n            this.toDashboard();\r\n        }\r\n        this.email = \"\";\r\n        this.password = \"\";\r\n    }\r\n\r\n    /**\r\n     * Loggt einen User mit den Klassenattributen ein.\r\n     */\r\n    async login() {\r\n        if (this.email != \"\" && this.password != \"\" && this.email != undefined && this.password != undefined) {\r\n            await this.authService.login(this.email, this.password).then(result => {\r\n                if (result) {\r\n                    this.toDashboard();\r\n                } else {\r\n                    this.alertService.alert(\"Anmeldung fehlgeschlagen. Überprüfe die eingegebene E-Mail und das Passwort.\");\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Navigiert den User zur Registrierungsansicht.\r\n     */\r\n    toRegister() {\r\n        this.router.navigate([\"register\"], { replaceUrl: true });\r\n    }\r\n\r\n    private toDashboard() {\r\n        this.router.navigate([\"dashboard\"], { replaceUrl: true });\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { CdkTreeModule } from '@angular/cdk/tree';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\n\r\n\r\nconst materialModules = [\r\n  CdkTreeModule,\r\n  MatAutocompleteModule,\r\n  MatButtonModule,\r\n  MatCardModule,\r\n  MatCheckboxModule,\r\n  MatChipsModule,\r\n  MatDividerModule,\r\n  MatExpansionModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatListModule,\r\n  MatMenuModule,\r\n  MatProgressSpinnerModule,\r\n  MatPaginatorModule,\r\n  MatRippleModule,\r\n  MatSelectModule,\r\n  MatSidenavModule,\r\n  MatSnackBarModule,\r\n  MatSortModule,\r\n  MatTableModule,\r\n  MatTabsModule,\r\n  MatToolbarModule,\r\n  MatFormFieldModule,\r\n  MatButtonToggleModule,\r\n  MatTreeModule,\r\n  OverlayModule,\r\n  PortalModule,\r\n  MatSlideToggleModule,\r\n  MatDialogModule\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    ...materialModules\r\n  ],\r\n  exports: [\r\n    ...materialModules\r\n  ],\r\n})\r\nexport class MaterialModule {\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-available-studies',\r\n    templateUrl: './available-studies.component.html',\r\n    styleUrls: ['./available-studies.component.css']\r\n})\r\nexport class AvailableStudiesComponent implements OnInit {\r\n    ngOnInit() {\r\n    }\r\n}\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from '@src/environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n/**\r\n * Der AppSettingsService verwaltet die Speicherung und Bearbeitung\r\n * der App-Einstellungn. Zu diesen Einstellungen zählt, ob das mobile Endgerät vibrieren kann\r\n * und ob sie Amplituden unterstützt.\r\n */\r\nexport class AppSettingsService {\r\n    private _hasVibrator = false;\r\n    private _hasAmplitude = false;\r\n    /**\r\n     * any-Objekt für das Vibrator-Objekt, den man zum Vibrieren des Handys braucht.\r\n     */\r\n    vibrator: any;\r\n\r\n    get hasVibrator(): boolean {\r\n        return this._hasVibrator;\r\n    }\r\n\r\n    set hasVibrator(hasVibrator: boolean) {\r\n        if (hasVibrator == null) {\r\n            throw new Error(\"Setting hasVibrator to null or undefined is not allowed.\");\r\n        }\r\n        this._hasVibrator = hasVibrator;\r\n    }\r\n\r\n    get hasAmplitude(): boolean {\r\n        return this._hasAmplitude;\r\n    }\r\n\r\n    set hasAmplitude(hasAmplitude: boolean) {\r\n        if (hasAmplitude == null) {\r\n            throw new Error(\"Setting hasAmplitude to null or undefined is not allowed.\");\r\n        }\r\n        this._hasAmplitude = hasAmplitude;\r\n    }\r\n\r\n    /**\r\n     * Standardkonstruktor für den AppSettingsService.\r\n     */\r\n    constructor() { }\r\n\r\n}\r\n","import { AbstractStudyObject } from \"../AbstractStudyObject\";\r\n\r\n/**\r\n * Ein AbstractQuestion stellt ein allgemeines Fragenobjekt dar.\r\n */\r\nexport abstract class AbstractQuestion extends AbstractStudyObject {\r\n  private _questionText: string = \"\";\r\n  get questionText(): string {\r\n    return this._questionText;\r\n  }\r\n  set questionText(questionText: string) {\r\n    this._questionText = questionText;\r\n  }\r\n\r\n  private _answer: Date | number | string | string[];\r\n  get answer(): Date | number | string | string[] {\r\n    return this._answer;\r\n  }\r\n  set answer(answer: Date | number | string | string[]) { // null überprüfen\r\n    if (answer == null) {\r\n      throw new Error(\"Answer darf nicht null sein.\");\r\n    }\r\n    this._answer = answer;\r\n  }\r\n\r\n  /**\r\n   * Ein Attribut, was nicht als Parameter übergeben wird, ist answer. Dieses bezeichnet die Antwort,\r\n   * die auf die Frage gegeben wird kann und dessen Typ bzw. Antwortmöglichkeit von der erbenden Klasse abhängt\r\n   *\r\n   * @param questionText ist die Frage, die gestellt werden soll\r\n   * @param id ist die eindeutige Identifikationsnummer des Fragenobjekts\r\n   */\r\n  constructor(id: number, name: string, questionText: string, displayName: string) {\r\n    super(id, name, displayName);\r\n    this.questionText = questionText;\r\n    this._answer = undefined;\r\n    this.displayName = displayName;\r\n  }\r\n}\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}