{"version":3,"sources":["./src/app/dashboard/my-studies/my-studies.component.html","./src/app/register/register.component.css","./src/app/Model/Study/StudyObjects/Section.ts","./src/app/dashboard/my-studies/my-studies.component.css","./src/app/Model/Study/StudyObjects/TextBlock.ts","./src/app/Model/Study/StudyObjects/VibrationElement.ts","./src/app/register/register.component.ts","./src/app/app-settings.ts","./src/app/Model/Study/CSVConverter/csvconverter.service.ts","./src/app/dashboard/profile/profile.component.ts","./src/app/services/auth/auth.service.ts","./src/app/Model/Study/Result/UserResultTupleDAO.service.ts","./src/app/app.component.css","./src/environments/environment.ts","./src/app/dashboard/my-studies/my-studies.component.ts","./src/app/Model/User/EMail.ts","./src/app/services/storage/storage.service.ts","./src/app/Model/Study/ShortDescription.ts","./src/app/dashboard/participated-studies/participated-studies.component.ts","./src/app/dashboard/dashboard.component.html","./src/app/Model/Study/StudyObjects/SectionElement.ts","./src/app/Model/Study/ReferenceTuple.ts","./src/app/studycreation/studycreation.component.css","./src/app/dashboard/profile/profile.component.css","./src/app/Model/User/UserDao.service.ts","./src/app/services/dialogs/dialog-template.html","./src/app/Model/Study/StudyObjects/Questions/MultipleChoiceQuestion.ts","./src/app/services/dialogs/confirmDialog.service.ts","./src/app/register/register.component.html","./src/app/guards/role/role-guard.service.ts","./src/app/dashboard/dashboard-routing.module.ts","./src/app/dashboard/available-studies/available-studies.component.css","./src/app/Model/Study/StudyObjects/AbstractStudyObject.ts","./src/app/dashboard/dashboard.component.ts","./src/app/Model/Study/KeyDataDAO.service.ts","./src/app/app.routes.ts","./src/app/app.component.ts","./src/app/dashboard/dashboard.module.ts","./src/app/Model/Randomizing/RandomizingStrategies.ts","./src/app/Model/Study/StudyObjects/Questions/LinearScaleQuestion.ts","./src/app/Model/Study/ReferenceTupleMembershipVerifier.ts","./src/app/dashboard/dashboard.component.css","./src/app/app.component.html","./src/app/dashboard/participated-studies/participated-studies.component.css","./src/app/dashboard/dashboard.routes.ts","./src/app/app.module.ts","./src/app/dashboard/profile/profile.component.html","./src/app/dashboard/participated-studies/participated-studies.component.html","./src/app/guards/auth/auth-guard.service.ts","./src/app/dashboard/available-studies/available-studies.component.html","./src/app/Model/Study/StudyPrototype.ts","./src/app/Model/Study/Result/UserResultTuple.ts","./src/app/login/login.component.html","./src/app/Model/Study/StudyStatus.ts","./src/app/Model/Study/StudyObjects/PauseElement.ts","./src/app/studycreation/studycreation.component.ts","./src/app/Model/Study/StudyObjects/AbstractVibrationPatternElement.ts","./src/app/services/alert/alert.service.ts","./src/app/Model/Study/StudyObjects/Questions/DateQuestion.ts","./src/app/login/login.component.css","./src/app/Model/Study/StudyPrototypeDAO.service.ts","./src/app/Model/Study/Types.ts","./src/app/services/study-wrapper/study-wrapper.service.ts","./src/app/Model/Study/StudyObjects/Questions/QualificationQuestion.ts","./src/app/Model/Study/KeyData.ts","./src/app/Model/Study/StudyObjects/Questions/TextQuestion.ts","./src/app/Model/User/User.ts","./src/app/studycreation/studycreation.component.html","./src/app/Model/User/UserPermission.ts","./src/app/Model/Study/StudyObjects/VibrationPattern.ts","./src/app/app-routing.module.ts","./src/app/login/login.component.ts","./src/material.module.ts","./src/app/dashboard/available-studies/available-studies.component.ts","./src/main.ts","./src/app/services/app-settings/app-settings.service.ts","./src/app/Model/Study/StudyObjects/Questions/AbstractQuestion.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["export default \"<div *ngIf=\\\"loading\\\">\\r\\n    <mat-spinner></mat-spinner>\\r\\n</div>\\r\\n<div *ngFor=\\\"let keyData of studies; let index = index\\\">\\r\\n    <mat-card>\\r\\n        <div class=\\\"card-container\\\">\\r\\n            <mat-card-title class=\\\"card-container-left\\\">{{ keyData.name }}</mat-card-title>\\r\\n            <div class=\\\"buttonrow\\\">\\r\\n                <button *ngIf=\\\"keyData.studyStatus == 0\\\" mat-flat-button class=\\\"greenButton\\\" (click)=\\\"onEditClick(keyData)\\\">\\r\\n                    <mat-icon>edit</mat-icon>&nbsp;Bearbeiten\\r\\n                </button>\\r\\n\\r\\n                <button *ngIf=\\\"keyData.studyStatus == 0\\\" mat-flat-button class=\\\"brownButton\\\" (click)=\\\"publish(keyData)\\\">\\r\\n                    <mat-icon>publish</mat-icon>&nbsp;Veröffentlichen\\r\\n                </button>\\r\\n\\r\\n                <button *ngIf=\\\"keyData.studyStatus == 1\\\" mat-flat-button class=\\\"greenButton\\\" (click)=\\\"onEndClick(keyData)\\\">\\r\\n                    <mat-icon>clear</mat-icon>&nbsp;Beenden\\r\\n                </button>\\r\\n\\r\\n                <button *ngIf=\\\"keyData.studyStatus == 2\\\" mat-flat-button class=\\\"brownButton\\\" (click)=\\\"resetStudy(keyData.id)\\\">\\r\\n                    <mat-icon>replay</mat-icon>&nbsp;Zurücksetzen\\r\\n                </button>\\r\\n\\r\\n                <button *ngIf=\\\"keyData.studyStatus == 2\\\" mat-flat-button class=\\\"greenButton\\\" (click)=\\\"getCSV(keyData.id)\\\">\\r\\n                    <mat-icon>assessment</mat-icon>&nbsp;Ergebnisse\\r\\n                </button>\\r\\n\\r\\n                <button *ngIf=\\\"keyData.studyStatus == 2\\\" mat-flat-button class=\\\"greenButton\\\" (click)=\\\"getParticipants(keyData.id)\\\">\\r\\n                    <mat-icon>supervisor_account</mat-icon>&nbsp;Teilnehmerliste\\r\\n                </button>\\r\\n\\r\\n                <button mat-flat-button class=\\\"redButton\\\" (click)=\\\"onDelete(keyData)\\\" style=\\\"margin-left: 15px\\\">\\r\\n                    <mat-icon>delete</mat-icon>&nbsp;Löschen\\r\\n                </button>\\r\\n            </div>\\r\\n        </div><br>\\r\\n        <mat-divider></mat-divider><br>\\r\\n        <mat-card-content style=\\\"word-wrap: normal;\\\">\\r\\n            {{keyData.shortDescription.text}}\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n    <br />\\r\\n</div>\\r\\n<a mat-fab class=\\\"greenButton\\\" (click)=\\\"onNewClick()\\\" style=\\\"display: block; margin: auto;\\\">\\r\\n    <mat-icon>add</mat-icon>\\r\\n</a>\";","export default \".full-page {\\r\\n    height: 100%;\\r\\n    display: flex;\\r\\n    background-color: #303030;\\r\\n  }\\r\\n  \\r\\n  .login-card {\\r\\n    margin: auto;\\r\\n    width: 350px;\\r\\n  }\\r\\n  \\r\\n  .login-field {\\r\\n    width: 100%;\\r\\n  }\\r\\n  \\r\\n  mat-card {\\r\\n    padding: 50px;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7SUFDWixhQUFhO0lBQ2IseUJBQXlCO0VBQzNCOztFQUVBO0lBQ0UsWUFBWTtJQUNaLFlBQVk7RUFDZDs7RUFFQTtJQUNFLFdBQVc7RUFDYjs7RUFFRjtJQUNJLGFBQWE7QUFDakIiLCJmaWxlIjoic3JjL2FwcC9yZWdpc3Rlci9yZWdpc3Rlci5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmZ1bGwtcGFnZSB7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzMwMzAzMDtcclxuICB9XHJcbiAgXHJcbiAgLmxvZ2luLWNhcmQge1xyXG4gICAgbWFyZ2luOiBhdXRvO1xyXG4gICAgd2lkdGg6IDM1MHB4O1xyXG4gIH1cclxuICBcclxuICAubG9naW4tZmllbGQge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfVxyXG5cclxubWF0LWNhcmQge1xyXG4gICAgcGFkZGluZzogNTBweDtcclxufVxyXG4iXX0= */\";","import { ReferenceTuple } from \"../ReferenceTuple\";\r\nimport { ReferenceTupleMembershipVerifier } from \"../ReferenceTupleMembershipVerifier\";\r\nimport { Types } from \"../Types\";\r\nimport { RandomizingStrategies } from \"../../Randomizing/RandomizingStrategies\";\r\nimport { AbstractStudyObject } from \"./AbstractStudyObject\";\r\n\r\n/**\r\n * Eine Section stellt einen logischen Abschnitt einer Studie dar, das nur Section-Elemente, also\r\n * nur Objekte der Klasse AbstractSectionElement, enthalten darf.\r\n */\r\nexport class Section extends AbstractStudyObject{\r\n\r\n  /**\r\n   * Der verifier wird verwendet um Objekte anhand ihrer id ihren ContainerObjekten zuzuordnen.\r\n   */\r\n  private _verifier: ReferenceTupleMembershipVerifier;\r\n  get verifier(): ReferenceTupleMembershipVerifier {\r\n    return this._verifier;\r\n  }\r\n  set verifier(verifier: ReferenceTupleMembershipVerifier) {\r\n    this._verifier = verifier;\r\n  }\r\n\r\n  /**\r\n   * Das Attribut gibt an, ob eine Section für den Studienteilnehmer überspringbar sein soll.\r\n   */\r\n  private _skippable: boolean;\r\n  get skippable(): boolean {\r\n    return this._skippable;\r\n  }\r\n  set skippable(skippable: boolean) {\r\n    if (skippable == null) {\r\n      throw new Error(\"Skippable darf nicht null sein.\");\r\n    }\r\n    this._skippable = skippable;\r\n  }\r\n\r\n  /**\r\n   * Das Attribut gibt an, ob eine Section in die Ergebnisauswertung miteinbezogen wird.\r\n   */\r\n  private _resultRelevant: boolean;\r\n  get resultRelevant (): boolean {\r\n    return this._resultRelevant;\r\n  }\r\n  set resultRelevant(resultRelevant: boolean) {\r\n    if (resultRelevant == null) {\r\n      throw new Error(\"ResultRelevant darf nicht null sein.\");\r\n    }\r\n    this._resultRelevant = resultRelevant;\r\n  }\r\n\r\n  /**\r\n   * Das Attribut gibt an, welcher Algorithmus für die Randomisierung über die Elemente, die in einer Section liegen verwendet wird\r\n   */\r\n  private _randomStrategy: RandomizingStrategies;\r\n  get randomStrategy(): RandomizingStrategies {\r\n    return this._randomStrategy;\r\n  }\r\n  set randomStrategy(randomStrategy: RandomizingStrategies) {\r\n    if (randomStrategy == null) {\r\n      throw new Error(\"RandomStrategy darf nicht null sein.\");\r\n    }\r\n    this._randomStrategy = randomStrategy;\r\n  }\r\n\r\n\r\n  /**\r\n   * In dem Attribut sind mittels ID Referenzen auf jene Elemente gespeichert, die innerhalb einer Section liegen.\r\n   */\r\n  private _sectionElements: ReferenceTuple[] = [];\r\n  get sectionElements(): ReferenceTuple[] {\r\n    return this._sectionElements;\r\n  }\r\n  set sectionElements(sectionElements: ReferenceTuple[]) {\r\n\r\n    this._sectionElements = sectionElements;\r\n  }\r\n\r\n  /**\r\n   * Ein Attribut, was nicht als Parameter übergeben wird, ist sectionElements.\r\n   * Dieses ist eine AbstractSectionElement-Liste, das die Section-Elemente\r\n   * enthält, die der Studienleiter zu einer Section hinzufügt\r\n   *\r\n   * @param skippable erlaubt das Überspringen der Section innerhalb der Studie\r\n   * @param name bezeichnet den Namen der Section\r\n   * @param resultRelevant entscheidet, ob Ergebnisse der Section ins Endergebnis einer Studie mit\r\n   * einfließen, z.B. ist eine Einführungs-Section mit einem Tutorial, um sich mit der Umgebung\r\n   * vertraut zu machen, nicht von Bedeutung\r\n   */\r\n  constructor(id: number, name: string, displayName: string, skippable: boolean, resultRelevant: boolean, randomStrategy: RandomizingStrategies) {\r\n    super(id, name, displayName);\r\n    this._skippable = skippable;\r\n    this._resultRelevant = resultRelevant;\r\n    this._randomStrategy = randomStrategy;\r\n  }\r\n\r\n  /**\r\n   * Fügt entweder einen Test oder einen Playground hinzu.\r\n   *\r\n   * @param studyObject ist die Referenz auf das StudyObject, das hinzugefügt werden soll.\r\n   * @param index ist die Stelle, an die das Objekt hinzugefügt werden soll. Bei null wird es am Ende der Liste hinzugefügt.\r\n   * @throws Error, falls es kein Test oder Playground ist.\r\n   */\r\n  addStudyObject(studyObject: ReferenceTuple, index?: number): void {\r\n\r\n    const typeOfReferenceTuple = this.verifier.getType(studyObject);\r\n\r\n    if (!(typeOfReferenceTuple === Types.SECTIONELEMENT)) {\r\n      throw new Error(\"In eine Section können nur SectionElements eingefügt werden.\");\r\n    }\r\n\r\n    if (index == null) {\r\n      this.sectionElements.push(studyObject);\r\n    } else {\r\n      this.sectionElements.splice(index, 0, studyObject);\r\n    }\r\n  }\r\n}\r\n","export default \".card-container {\\r\\n    display: flex;\\r\\n    justify-content: space-between;\\r\\n}\\r\\n\\r\\nbutton {\\r\\n    margin-left: 15px;\\r\\n    padding-bottom: 3px;\\r\\n}\\r\\n\\r\\nmat-card-title {\\r\\n    padding-top: 10px;\\r\\n}\\r\\n\\r\\n.greenButton {\\r\\n    background-color: #3e753b;\\r\\n    color: white;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGFzaGJvYXJkL215LXN0dWRpZXMvbXktc3R1ZGllcy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksYUFBYTtJQUNiLDhCQUE4QjtBQUNsQzs7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIsWUFBWTtBQUNoQiIsImZpbGUiOiJzcmMvYXBwL2Rhc2hib2FyZC9teS1zdHVkaWVzL215LXN0dWRpZXMuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jYXJkLWNvbnRhaW5lciB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG59XHJcblxyXG5idXR0b24ge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDE1cHg7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogM3B4O1xyXG59XHJcblxyXG5tYXQtY2FyZC10aXRsZSB7XHJcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcclxufVxyXG5cclxuLmdyZWVuQnV0dG9uIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzZTc1M2I7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbn0iXX0= */\";","import { AbstractStudyObject } from \"./AbstractStudyObject\";\r\n\r\n/**\r\n * Ein TextBlock stellt ein Studienobjekt dar, das nur einen unformatierten\r\n * Text enthält.\r\n */\r\nexport class TextBlock extends AbstractStudyObject {\r\n  objectType = \"TextBlock\";\r\n\r\n  /**\r\n   * Text der in der Studie angezeigt wird.\r\n   */\r\n  private _text: string;\r\n  get text(): string {\r\n    return this._text;\r\n  }\r\n  set text(text: string) {\r\n    this._text = text;\r\n  }\r\n\r\n  /**\r\n   * @param text ist der Inhalt, also der Text des TextBlocks\r\n   * @param id ist die eindeutige Identifikationsnummer des TextBlocks\r\n   * @param fixed entscheidet, ob der TextBlock innerhalb eines Section-Elements eine feste Position hat oder die\r\n   * Position von Studieninstanz zu Studieninstanz mit Hilfe von Randomisierung variiert\r\n   */\r\n  constructor(id: number, name: string, displayName: string, text: string) {\r\n    super(id, name, displayName);\r\n    this.text = text;\r\n  }\r\n}\r\n","import { AbstractVibrationPatternElement } from \"./AbstractVibrationPatternElement\";\r\n\r\nexport class VibrationElement extends AbstractVibrationPatternElement {\r\n\r\n  /**\r\n   * Amplitude gibt an wie stark die Vibration die ausgeführt werden soll ist.\r\n   */\r\n  private _amplitude: number;\r\n  get amplitude(): number {\r\n    return this._amplitude;\r\n  }\r\n  set amplitude(amplitude: number) {\r\n    if (amplitude == null) {\r\n      throw new Error(\"Amplitude konnte nicht gesetzt werden, da sie undefiniert ist.\");\r\n    }\r\n    const temp = Number(amplitude);\r\n    this.ensure8bitNumber(temp);\r\n    this._amplitude = temp;\r\n  }\r\n\r\n  constructor(duration: number, amplitude: number) {\r\n    super(duration);\r\n    this.ensure8bitNumber(amplitude);\r\n    this._amplitude = amplitude;\r\n  }\r\n\r\n  // Stellt sicher, dass der Parameter im erlaubten Bereich von 0 bis 255 liegt\r\n  private ensure8bitNumber(amplitude: number) {\r\n    if (!Number.isInteger(amplitude)) {\r\n      throw new Error(\"Es sind nur Ganzzahlen erlaubt.\");\r\n    }\r\n    if (!(amplitude > 0 && amplitude <= 255)) {\r\n      throw new Error(\"Es sind nur Werte zwischen 1 und 255 erlaubt.\");\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { EMail } from '../Model/User/EMail';\r\nimport { User } from '../Model/User/User';\r\nimport { UserDao } from '../Model/User/UserDao.service';\r\nimport { UserPermission } from '../Model/User/UserPermission';\r\nimport { AlertService } from '../services/alert/alert.service';\r\nimport { AuthService } from '../services/auth/auth.service';\r\n\r\n@Component({\r\n    selector: 'app-register',\r\n    templateUrl: './register.component.html',\r\n    styleUrls: ['./register.component.css']\r\n})\r\n/**\r\n * Die Registrierungskomponente ist für die Registrierung von Nutzern zuständig,\r\n * die noch nicht in der Datenbank stehen.\r\n */\r\nexport class RegisterComponent implements OnInit {\r\n    /**\r\n     * Das Feld, in das der Vorname eingetragen wird.\r\n     */\r\n    firstName = \"\";\r\n    /**\r\n     * Das Feld, in das der Nachname eingetragen wird.\r\n     */\r\n    lastName = \"\";\r\n    /**\r\n     * Das Feld, in das die EMail Adresse eingetragen wird.\r\n     */\r\n    email = \"\";\r\n    /**\r\n     * Das Feld, in das das Passwort eingetragen wird.\r\n     */\r\n    password = \"\";\r\n    /**\r\n     * Das Feld, in dem das Passwort wiederholt wird.\r\n     */\r\n    confirmPassword = \"\";\r\n\r\n    /**\r\n     * Konstruktor der RegisterComponent. Darin werden sämtliche Services initialisert,\r\n     * die für das Registrieren gebraucht werden.\r\n     * @param router router Router Singleton, zum Routen des Pfads nach Eintritt eines Ereignisses\r\n     * @param authService authService AuthService Singleton, ist für die Authentifizierung des Nutzers zuständig\r\n     * @param userService\r\n     */\r\n    constructor(private router: Router, private authService: AuthService,\r\n        private userService: UserDao, private alertService: AlertService) { }\r\n\r\n    /**\r\n     * Navigiert zum Dashboard wenn ein User authentifiziert wurde.\r\n     */\r\n    async ngOnInit(): Promise<void> {\r\n        await this.authService.isAuthenticated().then(result => {\r\n            if (result) {\r\n                this.router.navigate([\"dashboard\"], { replaceUrl: true });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Registriert für den Nutzer einen User in der Datenbank, falls er alle Eingabefelde\r\n     * korrekt eingetragen hat.\r\n     */\r\n    async register() {\r\n        if (this.firstName != \"\" && this.lastName != \"\" && this.email != \"\"\r\n            && this.password != \"\" && this.password == this.confirmPassword) {\r\n            let user = new User(0, this.firstName, this.lastName, UserPermission.CREATOR, new EMail(this.email));\r\n            await this.userService.save(user, \"\", this.password).then(result => {\r\n                if (result) {\r\n                    this.router.navigate([\"login\"], { replaceUrl: true });\r\n                } else {\r\n                    this.alertService.alert(\"Registration fehlgeschlagen. Vermutlich existiert bereits ein Account unter dieser E-Mail.\");\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n","export class AppSettings {\r\n    public static baseURL = \"https://vibrostudies.dmz.teco.edu/\"; // HIER * DURCH BACKEND SERVER URL ERSETZEN\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { UserResultTuple } from '../Result/UserResultTuple';\r\nimport { StudyPrototype } from '../StudyPrototype';\r\nimport { ExportToCsv } from 'export-to-csv';\r\nimport { AbstractQuestion } from '../StudyObjects/Questions/AbstractQuestion';\r\nimport { ICSVObject } from './csvObject';\r\nimport { MetaData } from '../MetaData';\r\nimport { User } from '../../User/User';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CSVConverter {\r\n    private metaDataHeaders = [\"Zeit in Millisekunden\", \"Marke\", \"Gerät\", \"Display\", \"Hardware\", \"Hersteller\", \"Model\", \"Produkt\", \"AndroidSDK\", \"Amplitude\"];\r\n\r\n    constructor() { }\r\n\r\n\r\n    generateResultCSV(study: StudyPrototype, results: UserResultTuple[], download: boolean): ExportToCsv {\r\n        let data = []; \r\n        const headers = this.generateHeaders(results[0].results);\r\n        const numberOfQuestions = headers.length - this.metaDataHeaders.length;\r\n\r\n        data = this.convertAllResultsToData(results, numberOfQuestions, data);\r\n\r\n        const csvExporter = new ExportToCsv(this.setOptions(headers, study, \"Ergebnisse\"));\r\n        return csvExporter.generateCsv(data, download);\r\n    }\r\n\r\n    giveResultCSV(study: StudyPrototype, results: UserResultTuple[]): ExportToCsv {\r\n        return this.generateResultCSV(study, results, false);\r\n    }\r\n\r\n    generateParticipantsCSV(study: StudyPrototype, results: UserResultTuple[], download: boolean) {\r\n        const headers = [\"Vorname\", \"Nachname\", \"E-Mail\"];\r\n        let data = [];\r\n        let participants: User[] = [];\r\n\r\n        results.forEach(triple => { participants.push(triple.user); });\r\n\r\n        const shuffeldUser = participants.map((a) => ({ sort: Math.random(), value: a }))\r\n            .sort((a, b) => a.sort - b.sort)\r\n            .map((a) => a.value);\r\n\r\n        data = this.convertParticipantsToData(shuffeldUser, data);\r\n\r\n        const csvExporter = new ExportToCsv(this.setOptions(headers, study, \"Teilnehmerliste\"));\r\n        return csvExporter.generateCsv(data, download);\r\n    }\r\n\r\n    giveParticipantsCSV(study: StudyPrototype, results: UserResultTuple[]) {\r\n        return this.generateParticipantsCSV(study, results, false);\r\n    }\r\n\r\n\r\n    private convertParticipantsToData(participants: User[], data: any): any {\r\n\r\n        participants.forEach(participant => {\r\n            data.push({ firstName: participant.firstName, lastName: participant.lastName, email: participant.email.email });\r\n        });\r\n\r\n        return data;\r\n    }\r\n\r\n    private setOptions(headers: string[], study: StudyPrototype, fileType: string): any { //TODO: nciht so schön\r\n        const studyKeyData = study.keyData;\r\n        const options = {\r\n            fieldSeparator: ';',\r\n            filename: studyKeyData.name + \" - \" + fileType,\r\n            quoteStrings: '\"',\r\n            decimalseparator: '.',\r\n            showLabels: true,\r\n            showTitle: true,\r\n            title: fileType + ' ' + studyKeyData.name,\r\n            useBom: true,\r\n            noDownload: true,\r\n            headers: headers,\r\n            nullToEmptyString: true,\r\n        };\r\n        return options;\r\n    }\r\n\r\n    private generateHeaders(questions: AbstractQuestion[]): string[] {\r\n        let headers: string[] = [];\r\n        const sortedQuestions = this.sortQuestionsByID(questions);\r\n\r\n        sortedQuestions.forEach(question => {\r\n            headers.push(question.name + \"(\" + question.id + \")\");\r\n        });\r\n\r\n        headers = headers.concat(this.metaDataHeaders);\r\n\r\n        return headers;\r\n    }\r\n\r\n    private sortQuestionsByID(questions: AbstractQuestion[]): AbstractQuestion[] {\r\n        return questions.sort((a, b) => (a.id > b.id) ? 1 : -1);\r\n    }\r\n\r\n    private convertAllResultsToData(results: UserResultTuple[], numberOfQuestions: number, data : any) {\r\n        results.forEach(tuple => {\r\n            const answeredQuestions = tuple.results;\r\n            if (answeredQuestions.length !== numberOfQuestions) {\r\n                throw new Error(\"Es wurden nicht alle Fragen beantwortet.\");\r\n            }\r\n            data = this.convertResultToData(answeredQuestions, tuple.metaData, data);\r\n        });\r\n        return data;\r\n    }\r\n\r\n    private convertResultToData(result: AbstractQuestion[], metaData: MetaData, data : any) {\r\n        const sortedAnsweredQuestions = this.sortQuestionsByID(result);\r\n        let csvObj: ICSVObject = {};\r\n\r\n        sortedAnsweredQuestions.forEach(question => {\r\n            const nameOfProp = \"question\" + question.id;\r\n            csvObj[nameOfProp] = question.answer;\r\n        });\r\n\r\n        csvObj = this.insertMetaData(csvObj, metaData);\r\n\r\n        data.push(csvObj);\r\n        return data;\r\n    }\r\n\r\n    private insertMetaData(csvObject: ICSVObject, metaData: MetaData): ICSVObject {\r\n        csvObject[\"time\"] = metaData.timeInMs;\r\n        csvObject[\"brand\"] = metaData.brand;\r\n        csvObject[\"device\"] = metaData.device;\r\n        csvObject[\"display\"] = metaData.display;\r\n        csvObject[\"hardware\"] = metaData.hardware;\r\n        csvObject[\"manufacturer\"] = metaData.manufacturer;\r\n        csvObject[\"model\"] = metaData.model;\r\n        csvObject[\"product\"] = metaData.product;\r\n        csvObject[\"androidsdk\"] = metaData.androidsdk;\r\n        csvObject[\"amplitude\"] = this.booleanToReadableString(metaData.hasAmplitude);\r\n\r\n        return csvObject;\r\n    }\r\n\r\n    private booleanToReadableString(bool: boolean): string { //TODO: dafür gibt es bestimmt schon was\r\n        if (bool) {\r\n            return \"Ja\";\r\n        }\r\n        return \"Nein\";\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { User } from '@src/app/Model/User/User';\r\nimport { UserDao } from '@src/app/Model/User/UserDao.service';\r\nimport { AlertService } from '@src/app/services/alert/alert.service';\r\nimport { ConfirmDialogService } from '@src/app/services/dialogs/confirmDialog.service';\r\nimport { AuthService } from '../../services/auth/auth.service';\r\n\r\n@Component({\r\n    selector: 'app-profile',\r\n    templateUrl: './profile.component.html',\r\n    styleUrls: ['./profile.component.css']\r\n})\r\n/**\r\n * Die ProfileComponent befähigt den Nutzer dazu alle Accountdaten zu verwalten,\r\n * die er momentan in der Datenbank abgespeichert hat. Dafür wird dem Nutzer\r\n * die Profil-Ansicht angeboten.\r\n */\r\nexport class ProfileComponent implements OnInit {\r\n\r\n    /**\r\n     * User-Objekt des aktuell eingeloggten Nutzers.\r\n     */\r\n    user: User;\r\n\r\n    oldPassword = \"\";\r\n    newPassword = \"\";\r\n    newPasswordRepeat = \"\";\r\n\r\n    constructor(private authService: AuthService, private userService: UserDao, private alertService: AlertService, private confirmDialogService: ConfirmDialogService) { }\r\n\r\n    /**\r\n     * Initialisiert die ProfileComponent.\r\n     */\r\n    async ngOnInit() {\r\n        this.user = this.authService.getUser();\r\n    }\r\n\r\n    /**\r\n     * Speichert den neuen Nutzer innerhalb der Datenbank und dem lokalen Speicher ab.\r\n     */\r\n    async saveUser() {\r\n        await this.userService.checkPassword(this.user.id, this.oldPassword).then(async isValid => {\r\n            if (isValid) {\r\n                await this.userService.save(this.user, this.oldPassword, this.oldPassword).then(result => {\r\n                    if (result) {\r\n                        this.alertService.alert(\"Accountdaten erfolgreich gespeichert!\");\r\n                        this.authService.setUser(this.user);\r\n                        this.oldPassword = \"\";\r\n                    } else {\r\n                        this.alertService.alert(\"Das vorherige Passwort ist nicht korrekt. Accountdaten wurden nicht geändert.\");\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Entfernt den Nutzer aus der Datenbank und loggt ihn aus der Anwendung aus.\r\n     */\r\n    async deleteUser() {\r\n        this.confirmDialogService.openDialog(\"Hiermit werden alle deine Daten, inklusive deiner erstellten Studien, unwiderruflich gelöscht!\").then(async isConfirmed => {\r\n            if (isConfirmed) {\r\n                await this.userService.delete(this.user).then(response => {\r\n                    if (response) {\r\n                        this.alertService.alert(\"Account erfolgreich gelöscht!\");\r\n                    }\r\n                });\r\n                this.authService.logout();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Speichert das neue Passwort ab.\r\n     */\r\n    async savePassword() {\r\n        if (this.newPassword == this.newPasswordRepeat) {\r\n            await this.userService.save(this.user, this.oldPassword, this.newPassword).then(async result => {\r\n                if (result) {\r\n                    await this.authService.login(this.user.email.email, this.newPassword);\r\n                    this.newPassword = \"\";\r\n                    this.newPasswordRepeat = \"\";\r\n                    this.oldPassword = \"\";\r\n                    this.alertService.alert(\"Passwort erfolgreich geändert!\");\r\n                } else {\r\n                    this.alertService.alert(\"Das vorherige Passwort ist nicht korrekt. Das Passwort wurde nicht geändert.\");\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AppSettings } from '@src/app/app-settings';\r\nimport { EMail } from '@src/app/Model/User/EMail';\r\nimport { User } from '@src/app/Model/User/User';\r\nimport { AlertService } from '../alert/alert.service';\r\nimport { StorageService } from '../storage/storage.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n/**\r\n * Der AuthService verwaltet die Authentifizierung, Registrierung und\r\n * Abmeldung des Nutzers in der Anwendung.\r\n */\r\nexport class AuthService {\r\n    /**\r\n     * Konstruktor des AuthService. Darin werden sämtliche Services initialisert,\r\n     * die für eine Authentifizierung des Nutzers gebraucht werden.\r\n     * @param router Router Singleton, zum Routen des Pfads nach Eintritt eines Ereignisses\r\n     * @param http HttpClient der zurückgi\r\n     * @param storageService StorageService, zum Ablegen des authentifizierten Nutzers in den lokalen Speicher\r\n     * @param alertService\r\n     */\r\n    constructor(private http: HttpClient, private router: Router, private storageService: StorageService, private alertService: AlertService) { }\r\n\r\n    /**\r\n     * Löscht den registrierten Nutzer aus dem lokalen Speicher.\r\n     */\r\n    clear(): void {\r\n        this.storageService.clear();\r\n    }\r\n\r\n    /**\r\n     * Überprüft ob ein gegebener User in der Datenbank existiert\r\n     * und auch autehntifiziert werden kann.\r\n     * @returns Promise<boolean>, je nachdem ob der Nutzer existiert oder nicht\r\n     */\r\n    async isAuthenticated(): Promise<boolean> {\r\n        let result = false;\r\n        if (!this.isTokenExpired()) {\r\n            if (this.getUser() && this.getAuthToken()) {\r\n                await this.userIsValid(this.getUser().id, this.getAuthToken()).then(response => {\r\n                    if (response) {\r\n                        result = true;\r\n                    } else {\r\n                        this.alertService.alert(\"Login-Session abgelaufen. Bitte erneut anmelden!\");\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Checkt ob ein Nutzer valide ist.\r\n     * @param id number des User-Objekts vom Nutzer\r\n     * @param token string Token des Nutzers\r\n     */\r\n    async userIsValid(id: number, token: string): Promise<boolean> {\r\n        let isValid = false;\r\n        await this.http.post(AppSettings.baseURL + \"VerifyUser/\", { id: id, token: token }).toPromise().then(result => {\r\n            if (result) {\r\n                isValid = true;\r\n            }\r\n        });\r\n        return isValid;\r\n    }\r\n\r\n    /**\r\n     * Checkt ob ein Token für die Sitzung mit dem Nutzer schon abgelaufen ist oder nicht.\r\n     * @returns boolean ob Token abgelaufen ist oder nicht\r\n     */\r\n    isTokenExpired(): boolean {\r\n        try {\r\n            this.storageService.get(\"userToken\");\r\n        } catch (err) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Loggt einen Nutzer in die Anwendung ein, indem das User-Objekt aus der Datenbank geholt wird\r\n     * und anschließend in den lokalen Speicher reingeladen wird, falls das eingegebene Passwort\r\n     * mit dem des Nutzers in der Datenbank übereinstimmt.\r\n     * @param email string für die E-Mail Adresse des Nutzers\r\n     * @param password string für das Passwort des Nutzers\r\n     * @throws Error, wenn kein solcher Nutzer in der Datenbank enthalten ist\r\n     */\r\n    async login(email: string, password: string): Promise<boolean> {\r\n\r\n        let user: User;\r\n        await this.http.post(AppSettings.baseURL + \"Login/\", {\r\n            email: email,\r\n            password: password,\r\n        }).toPromise().then(data => {\r\n            if ((data as any).id) {\r\n                user = new User((data as any).id, (data as any).firstName, (data as any).lastName,\r\n                    (data as any).permission, new EMail((data as any).email));\r\n                this.setUser(user);\r\n                this.setAuthToken((data as any).token);\r\n            } else {\r\n\r\n                throw new Error(\"No such user found in database.\");\r\n            }\r\n        });\r\n        return user != undefined;\r\n    }\r\n\r\n    /**\r\n     * Setzt ein Authentifizierungstoken im lokalen Speicher.\r\n     * @param token string des Tokens\r\n     */\r\n    setAuthToken(token: string) {\r\n        this.storageService.set(\"token\", token);\r\n    }\r\n\r\n    /**\r\n     * Holt den Authentifizierungstoke aus dem lokalen Speicher.\r\n     */\r\n    getAuthToken(): string {\r\n        return this.storageService.get(\"token\");\r\n    }\r\n\r\n    /**\r\n     * Generiert einen Standardnutzer welcher durch den Nutzer, der im userToken spezifiziert wurde, überschrieben\r\n     * wird. Dieser wird dann anschließend als registrierter Nutzer zurückgeschrieben.\r\n     * @returns User-Objekt des aktuell registrierten Nutzers\r\n     * @throws Error, wenn kein Nutzer im lokalen Speicher enthalten ist\r\n     */\r\n    getUser(): User {\r\n        let user: User;\r\n        if (this.storageService.get(\"userToken\") != undefined) {\r\n            let userToken = JSON.parse(this.storageService.get(\"userToken\"));\r\n            user = new User(userToken._id, userToken._firstName, userToken._lastName, userToken._permission,\r\n                new EMail(userToken._email._email));\r\n        }\r\n        return user;\r\n    }\r\n\r\n    /**\r\n     * Setzt einen Nutzer in den lokalen Speicher, indem sein User-Objekt\r\n     * zu eiem JSON konvertiert und anschließend abgespeichert wird.\r\n     * Hierbei wird im lokalen Speicher genau ein Nutzer abgelegt.\r\n     * @param user User-Objekt des Nutzers, der in den lokalen Speicher gesetzt werden soll\r\n     * @throws Error, wenn der Nutzer auf null oder undefined gesetzt wird\r\n     */\r\n    setUser(user: User) {\r\n        if (user == null) {\r\n            throw new Error(\"Setting the User to null or undefined is not allowed.\");\r\n        }\r\n        this.storageService.set(\"userToken\", JSON.stringify(user));\r\n    }\r\n\r\n    /**\r\n     * Entfernt den registrieten Nutzer aus dem lokalen Speicher und navigiert zur Login-Ansicht.\r\n     */\r\n    logout(): void {\r\n        this.clear();\r\n        this.router.navigate([\"login\"], { replaceUrl: true });\r\n    }\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { AppSettings } from \"@src/app/app-settings\";\r\nimport { AuthService } from \"@src/app/services/auth/auth.service\";\r\nimport { EMail } from \"../../User/EMail\";\r\nimport { User } from \"../../User/User\";\r\nimport { UserPermission } from \"../../User/UserPermission\";\r\nimport { StudyPrototype } from \"../StudyPrototype\";\r\nimport { StudyPrototypeDAO } from \"../StudyPrototypeDAO.service\";\r\nimport { UserResultTuple } from \"./UserResultTuple\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class UserResultTupleDAO {\r\n\r\n    constructor(private http: HttpClient, private studyService: StudyPrototypeDAO, private authService: AuthService) { }\r\n\r\n    /**\r\n     * Die Methode gibt asynchron ein UserResultTuple zurück, welches eindeutig durch die id identifiziert wird.\r\n     * @param studyId number ist die ID des UserResultTuple, der aus der Datenbank geholt werden soll\r\n     */\r\n    async get(studyId: number): Promise<UserResultTuple[]> {\r\n        let userResult: UserResultTuple[] = [];\r\n        let study: StudyPrototype;\r\n        await this.studyService.get(studyId).then(studyResult => {\r\n            study = studyResult;\r\n        });\r\n\r\n        await this.http.post(AppSettings.baseURL + \"Result/\" + studyId + \"/\", \r\n        { token: this.authService.getAuthToken() })\r\n        .toPromise().then(result => {\r\n            for (let element of result as any) {\r\n                let answers = [];\r\n                let index = 0;\r\n                for (let questionAnswer of element.answers) {\r\n                    for (let studyObject of study.studyObjects) {\r\n                        if (studyObject.id == questionAnswer.objectId) {\r\n                            let copied = _.cloneDeep(studyObject);\r\n                            copied.id = index++;\r\n                            copied.answer = questionAnswer.answer;\r\n                            answers.push(copied);\r\n                        }\r\n                    }\r\n                }\r\n                userResult.push(new UserResultTuple(new User(0, element.participant.firstName, element.participant.lastName, UserPermission.PARTICIPANT, \r\n                    new EMail(element.participant.email)), answers, element.metaData));\r\n            }\r\n        });\r\n\r\n        return userResult;\r\n    }\r\n\r\n    /**\r\n     * Die Methode speichert asynchron ein UserResultTuple in einer Datenbank, welches nachdem \r\n     * es gespeichert wurde wieder mit get aufgerufen werden kann.\r\n     * @param studyId number Id der Studie\r\n     * @param idUser number Id des Users der an der Studie teilgenomment hat\r\n     * @param object UserResultTuple ist der UserResultTuple, der gespeichert werden soll\r\n     * @param participantId number Id die der User innerhalb der Studie zugewiesen bekommen hat\r\n     */\r\n    async save(studyId: number, idUser: number, object: UserResultTuple, participantId: number): Promise<boolean> {\r\n        let success = false;\r\n        await this.http.post(AppSettings.baseURL + \"SaveResult/\", {\r\n            participantId: participantId,\r\n            studyId: studyId,\r\n            userId: idUser,\r\n            metaData: object.metaData,\r\n            answeredQuestions: object.answeredQuestions,\r\n            token: this.authService.getAuthToken(),\r\n        }).toPromise().then(result => {\r\n            if (result) {\r\n                success = true;\r\n            }\r\n        });\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * Startet die Ausführung einer bestimmten Studie für einen Nutzer\r\n     * @param studyId number id der Studie die gestartet wird\r\n     * @param userId number id des Users der an der Studie teilnimmt\r\n     */\r\n    async startStudy(studyId: number, userId: Number): Promise<number> {\r\n        let returnId: number = -1;\r\n        await this.http.post(AppSettings.baseURL + \"StartStudy/\", {studyId: studyId, userId: userId, \r\n            token: this.authService.getAuthToken()})\r\n            .toPromise().then(result => {\r\n            if (result != -1) {\r\n                returnId = result as any;\r\n            }\r\n        });\r\n        return returnId;\r\n    }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\";","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { KeyData } from '@src/app/Model/Study/KeyData';\r\nimport { KeyDataDao } from '@src/app/Model/Study/KeyDataDAO.service';\r\nimport { ShortDescription } from '@src/app/Model/Study/ShortDescription';\r\nimport { StudyPrototypeDAO } from '@src/app/Model/Study/StudyPrototypeDAO.service';\r\nimport { StudyStatus } from '@src/app/Model/Study/StudyStatus';\r\nimport { AuthService } from '../../services/auth/auth.service';\r\nimport { StudyWrapperService } from '@src/app/services/study-wrapper/study-wrapper.service';\r\nimport { CSVConverter } from '@src/app/Model/Study/CSVConverter/csvconverter.service';\r\nimport { StudyPrototype } from '@src/app/Model/Study/StudyPrototype';\r\nimport { UserResultTuple } from '@src/app/Model/Study/Result/UserResultTuple';\r\nimport { UserResultTupleDAO } from '@src/app/Model/Study/Result/UserResultTupleDAO.service';\r\nimport { RandomizingStrategies } from '@src/app/Model/Randomizing/RandomizingStrategies';\r\nimport { ConfirmDialogService } from '@src/app/services/dialogs/confirmDialog.service';\r\n\r\n@Component({\r\n    selector: 'app-my-studies',\r\n    templateUrl: './my-studies.component.html',\r\n    styleUrls: ['./my-studies.component.css']\r\n})\r\n/**\r\n * Die MyStudiesComponent blendet dem Nutzer alle Studien ein, welcher er selbst erstellt hat.\r\n * In der \"Meine-Studien\"-Ansicht kann der Nutzer seine eigenen Studien bearbeiten, veröffentlichen,\r\n * beenden und die Ergebnisse einsehen, sowie exportieren.\r\n */\r\nexport class MyStudiesComponent implements OnInit {\r\n\r\n    /**\r\n     * Das Array<KeyData> enthält alle Studien, die der eingeloggte Nutzer erstellt hat.\r\n     */\r\n    studies: KeyData[] = [];\r\n    /**\r\n     * boolean, welches zeigt, ob etwas lädt oder nicht.\r\n     */\r\n    loading: boolean = true;\r\n    /**\r\n     * boolean, welches zeigt, ob etwas erstellt wird oder nicht.\r\n     */\r\n    creating: boolean = false;\r\n\r\n    /**\r\n     * Konstruktor der MyStudiesComponent. Darin werden sämtliche Services initialisert,\r\n     * die für die \"Meine Studien\"-Ansicht gebraucht werden.\r\n     * @param router Router Singleton, zum Routen des Pfads nach Eintritt eines Ereignisses\r\n     * @param studywrapper StudyWrapperService Singleton, indem die zu bearbeitende Studie enthalten ist\r\n     * @param keyDataService KeyDataDao Singleton, um auf die Schlüsselinformationen aller verfügbaren Studien zuzugreifen\r\n     * @param studyService StudyPrototypeDAO Singleton, um auf sämtliche Studien zuzugreifen, die vom Nutzer erstellt wurde\r\n     * @param authService AuthService Singleton, ist für die Authentifizierung des Nutzers zuständig\r\n     * @param csvService CSVConverter ist zum konvertierten der Ergebnisse und zum Abspeichern dieser da\r\n     * @param resultService UserResultTupleDAO, um UserResultTuple aus der Datenbank anzusprechen\r\n     */\r\n    constructor(\r\n        private router: Router,\r\n        private studywrapper: StudyWrapperService,\r\n        public keyDataService: KeyDataDao,\r\n        private studyService: StudyPrototypeDAO,\r\n        private authService: AuthService,\r\n        private csvService: CSVConverter,\r\n        private resultService: UserResultTupleDAO,\r\n        private confirmDialogService: ConfirmDialogService\r\n    ) { }\r\n\r\n    /**\r\n     * Initialisiert die AvailableStudiesComponent.\r\n     */\r\n    async ngOnInit() {\r\n        if (this.authService.getUser().permission == 0) {\r\n            this.router.navigate([\"dashboard\"], { replaceUrl: true });\r\n        } else {\r\n            await this.getStudies();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Holt die vom Nutzer erstellten Studien.\r\n     */\r\n    async getStudies() {\r\n        this.loading = true;\r\n        await this.keyDataService.getFromUserId(this.authService.getUser().id).then(keyDataResults => {\r\n            if (keyDataResults.length > 0) {\r\n                this.studies = keyDataResults;\r\n            } else {\r\n                this.studies = [];\r\n            }\r\n            this.loading = false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Navigiert den Nutzer zur Studienerstellung-Ansicht, der jeweiligen ausgewählten Studie.\r\n     * @param keyData KeyData sind die Schlüsselinformationen der ausgewählten Studie\r\n     */\r\n    async onEditClick(keyData: KeyData) {\r\n        await this.studyService.get(keyData.id).then(studyResult => {\r\n            this.studywrapper.study = studyResult;\r\n        });\r\n        this.router.navigate([\"studycreation/general-editing\"], { replaceUrl: true });\r\n    }\r\n\r\n    /**\r\n     * Löscht die ausgewählte Studie aus der Datenbank.\r\n     * @param keyData KeyData sind die Schlüsselinformationen der ausgewählten Studie\r\n     */\r\n    async onDelete(keyData: KeyData) {\r\n        this.confirmDialogService.openDialog(\"Hiermit wird die Studie unwiderruflich gelöscht!\").then(async isConfirmed => {\r\n            if (isConfirmed) {\r\n                await this.keyDataService.delete(keyData.id).then(keyDataResult => {\r\n                    this.getStudies();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Beendet eine veröffentlichte Studie des Nutzers.\r\n     * @param keyData KeyData sind die Schlüsselinformationen der ausgewählten Studie\r\n     */\r\n    async onEndClick(keyData: KeyData) {\r\n        keyData.studyStatus = StudyStatus.FINISHED;\r\n        await this.keyDataService.updateStudyState(keyData.id, StudyStatus.FINISHED).then(result => {\r\n            if (result) {\r\n                this.getStudies();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Navigiert den Nutzer zur Studienerstellung-Ansicht, um eine neue Studie anzulegen.\r\n     */\r\n    async onNewClick() {\r\n        if (!this.creating) {\r\n            this.creating = true;\r\n            let user = await this.authService.getUser();\r\n            let keyData = new KeyData(-1, user, StudyStatus.CREATED, new ShortDescription(\"Neue Studie\"), \"Neue Studie\", false, \"Neue Studie\");\r\n            let study = new StudyPrototype(keyData);\r\n            study.randomStrategy = RandomizingStrategies.STANDARD;\r\n            await this.studyService.save(study).then(async result => {\r\n                if (result) {\r\n                    await this.studyService.get(result).then(studyResult => {\r\n                        this.studywrapper.study = studyResult;\r\n                        this.creating = false;\r\n                        this.router.navigate([\"studycreation/general-editing\"], { replaceUrl: true });\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Konvertiert die Ergebnisse in eine .csv-Datei und legt diese auf dem Endsystem des Nutzers ab.\r\n     * @param studyId number ist die ID der Studie, dessen Ergebnisse exportiert werden\r\n     */\r\n    async getCSV(studyId: number) {\r\n        let study: StudyPrototype;\r\n        await this.studyService.get(studyId).then(studyResult => {\r\n            study = studyResult;\r\n        });\r\n        let userResult: UserResultTuple[];\r\n        await this.resultService.get(studyId).then(result => {\r\n            userResult = result;\r\n        });\r\n        this.csvService.giveResultCSV(study, userResult);\r\n    }\r\n\r\n    /**\r\n     * Trägt alle Teilnehmer einer ausgewählten Studie in eine .csv-Datei ein und\r\n     * legt diese auf dem Endsystem des Nutzers ab.\r\n     * @param studyId number ist die ID der Studie, dessen Ergebnisse exportiert werden\r\n     */\r\n    async getParticipants(studyId: number) {\r\n        let study: StudyPrototype;\r\n        await this.studyService.get(studyId).then(studyResult => {\r\n            study = studyResult;\r\n        });\r\n        let userResult: UserResultTuple[];\r\n        await this.resultService.get(studyId).then(result => {\r\n            userResult = result;\r\n        });\r\n        this.csvService.giveParticipantsCSV(study, userResult);\r\n    }\r\n\r\n    /**\r\n     * Setzt eine Studie zurück.\r\n     * @param studyId number ist die ID der Studie, die zurückgesetzt wird\r\n     */\r\n    async resetStudy(studyId: number) {\r\n        this.confirmDialogService.openDialog(\"Beim Zurücksetzen der Studie werden auch alle Studienergebnisse gelöscht!\").then(async isConfirmed => {\r\n            if (isConfirmed) {\r\n                let study: StudyPrototype;\r\n                await this.studyService.get(studyId).then(studyResult => {\r\n                    study = studyResult;\r\n                });\r\n                study.keyData.studyStatus = StudyStatus.CREATED;\r\n                await this.keyDataService.delete(study.keyData.id);\r\n                await this.studyService.save(study);\r\n                this.getStudies();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Veröffentlicht eine ausgewählte Studie.\r\n     * @param keyData KeyData sind die Schlüsselinformationen der ausgewählten Studie\r\n     */\r\n    async publish(keyData: KeyData) {\r\n        keyData.studyStatus = StudyStatus.PUBLISHED;\r\n        await this.keyDataService.updateStudyState(keyData.id, StudyStatus.PUBLISHED).then(result => {\r\n            if (result) {\r\n                this.getStudies();\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","\r\n/**\r\n *Die public class Email definiert eine E-Mail Adresse\r\n */\r\nexport class EMail {\r\n\r\n    /**\r\n     * Das Attribut repräsentiert eine EMail Adresse\r\n     */\r\n    private _email: string;\r\n\r\n    /**\r\n     * Hier wird eine neue E-Mail erstellt und ihre Gültigkeit sichergestellt.\r\n     * @param email \r\n     */\r\n    constructor(email: string) {\r\n        if (this.ensureValidation(email)) {\r\n            this._email = email;\r\n        }\r\n    }\r\n\r\n    get email(): string {\r\n        return this._email;\r\n    }\r\n\r\n    /**\r\n     * Das Attribut email wird gesetzt und ihre Gültigkeit sichergestellt.\r\n     * @param email \r\n     */\r\n    set email(email: string) {\r\n        if (this.ensureValidation(email)) {\r\n            this._email = email;\r\n        }\r\n\r\n    }\r\n\r\n    private ensureValidation(email: string): boolean {\r\n        if (!email) {\r\n            throw new Error(\"Email kann nicht null oder leer sein.\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\n/**\r\n * Der StorageService verwaltet die Speicherung, Bearbeitung und Löschen von Items, welche\r\n * im lokalen Speicher der Sitzung abgelegt werden.\r\n */\r\nexport class StorageService {\r\n\r\n\t/**\r\n\t * Standardkonstruktor eines Services\r\n\t */\r\n\tconstructor() { }\r\n\r\n\t/**\r\n\t * Gibt das Item, welches den Schlüssel hat, aus dem lokalen Speicher zurück.\r\n\t * @param key string ist der Schlüssel des Items\r\n\t * @returns string des Items\r\n\t * @throws Error sobald das zurückgegebene Item null ist\r\n\t */\r\n\tget(key: string) {\r\n\t\tconst item = localStorage.getItem(key);\r\n\t\tif(item == null) {\r\n\t\t\tthrow new Error(\"No such data with given key found in local storage.\");\r\n\t\t}\r\n\t\treturn localStorage.getItem(key);\r\n\t}\r\n\r\n\t/**\r\n\t * Legt ein Item im lokalen Speicher ab.\r\n\t * @param key string ist der Schlüssel des Items\r\n\t * @param data string sind die Nutzdaten des Items\r\n\t * @throws Error sobald key oder data null oder undefined ist\r\n\t */\r\n\tset(key: string, data: string) {\r\n\t\tif((key == null) || (data == null)) {\r\n\t\t\tthrow new Error(\"Key or data is null or undefined.\");\r\n\t\t}\r\n\t\tlocalStorage.setItem(key, data);\r\n\t}\r\n\r\n\t/**\r\n\t * Löscht alle abgelegten Items innerhalb des lokalen Speichers.\r\n\t */\r\n\tclear() {\r\n\t\tlocalStorage.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * Löscht ein Item, welches den Schlüssel hat, aus dem lokalen Speicher.\r\n\t * @param key String ist der Schlüssel des Items\r\n\t */\r\n\tremove(key: string) {\r\n\t\tlocalStorage.removeItem(key);\r\n\t}\r\n}\r\n","/**\r\n * Die Konstante definiert, wie lang in Zeichen der String einer ShortDescription sein darf\r\n */\r\nconst maxLength = 200;\r\n\r\n/**\r\n * ShortDescription enthält die Kurzbeschreibung, die in der Studienübersicht angezeigt wird\r\n */\r\nexport class ShortDescription {\r\n\r\n    /**\r\n     * Der Text der Kurzbeschreibung.\r\n     */\r\n    private _text: string;\r\n    get text(): string {\r\n        return this._text;\r\n    }\r\n    /**\r\n     * Setzt den Text der Kurzbeschreibung und prüft ob die Beschreibung kürzer als die maximal erlaubte Länge ist\r\n     * @param text Text der Kurzbeschreibung\r\n     */\r\n    set text(text: string) {\r\n        if (this.ensureTextValidation(text)) {\r\n            this._text = text;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Erzeugt eine Kurzbeschreibung dabei kann wahlweise direkt der Text mitgegeben werden,\r\n     * der in der Kurzbeschreibung stehen soll.\r\n     * @param text\r\n     */\r\n    constructor(text?: string) {\r\n        if (this.ensureTextValidation(text)) {\r\n            this._text = text;\r\n        }\r\n    }\r\n\r\n    private ensureTextValidation(toValidate: string): boolean {\r\n        if (toValidate.length > maxLength) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ObservableArray } from '@nativescript/core';\r\nimport { KeyData } from '@src/app/Model/Study/KeyData';\r\n\r\n\r\n@Component({\r\n  selector: 'app-participated-studies',\r\n  templateUrl: './participated-studies.component.html',\r\n  styleUrls: ['./participated-studies.component.css']\r\n})\r\nexport class ParticipatedStudiesComponent implements OnInit {\r\n\r\n  private _exampleStudieListItems: ObservableArray<KeyData>;\r\n\r\n  get exampleStudieListItems(): ObservableArray<KeyData> {\r\n    return this._exampleStudieListItems;\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  constructor() { }\r\n\r\n}\r\n\r\n","export default \"<mat-toolbar>\\r\\n    <img src=\\\"assets/images/Icon.png\\\" style=\\\"height: 4vh;\\\" />\\r\\n    <span>&nbsp;&nbsp;VibroStudies</span>\\r\\n    <span class=\\\"flexExpand\\\"></span>\\r\\n    <a class=\\\"helpButton\\\" mat-flat-button href=\\\"https://www.youtube.com/watch?v=RfdquOH7AxI\\\" target=\\\"_blank\\\">\\r\\n        <mat-icon>help</mat-icon>&nbsp;Hilfe\\r\\n    </a>\\r\\n</mat-toolbar>\\r\\n<mat-sidenav-container>\\r\\n    <mat-sidenav opened mode=\\\"side\\\">\\r\\n        <mat-nav-list><br>\\r\\n            <div style=\\\"margin-left: 15px;\\\">\\r\\n                <h2>Hallo {{ this.authService.getUser().firstName }}!&nbsp;<mat-icon\\r\\n                        style=\\\"position:relative;top: 5px;\\\">emoji_people</mat-icon>\\r\\n                </h2>\\r\\n            </div>\\r\\n            <mat-divider></mat-divider>\\r\\n            <a mat-list-item [routerLink]=\\\"['profile']\\\">\\r\\n                <mat-icon>person</mat-icon>&nbsp;Profil\\r\\n            </a>\\r\\n            <div *ngIf=\\\"this.authService.getUser().permission != 0\\\">\\r\\n                <mat-divider></mat-divider>\\r\\n                <a mat-list-item [routerLink]=\\\"['my-studies']\\\">\\r\\n                    <mat-icon>question_answer</mat-icon>&nbsp;Meine Studien\\r\\n                </a>\\r\\n            </div>\\r\\n            <mat-divider></mat-divider>\\r\\n\\r\\n            <div class=\\\"bottomrow\\\">\\r\\n                <mat-divider></mat-divider>\\r\\n                <a mat-list-item (click)=\\\"logout()\\\" class>\\r\\n                    <mat-icon>exit_to_app</mat-icon>&nbsp;Abmelden\\r\\n                </a>\\r\\n            </div>\\r\\n\\r\\n        </mat-nav-list>\\r\\n    </mat-sidenav>\\r\\n    <mat-sidenav-content>\\r\\n        <router-outlet></router-outlet>\\r\\n        <br><br>\\r\\n    </mat-sidenav-content>\\r\\n</mat-sidenav-container>\";","import { ReferenceTuple } from \"../ReferenceTuple\";\r\nimport { ReferenceTupleMembershipVerifier } from \"../ReferenceTupleMembershipVerifier\";\r\nimport { RandomizingStrategies } from \"../../Randomizing/RandomizingStrategies\";\r\nimport { AbstractStudyObject } from \"./AbstractStudyObject\";\r\n\r\n/**\r\n * Ein SectionElement bezeichnet einen allgemeinen Container, in den man,\r\n * abhängig von der konkreten Unterklasse, nur bestimmte Studienobjekte einfügen kann.\r\n */\r\nexport class SectionElement extends AbstractStudyObject{\r\n\r\n  /**\r\n   * Der verifier wird verwendet um Objekte anhand ihrer id ihren ContainerObjekten zuzuordnen.\r\n   */\r\n  private _verifier: ReferenceTupleMembershipVerifier;\r\n  get verifier(): ReferenceTupleMembershipVerifier {\r\n    return this._verifier;\r\n  }\r\n  set verifier(verifier: ReferenceTupleMembershipVerifier) {\r\n    this._verifier = verifier;\r\n  }\r\n\r\n  /**\r\n   * Das Attribut gibt an, ob ein SectionElement für den Studienteilnehmer überspringbar sein soll.\r\n   */\r\n  private _skippable = false;\r\n  get skippable(): boolean {\r\n    return this._skippable;\r\n  }\r\n  set skippable(skippable: boolean) {\r\n    if (skippable == null) {\r\n      throw new Error(\"Skippable darf nicht null sein.\");\r\n    }\r\n    this._skippable = skippable;\r\n  }\r\n\r\n  /**\r\n   * In dem Attribut sind mittels ID Referenzen auf jene Elemente gespeichert, die innerhalb eines SectionElements liegen.\r\n   */\r\n  private _studyObjects: ReferenceTuple[] = [];\r\n  get studyObjects(): ReferenceTuple[] {\r\n    return this._studyObjects;\r\n  }\r\n  set studyObjects(studyObjects: ReferenceTuple[]) {\r\n    this._studyObjects = studyObjects;\r\n  }\r\n\r\n  /**\r\n   * Das Attribut gibt an, welcher Algorithmus für die Randomisierung über die Elemente, die in einer Section liegen verwendet wird\r\n   */\r\n  private _randomStrategy: RandomizingStrategies;\r\n  get randomStrategy(): RandomizingStrategies {\r\n    return this._randomStrategy;\r\n  }\r\n  set randomStrategy(randomStrategy: RandomizingStrategies) {\r\n    if (randomStrategy == null) {\r\n      throw new Error(\"RandomStrategy darf nicht null sein.\");\r\n    }\r\n    this._randomStrategy = randomStrategy;\r\n  }\r\n\r\n  /**\r\n   * Das Attribut gibt an, ob ein SectionElement in die Ergebnisauswertung miteinbezogen wird.\r\n   */\r\n  private _resultRelevant = true;\r\n  get resultRelevant (): boolean {\r\n    return this._resultRelevant;\r\n  }\r\n  set resultRelevant(resultRelevant: boolean) {\r\n    if (resultRelevant == null) {\r\n      throw new Error(\"ResultRelevant darf nicht null sein.\");\r\n    }\r\n    this._resultRelevant = resultRelevant;\r\n  }\r\n\r\n  /**\r\n   * Ein Attribut, was nicht als Parameter übergeben wird, ist studyObjects. Dieses ist eine\r\n   * AbstractStudyObjectProduct-Liste, das die vom Studienleiter in das Section-Element eingefügten Studienobjekte enthält\r\n   *\r\n   * @param name ist der Name des Section-Elements\r\n   * @param fixed entscheidet, ob das Section-Element eine feste Position in einer Section hat oder die\r\n   * Position von Studieninstanz zu Studieninstanz mit Hilfe von Randomisierung variiert\r\n   */\r\n  constructor(id: number, name: string, displayName: string, randomStrategy: RandomizingStrategies, studyObjects?: ReferenceTuple[],\r\n    verifier?: ReferenceTupleMembershipVerifier) {\r\n    super(id, name, displayName);\r\n    if (studyObjects == null) {\r\n      this._studyObjects = [];\r\n    } else {\r\n      this._studyObjects = studyObjects;\r\n    }\r\n    this._verifier = verifier;\r\n    this._randomStrategy = randomStrategy;\r\n  }\r\n\r\n  /**\r\n   * Die Methode tauscht ein StudyObject an den angegebenen Index.\r\n   * @Deprecated\r\n   * @param oldIndex ist der Index, an dem das StudyObject liegt.\r\n   * @param newIndex ist der gewünschte Index, an dem das StudyObject liegen soll.\r\n   * @throws RangeError, wenn der Index außerhalb des Bereiches der Liste war.\r\n   */\r\n  swapStudyObject(oldIndex: number, newIndex: number): void {\r\n    const highestIndex = (this.studyObjects.length - 1);\r\n\r\n    if (oldIndex > highestIndex || newIndex > highestIndex\r\n      || oldIndex < 0 || newIndex < 0) {\r\n      throw new RangeError(\"Index liegt außerhalb des Bereich.\");\r\n    }\r\n\r\n    const temp = this._studyObjects[oldIndex];\r\n    this._studyObjects[oldIndex] = this._studyObjects[newIndex];\r\n    this._studyObjects[newIndex] = temp;\r\n  }\r\n\r\n/**\r\n * Löscht ein StudyObject.\r\n * @Deprecated\r\n * @param id ist die ID des zu löschenden Objektes.\r\n */\r\n  removeStudyObject(id: number): void {\r\n    this.studyObjects = this.studyObjects.filter(element => element.ID !== id);\r\n  }\r\n\r\n  /**\r\n   * Fügt ein StudyObject hinzu.\r\n   * @Deprecated\r\n   * @param studyObject ist die Referenz auf das StudyObject, das hinzugefügt werden soll.\r\n   * @param index ist die Stelle, an die das Objekt hinzugefügt werden soll. Bei null wird es am Ende der Liste hinzugefügt.\r\n   */\r\n  addStudyObject(studyObject: ReferenceTuple, index?: number): void {\r\n    if (index == null) {\r\n      this.studyObjects.push(studyObject);\r\n    } else if (this.studyObjects == null && index === 0) {\r\n      this.studyObjects.push(studyObject);\r\n    } else if (this.studyObjects == null && index !== 0) {\r\n      throw new Error(\"Index des Section Elements fehlerhaft!\");\r\n    } else if (0 <= index && index <= this.studyObjects.length) {\r\n      this.studyObjects.splice(index, 0, studyObject);\r\n    } else {\r\n      throw new Error(\"Index des Section Elements fehlerhaft!\");\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Ein ReferenceTuple liegt in einer Container Objekt und speichert die ID des Elements,\r\n * welches dem Container zugeordnet werden soll, sowie die Information, ob das entspechende \r\n * Objekt bei einer Randomisierung des Containers seine Position behalten soll.\r\n */\r\nexport class ReferenceTuple {\r\n    /**\r\n     * ID des Objekts, dass dem Container zugeordnet wird.\r\n     */\r\n    private _ID: number;\r\n    get ID(): number {\r\n        return this._ID;\r\n    }\r\n    set ID(ID: number) {\r\n        this._ID = ID;\r\n    }\r\n\r\n    /**\r\n     * Information, ob Objekt bei Randomisierung des Containers seine Position behaöten soll.\r\n     */\r\n    private _isFixed: boolean;\r\n    get isFixed(): boolean {\r\n        return this._isFixed;\r\n    }\r\n    set isFixed(isFixed: boolean) {\r\n        this._isFixed = isFixed;\r\n    }\r\n\r\n    constructor(ID: number, isFixed: boolean) {\r\n        this._ID = ID;\r\n        this._isFixed = isFixed;\r\n    }\r\n}\r\n","export default \"mat-sidenav-container {\\r\\n    height: 94vh;\\r\\n}\\r\\n\\r\\nmat-sidenav-content {\\r\\n    padding: 15px;\\r\\n}\\r\\n\\r\\nmat-sidenav {\\r\\n    width: 13vw;\\r\\n}\\r\\n\\r\\nmat-toolbar {\\r\\n    height: 6vh;\\r\\n}\\r\\n\\r\\n.bottomrow {\\r\\n    position: absolute;\\r\\n    bottom: 0;\\r\\n    left: 0;\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\n.flexExpand {\\r\\n    flex: 1 1 auto;\\r\\n  }\\r\\n\\r\\n.helpButton {\\r\\n    background-color: #3e753b;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi9zdHVkeWNyZWF0aW9uLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixTQUFTO0lBQ1QsT0FBTztJQUNQLFdBQVc7QUFDZjs7QUFFQTtJQUNJLGNBQWM7RUFDaEI7O0FBRUY7SUFDSSx5QkFBeUI7QUFDN0IiLCJmaWxlIjoic3JjL2FwcC9zdHVkeWNyZWF0aW9uL3N0dWR5Y3JlYXRpb24uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIm1hdC1zaWRlbmF2LWNvbnRhaW5lciB7XHJcbiAgICBoZWlnaHQ6IDk0dmg7XHJcbn1cclxuXHJcbm1hdC1zaWRlbmF2LWNvbnRlbnQge1xyXG4gICAgcGFkZGluZzogMTVweDtcclxufVxyXG5cclxubWF0LXNpZGVuYXYge1xyXG4gICAgd2lkdGg6IDEzdnc7XHJcbn1cclxuXHJcbm1hdC10b29sYmFyIHtcclxuICAgIGhlaWdodDogNnZoO1xyXG59XHJcblxyXG4uYm90dG9tcm93IHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGJvdHRvbTogMDtcclxuICAgIGxlZnQ6IDA7XHJcbiAgICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuLmZsZXhFeHBhbmQge1xyXG4gICAgZmxleDogMSAxIGF1dG87XHJcbiAgfVxyXG4gIFxyXG4uaGVscEJ1dHRvbiB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2U3NTNiO1xyXG59Il19 */\";","export default \".full-page {\\r\\n    height: 100%;\\r\\n    display: flex;\\r\\n  }\\r\\n  \\r\\n  .login-card {\\r\\n    margin: auto;\\r\\n    width: 350px;\\r\\n  }\\r\\n  \\r\\n  .login-field {\\r\\n    width: 100%;\\r\\n  }\\r\\n  \\r\\n  mat-card {\\r\\n    padding: 50px;\\r\\n}\\r\\n  \\r\\n  .header {\\r\\n  font-size: 18px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGFzaGJvYXJkL3Byb2ZpbGUvcHJvZmlsZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksWUFBWTtJQUNaLGFBQWE7RUFDZjs7RUFFQTtJQUNFLFlBQVk7SUFDWixZQUFZO0VBQ2Q7O0VBRUE7SUFDRSxXQUFXO0VBQ2I7O0VBRUY7SUFDSSxhQUFhO0FBQ2pCOztFQUVBO0VBQ0UsZUFBZTtBQUNqQiIsImZpbGUiOiJzcmMvYXBwL2Rhc2hib2FyZC9wcm9maWxlL3Byb2ZpbGUuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5mdWxsLXBhZ2Uge1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICB9XHJcbiAgXHJcbiAgLmxvZ2luLWNhcmQge1xyXG4gICAgbWFyZ2luOiBhdXRvO1xyXG4gICAgd2lkdGg6IDM1MHB4O1xyXG4gIH1cclxuICBcclxuICAubG9naW4tZmllbGQge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfVxyXG5cclxubWF0LWNhcmQge1xyXG4gICAgcGFkZGluZzogNTBweDtcclxufVxyXG5cclxuLmhlYWRlciB7XHJcbiAgZm9udC1zaXplOiAxOHB4O1xyXG59Il19 */\";","import { User } from \"./User\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { EMail } from \"./EMail\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { AppSettings } from \"@src/app/app-settings\";\r\nimport { AuthService } from \"@src/app/services/auth/auth.service\";\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\n/**\r\n * Das UserDAO ist für den Zugriff auf die User Objekte in der Datenbank verantwortlich.\r\n */\r\nexport class UserDao {\r\n    userURL: string = AppSettings.baseURL + \"User/\";\r\n\r\n    constructor(private http: HttpClient, private authService: AuthService) { }\r\n\r\n    /**\r\n     * Die Methode gibt asynchron ein User Objekt zurück, welches eindeutig durch die id identifiziert wird.\r\n     * @param id number ist die ID des Users, der aus der Datenbank geholt werden soll\r\n     */\r\n    async get(id: number): Promise<User> {\r\n        let user: User;\r\n\r\n        await this.http.post(this.userURL + id + \"/\", { token: this.authService.getAuthToken() }).toPromise().then(data => {\r\n            user = new User((data as any).id, (data as any).firstName, (data as any).lastName,\r\n                (data as any).userPermission, new EMail((data as any).email));\r\n        });\r\n\r\n        return user;\r\n    }\r\n\r\n    /**\r\n     * Prüft, ob das gegebene Passwort zum Passwort des User in der Datenbank passt\r\n     * @param userId number ID des User \r\n     * @param password string Passwort das zu prüfen ist\r\n     */\r\n    async checkPassword(userId: number, password: string): Promise<boolean> {\r\n        let result = false;\r\n        await this.http.post(AppSettings.baseURL + \"CheckPassword/\", {\r\n            id: userId,\r\n            password: password,\r\n            token: this.authService.getAuthToken(),\r\n        }).toPromise().then(response => {\r\n            if (response) {\r\n                result = true;\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Die Methode speichert asynchron object in einer Datenbank, welches nachdem es gespeichert wurde wieder mit get aufgerufen werden kann.\r\n     * @param object User ist der Nutzer, der gespeichert werden soll\r\n     * @param oldPassword string altes Passwort des User\r\n     * @param newPassword string neues Passwort des User\r\n     */\r\n    async save(object: User, oldPassword: string, newPassword: string): Promise<boolean> {\r\n        let result = false;\r\n        await this.http.post(AppSettings.baseURL + \"SaveUser/\", {\r\n            id: object.id,\r\n            firstName: object.firstName,\r\n            lastName: object.lastName,\r\n            oldPassword: oldPassword,\r\n            newPassword: newPassword,\r\n            email: object.email.email,\r\n        }).toPromise().then(data => {\r\n            if (data) {\r\n                result = true;\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Löscht das User Objekt object aus der Datenbank.\r\n     * @param object User ist der Nutzer, der gelöscht werden soll\r\n     */\r\n    async delete(object: User): Promise<boolean> {\r\n        let success = false;\r\n        await this.http.post(AppSettings.baseURL + \"DeleteUser/\" + object.id + \"/\", \r\n        { token: this.authService.getAuthToken() }).toPromise().then(data => {\r\n            if (data) {\r\n                success = true;\r\n            }\r\n        });\r\n        return success;\r\n    }\r\n}\r\n","export default \"<h1 mat-dialog-title>Bist du dir sicher?</h1>\\r\\n<div mat-dialog-content>\\r\\n  <p>{{data.message}}</p>\\r\\n</div>\\r\\n<div mat-dialog-actions>\\r\\n  <button mat-button (click)=\\\"onCancel()\\\">Abbrechen</button>\\r\\n  <button mat-button (click)=\\\"onConfirm()\\\">Bestätigen</button>\\r\\n</div>\";","import { AbstractQuestion } from \"./AbstractQuestion\";\r\n\r\n/**\r\n * Ein MultipleChoiceQuestion ist ein Fragenobjekt, das sowohl mehrere Antworten\r\n * anbieten als auch mehrere Antworten akzeptieren kann\r\n */\r\nexport class MultipleChoiceQuestion extends AbstractQuestion {\r\n  objectType = \"MultipleChoiceQuestion\";\r\n\r\n  private _maxChoices: number;\r\n  get maxChoices(): number {\r\n    return this._maxChoices;\r\n  }\r\n  set maxChoices(maxChoices: number) {\r\n    if (maxChoices == null) {\r\n      throw new Error(\"MaxChoices darf nicht null sein.\"); \r\n    }\r\n    if (maxChoices < 1) {\r\n      throw new Error(\"Es muss mindestens eine Antwort angegeben werden können\"); \r\n    }\r\n    this._maxChoices = maxChoices;\r\n  }\r\n\r\n  private _answerOptions: string[];\r\n  get answerOptions(): string[] {\r\n    return this._answerOptions;\r\n  }\r\n\r\n  set answerOptions(answerOptions: string[]) {\r\n    this._answerOptions = answerOptions;\r\n  }\r\n\r\n  /**\r\n   * Ein Attribut, was nicht als Parameter übergeben wird, ist answerOptions. Dieses ist eine\r\n   * String-Liste, dass vorkonfigurierte Antworten enthält\r\n   *\r\n   * Ein weiteres Attribut, was nicht als Parameter übergeben wird, ist answer. Dieses ist eine String-Liste, die\r\n   * die ausgewählten Antwortoptionen als Antwort auf die Frage beinhaltet.\r\n   *\r\n   * @param maxChoices beschreibt die maximale Anzahl an Antworten, die man auf eine Frage geben kann\r\n   * @param questionText ist die Frage, die gestellt werden soll\r\n   * @param id ist die eindeutige Identifikationsnummer des MultipleChoiceQuestions\r\n   * @param fixed entscheidet, ob MultipleChoiceQuestion innerhalb eines Section-Elements eine feste Position hat oder die\r\n   * Position von Studieninstanz zu Studieninstanz mit Hilfe von Randomisierung variiert\r\n   */\r\n  constructor(\r\n    id: number, \r\n    name: string, \r\n    questionText: string, \r\n    displayName: string,\r\n    answerOptions: string[],\r\n    maxChoices: number,\r\n  ) {\r\n    super(id, name, questionText, displayName);\r\n    this.maxChoices = maxChoices;\r\n    this.answerOptions = answerOptions;\r\n    super.answer = [];\r\n  }\r\n}\r\n","import { Component, Injectable, Inject } from '@angular/core';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n\r\nexport interface Message {\r\n    message: string;\r\n}\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ConfirmDialogService {\r\n\r\n    constructor(public dialog: MatDialog) {\r\n    }\r\n\r\n    async openDialog(msg: string): Promise<boolean> {\r\n        let isConfirmed = false;\r\n        const dialogRef = this.dialog.open(DialogTemplate,\r\n            { data: { message: msg } }\r\n        );\r\n        await dialogRef.afterClosed().toPromise().then(result => {\r\n            isConfirmed = result;\r\n        });\r\n        return isConfirmed;\r\n    }\r\n}\r\n\r\n\r\n\r\n@Component({\r\n    selector: 'dialog-template',\r\n    templateUrl: 'dialog-template.html',\r\n})\r\nexport class DialogTemplate {\r\n\r\n    constructor(\r\n        public dialogRef: MatDialogRef<DialogTemplate>, @Inject(MAT_DIALOG_DATA) public data: Message) { }\r\n\r\n    onCancel(): void {\r\n        this.dialogRef.close(false);\r\n    }\r\n\r\n    onConfirm(): void {\r\n        this.dialogRef.close(true);\r\n    }\r\n}\r\n","export default \"<div class=\\\"full-page\\\">\\r\\n    <mat-card class=\\\"login-card\\\">\\r\\n        <mat-card-title style=\\\"text-align: center;\\\">\\r\\n            <img src=\\\"../../assets/images/Icon.png\\\" width=\\\"100\\\"><br><br>\\r\\n            VibroStudies Registrierung\\r\\n        </mat-card-title>\\r\\n        <mat-card-content>\\r\\n            <mat-form-field class=\\\"login-field\\\">\\r\\n                <input matInput placeholder=\\\"Vorname\\\" name=\\\"firstName\\\" [(ngModel)]=\\\"firstName\\\" type=\\\"text\\\"\\r\\n                    (keyup.enter)=\\\"register()\\\" />\\r\\n            </mat-form-field>\\r\\n            <mat-form-field class=\\\"login-field\\\">\\r\\n                <input matInput placeholder=\\\"Nachname\\\" name=\\\"lastName\\\" [(ngModel)]=\\\"lastName\\\" type=\\\"text\\\"\\r\\n                    (keyup.enter)=\\\"register()\\\" />\\r\\n            </mat-form-field>\\r\\n            <mat-form-field class=\\\"login-field\\\">\\r\\n                <input matInput placeholder=\\\"E-Mail\\\" name=\\\"email\\\" [(ngModel)]=\\\"email\\\" type=\\\"email\\\"\\r\\n                    (keyup.enter)=\\\"register()\\\" />\\r\\n            </mat-form-field>\\r\\n            <mat-form-field class=\\\"login-field\\\">\\r\\n                <input matInput placeholder=\\\"Passwort\\\" name=\\\"password\\\" [(ngModel)]=\\\"password\\\" type=\\\"password\\\"\\r\\n                    (keyup.enter)=\\\"register()\\\" />\\r\\n            </mat-form-field>\\r\\n            <mat-form-field class=\\\"login-field\\\">\\r\\n                <input matInput placeholder=\\\"Passwort wiederholen\\\" name=\\\"password\\\" [(ngModel)]=\\\"confirmPassword\\\"\\r\\n                    type=\\\"password\\\" (keyup.enter)=\\\"register()\\\" />\\r\\n            </mat-form-field>\\r\\n        </mat-card-content>\\r\\n        <mat-card-actions>\\r\\n        <div style=\\\"text-align: center\\\">\\r\\n            <button mat-raised-button class=\\\"greenButton\\\" (click)=\\\"register()\\\" type=\\\"submit\\\">\\r\\n                Registrieren\\r\\n            </button>\\r\\n        </div>\\r\\n        </mat-card-actions>\\r\\n        <div style=\\\"text-align: center\\\">\\r\\n            <button mat-flat-button class=\\\"redButton\\\" [routerLink]=\\\"['../login']\\\">Zurück</button>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n</div>\";","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { AuthService } from '@src/app/services/auth/auth.service';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n/**\r\n * Der RoleGuardService ist ein Guard, also für die Navigation der Route innerhalb der Anwendung zuständig.\r\n * Dieser Guard ist für die Identifikation der Rolle des Nutzers zuständig (CREATOR, PARTICIPANT, ADMIN).\r\n * Dazu verwendet es das CanActivate Interface, welches von jedem anderen Guard verwendet wird.\r\n * Nur wenn alle Guards wahr sind, kann auf die gewünschte Ansicht navigiert werden, sonst nicht.\r\n */\r\nexport class RoleGuardService implements CanActivate {\r\n\r\n    /**\r\n     * Konstruktor des RoleGuardService. Darin werden sämtliche Services initialisert,\r\n     * die für den RoleGuardService gebraucht werden.\r\n     * @param authService AuthService Singleton, ist für das Aufrufen des registrierten Nutzers zuständig\r\n     * @param router Router Singleton, zum Routen des Pfads nach Eintritt eines Ereignisses\r\n     */\r\n    constructor(private router: Router, private authService: AuthService) { }\r\n\r\n    /**\r\n     * Die vom Interface zu implementierende Methode, welche den Guard aktiviert oder deaktiviert.\r\n     * @param route ActivatedRouteSnapshot ist der aktuellen Zustand der aktivierten Route \r\n     * @param state RouterSnapshot ist der aktuelle Zustand des Routers\r\n     * @returns Promise<boolean>, je nachdem ob der Nutzer die benötigte Rolle für das Aufrufen der Ansicht besitzt oder nicht.\r\n     */\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot)\r\n    : boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\r\n        if (!this.authService.getUser().permission >= route.data.expectedRole) {\r\n            this.router.navigate([\"login\"], { replaceUrl: true });\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { routes } from \"./dashboard.routes\";\r\n\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class DashboardRoutingModule { }\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2Rhc2hib2FyZC9hdmFpbGFibGUtc3R1ZGllcy9hdmFpbGFibGUtc3R1ZGllcy5jb21wb25lbnQuY3NzIn0= */\";","\r\n/**\r\n * Eine abstrakte Oberklasse für alle Elemente, die eine Studie beinhaltet.\r\n */\r\nexport abstract class AbstractStudyObject {\r\n\r\n  /**\r\n   * Die id ist innerhalb einer Studie ein eindeutiger Identifizierer für Objekte.\r\n   */\r\n  private _id: number;\r\n  get id(): number {\r\n    return this._id;\r\n  }\r\n  set id(id: number) {\r\n    if (id == null) {\r\n      throw new Error(\"Id darf nicht null sein.\");\r\n    }\r\n    this._id = id;\r\n  }\r\n\r\n   /**\r\n   * Der Name eines Objekts ist ein Differenzierungsmerkmal, mit dem einem Objekt eine Bedeutung zugewiesen werden kann.\r\n   */\r\n  private _name: string;\r\n  get name(): string {\r\n    return this._name;\r\n  }\r\n  set name(name: string) {\r\n    this._name = name;\r\n  }\r\n\r\n  private _displayName: string;\r\n  get displayName(): string {\r\n    return this._displayName;\r\n  }\r\n  set displayName(displayName: string) {\r\n    this._displayName = displayName;\r\n  }\r\n\r\n\r\n  /**\r\n   * @param id ist die eindeutige Identifikationsnummer des Studienobjekts\r\n   * @param fixed entscheidet, ob das Studienobjekt innerhalb eines Section-Elements eine feste Position hat oder die\r\n   * Position von Studieninstanz zu Studieninstanz mit Hilfe von Randomisierung variiert\r\n   */\r\n  constructor(id: number, name: string, displayName: string) {\r\n    if (id == null) {\r\n      throw new Error(\"Id darf nicht null sein.\");\r\n    }\r\n    this._id = id;\r\n    this._name = name;\r\n    this._displayName = displayName;\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthService } from '../services/auth/auth.service';\r\nimport { StudyWrapperService } from '../services/study-wrapper/study-wrapper.service';\r\n\r\n@Component({\r\n    selector: 'app-dashboard',\r\n    templateUrl: './dashboard.component.html',\r\n    styleUrls: ['./dashboard.component.css']\r\n})\r\n/**\r\n * Die DashboardComponent enthält die Seitenansicht in der Anwendung.\r\n * Darin sind alle Dienste festgehalten, die invariant zu jeder anderen Sicht (außer der Studienerstellung und -teilnahme) sind.\r\n */\r\nexport class DashboardComponent implements OnInit {\r\n    /**\r\n     * Konstruktor der AvailableStudiesComponent. Darin werden sämtliche Services initialisert,\r\n     * die für die \"Verfügbare Studien\"-Ansicht gebraucht werden.\r\n     * @param authService AuthService Singleton, ist für die Authentifizierung des Nutzers zuständig\r\n     * @param route ActivatedRoute ist die aktivierte Route\r\n     */\r\n    constructor(private studywrapper: StudyWrapperService, public authService: AuthService, public route: ActivatedRoute) { }\r\n\r\n    /**\r\n     * Initialisiert die DashboardComponent.\r\n     */\r\n    async ngOnInit() {\r\n        this.studywrapper.study = undefined;\r\n    }\r\n\r\n    /**\r\n     * Loggt den Nutzer aus der Anwendung aus und navigiert ihn zurück zur Login-Ansicht.\r\n     */\r\n    logout() {\r\n        this.authService.logout();\r\n    }\r\n}\r\n","\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { KeyData } from \"./KeyData\";\r\nimport { ShortDescription } from \"./ShortDescription\";\r\nimport { User } from \"../User/User\";\r\nimport { EMail } from \"../User/EMail\";\r\nimport { AppSettings } from \"@src/app/app-settings\";\r\nimport { UserPermission } from \"../User/UserPermission\";\r\nimport { AuthService } from \"@src/app/services/auth/auth.service\";\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\n/**\r\n * Das KeyDataDAO ist für den Zugriff auf die KeyData Objekte in der Datenbank verantwortlich.\r\n */\r\nexport class KeyDataDao {\r\n    studyURL: string = AppSettings.baseURL + \"Study/\";\r\n    qualiQuestionURL: string = AppSettings.baseURL + \"QualificationQuestion/\";\r\n    userURL: string = AppSettings.baseURL + \"User/\";\r\n\r\n    constructor(private http: HttpClient, private authService: AuthService) { }\r\n\r\n    /**\r\n     * Die Methode gibt asynchron ein KeyData Objekt zurück, welches eindeutig durch die id identifiziert wird.\r\n     * @param userId number ist die ID der KeyData, die aus der Datenbank geholt werden soll\r\n     */\r\n    async getFromUserId(userId: number): Promise<KeyData[]> {\r\n        let keyData: KeyData[] = [];\r\n\r\n        await this.http.post(AppSettings.baseURL + \"MyStudies/\" + userId \r\n        + \"/\", { token: this.authService.getAuthToken() })\r\n        .toPromise()\r\n        .then(studiesResult => {\r\n            for (let element of studiesResult as any) {\r\n                keyData.push(new KeyData(element.id, this.authService.getUser(), element.studyStatus, \r\n                new ShortDescription(element.shortDescription), element.fullDescription, element.isAmplitudeNecessary, element.name));\r\n            }\r\n        });\r\n\r\n        return keyData;\r\n    }\r\n\r\n    /**\r\n     * Liefert alle Studien an denen der Benutzer mit der id userId bereits teilgenommen hat.\r\n     * @param userId number des Users\r\n     */\r\n    async getParticipated(userId: number): Promise<KeyData[]> {\r\n        let result: KeyData[] = [];\r\n\r\n        await this.http.post(AppSettings.baseURL + \"ParticipatedStudies/\" + \r\n        userId + \"/\", { token: this.authService.getAuthToken() })\r\n        .toPromise()\r\n        .then(keyDatas => {\r\n            for (let element of keyDatas as any) {\r\n                result.push(new KeyData(element.id, \r\n                    new User(0, element.author.firstName, element.author.lastName, UserPermission.CREATOR, \r\n                        new EMail(element.author.email)), element.studyStatus, new ShortDescription(element.shortDescription), \r\n                        element.fullDescription, element.isAmplitudeNecessary, element.name));\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Die Methode gibt asynchron eine Liste aller KeyData Objekte zurück, die für einen Benutzer verfügbar sind.\r\n     * @param userId number des Users der die Studien anfordert\r\n     * @param hasAmplitude boolean Info ob der Nutzer eine Amplitudenunterstützung braucht.\r\n     */\r\n    async getAvailableStudies(userId: number, hasAmplitude: boolean): Promise<KeyData[]> {\r\n        let result = [];\r\n        await this.http.post(AppSettings.baseURL + \"AvailableStudies/?userId=\" + userId + \r\n        \"&hasAmplitude=\" + hasAmplitude, { token: this.authService.getAuthToken() }).toPromise().then(availableResult => {\r\n            for (let study of availableResult as any) {\r\n                result.push(new KeyData(study.id, \r\n                    new User(0, study.author.firstName, study.author.lastName, UserPermission.CREATOR, \r\n                        new EMail(study.author.email)), study.studyStatus, study.shortDescription, study.fullDescription, study.amplitudeNecessary, study.name));\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Die Methode aktualisiert den Status einer Studie\r\n     * @param id number ist die Id der Studie deren Status aktualisiert wird\r\n     * @param state number ist der Status auf den aktualisiert wird\r\n     */\r\n    async updateStudyState(id: number, state: number): Promise<boolean> {\r\n        let result = false;\r\n        await this.http.post(AppSettings.baseURL + \"UpdateStudyState/\" + id + \r\n        \"/\", { token: this.authService.getAuthToken(), state: state }).toPromise().then(response => {\r\n            if (response) {\r\n                result = true;\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Löscht das KeyData Objekt object aus der Datenbank.\r\n     * @param id number sind die Schlüsselinformationen, die gelöscht werden sollen\r\n     */\r\n    async delete(id: number): Promise<boolean> {\r\n        let success = false;\r\n        await this.http.post(AppSettings.baseURL + \"DeleteStudy/\" + id \r\n        + \"/\", { token: this.authService.getAuthToken(), id: id }).toPromise().then(result => {\r\n            if (result) {\r\n                success = true;\r\n            }\r\n        });\r\n        return success;\r\n    }\r\n}\r\n","import { Routes } from '@angular/router';\r\nimport { DashboardComponent } from './dashboard/dashboard.component';\r\nimport { AuthGuardService } from './guards/auth/auth-guard.service';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { StudyCreationComponent } from './studycreation/studycreation.component';\r\n\r\nexport const routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: '/login',\r\n    pathMatch: 'full',\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginComponent,\r\n  },\r\n  {\r\n    path: \"register\",\r\n    component: RegisterComponent,\r\n  },\r\n  {\r\n    path: \"dashboard\",\r\n    component: DashboardComponent,\r\n    canActivate: [AuthGuardService],\r\n    loadChildren: () => import(\"@src/app/dashboard/dashboard.module\").then(m => m.DashboardModule)\r\n  },\r\n  {\r\n    path: \"studycreation\",\r\n    component: StudyCreationComponent,\r\n    canActivate: [AuthGuardService],\r\n    loadChildren: () => import(\"@src/app/studycreation/studycreation.module\").then(m => m.StudycreationModule)\r\n  },\r\n\r\n];\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AppSettingsService } from './services/app-settings/app-settings.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n  constructor(private appSettingsService: AppSettingsService) {\r\n\r\n  }\r\n  \r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DashboardRoutingModule } from '@src/app/dashboard/dashboard-routing.module';\r\nimport { MaterialModule } from '@src/material.module';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MyStudiesComponent } from '@src/app/dashboard/my-studies/my-studies.component';\r\nimport { AvailableStudiesComponent } from '@src/app/dashboard/available-studies/available-studies.component';\r\nimport { ParticipatedStudiesComponent } from '@src/app/dashboard/participated-studies/participated-studies.component';\r\nimport { ProfileComponent } from './profile/profile.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ProfileComponent, \r\n    MyStudiesComponent, \r\n    AvailableStudiesComponent, \r\n    ParticipatedStudiesComponent],\r\n  imports: [\r\n    CommonModule,\r\n    DashboardRoutingModule,\r\n    MaterialModule,\r\n    FormsModule\r\n  ]\r\n})\r\nexport class DashboardModule { }\r\n","export enum RandomizingStrategies {\r\n    NONE, STANDARD\r\n}\r\n","import { AbstractQuestion } from \"./AbstractQuestion\";\r\n\r\n/**\r\n * Ein LinearScaleQuestion ist ein Fragenobjekt, das eine lineare Skala darstellt.\r\n * Auf der Skala können nur natürliche Zahlen angezeigt werden.\r\n * Es kann nur ein Wert auf der Skala als Antwort ausgewählt werden.\r\n */\r\nexport class LinearScaleQuestion extends AbstractQuestion {\r\n  objectType = \"LinearScaleQuestion\";\r\n\r\n  private _numberOfChoices: number;\r\n  get numberOfChoices(): number {\r\n    return this._numberOfChoices;\r\n  }\r\n  set numberOfChoices(numberOfChoices: number) {\r\n    if (numberOfChoices == null) {\r\n      throw new Error(\"NumberOfChoices darf nicht null sein.\");\r\n    }\r\n    if (numberOfChoices < 2) {\r\n      throw new Error(\"NumberOfChoices muss mindestens 2 sein.\");\r\n    }\r\n    this._numberOfChoices = numberOfChoices;\r\n  }\r\n\r\n\r\n  private _leftLabel: string;\r\n  get leftLabel(): string {\r\n    return this._leftLabel;\r\n  }\r\n  set leftLabel(leftLabel: string) {\r\n    this._leftLabel = leftLabel;\r\n  }\r\n\r\n\r\n  private _rightLabel: string;\r\n  get rightLabel(): string {\r\n    return this._rightLabel;\r\n  }\r\n  set rightLabel(rightLabel: string) {\r\n    this._rightLabel = rightLabel;\r\n  }\r\n\r\n  /**\r\n   * Ein Attribut, was nicht als Parameter übergeben wird, ist answer. Dieses bezeichnet die Wahl\r\n   * auf der Skala als Antwort auf die Frage vom Typ number.\r\n   *\r\n   * @param numberOfChoices bezeichnet das Zahlenintervall, beginnend bei 1 und endet bei numberOfChoices\r\n   * @param leftLabel ist eine Bezeichnung für den Anfang der Skala, z.B. gut\r\n   * @param rightLabel ist eine Bezeichnung für das Ende der Skala, z.B. schlecht\r\n   * @param questionText ist die Frage, die gestellt werden soll\r\n   * @param id ist die eindeutige Identifikationsnummer des LinearScaleQuestions\r\n   * @param fixed entscheidet, ob LinearScaleQuestion innerhalb eines Section-Elements eine feste Position hat oder die\r\n   * Position von Studieninstanz zu Studieninstanz mit Hilfe von Randomisierung variiert\r\n   */\r\n  constructor(\r\n    id: number, \r\n    name: string, \r\n    questionText: string, \r\n    displayName: string,\r\n    numberOfChoices: number,\r\n    leftLabel: string,\r\n    rightLabel: string) {\r\n    super(id, name, questionText, displayName);\r\n    this._numberOfChoices = numberOfChoices;\r\n    this._leftLabel = leftLabel;\r\n    this._rightLabel = rightLabel;\r\n    super.answer = -1;\r\n  }\r\n}\r\n","import { StudyPrototype } from \"./StudyPrototype\";\r\nimport { ReferenceTuple } from \"./ReferenceTuple\";\r\nimport { Types } from \"./Types\";\r\nimport { Section } from \"./StudyObjects/Section\";\r\nimport { AbstractQuestion } from \"./StudyObjects/Questions/AbstractQuestion\";\r\nimport { VibrationPattern } from \"./StudyObjects/VibrationPattern\";\r\nimport { TextBlock } from \"./StudyObjects/TextBlock\";\r\nimport { SectionElement } from \"./StudyObjects/SectionElement\";\r\n\r\n/**\r\n * Der ReferenceTupleMembershipVerifier kann innerhalb einer Studie festellen, welchen\r\n * Typ ein ReferenceTuple hat und das Objekt zurückgeben, welches auf das ReferenceTuple zeigt.\r\n */\r\nexport class ReferenceTupleMembershipVerifier {\r\n    /**\r\n     * Studie auf die sich die ReferenceTuple beziehen, mit denen der Verifier arbeitet.\r\n     */\r\n    private _studyPrototype: StudyPrototype;\r\n    get studyPrototype(): StudyPrototype {\r\n        return this._studyPrototype;\r\n    }\r\n    set studyPrototype(studyPrototype: StudyPrototype) {\r\n        this._studyPrototype = studyPrototype;\r\n    }\r\n\r\n    constructor(studyPrototype: StudyPrototype) {\r\n        this._studyPrototype = studyPrototype;\r\n    }\r\n\r\n    /**\r\n     * Gibt zu ref den Typ des Objekts an, zu dem die ID in ref gehört.\r\n     * @param ref ReferenceTuple ist das Referenztupel zu dem der Typ ermittelt werden soll\r\n     */\r\n    getType(ref: ReferenceTuple): Types {\r\n        let search = this.searchForId(this.studyPrototype.sections, ref); // TODO: entcopypasten\r\n        if (search[1]) {\r\n            return this.assignType(search[0]);\r\n        }\r\n        search = this.searchForId(this.studyPrototype.answeredQuestion, ref);\r\n        if (search[1]) {\r\n            return this.assignType(search[0]);\r\n        }\r\n\r\n        search = this.searchForId(this.studyPrototype.sectionElements, ref);\r\n        if (search[1]) {\r\n            return this.assignType(search[0]);\r\n        }\r\n\r\n        search = this.searchForId(this.studyPrototype.studyObjects, ref);\r\n        if (search[1]) {\r\n            return this.assignType(search[0]);\r\n        }\r\n        throw new Error(\"Element mit der angegebenen ID befindet sich in keiner Liste.\");\r\n    }\r\n\r\n    /**\r\n     * Gibt zu ref das Objekt zurück, zu dem die ID in ref gehört.\r\n     * @param ref ReferenceTuple ist das Referenztupel welches gedowncastet wird\r\n     */\r\n    getObject(ref: ReferenceTuple): any {\r\n        let search = this.searchForId(this.studyPrototype.sections, ref); // TODO: entcopypasten\r\n        if (search[1]) {\r\n            return search[0];\r\n        }\r\n\r\n        search = this.searchForId(this.studyPrototype.answeredQuestion, ref);\r\n        if (search[1]) {\r\n            return search[0];\r\n        }\r\n\r\n        search = this.searchForId(this.studyPrototype.sectionElements, ref);\r\n        if (search[1]) {\r\n            return search[0];\r\n        }\r\n\r\n        search = this.searchForId(this.studyPrototype.studyObjects, ref);\r\n        if (search[1]) {\r\n            return search[0];\r\n        }\r\n        throw new Error(\"Element mit der angegebenen ID befindet sich in keiner Liste.\");\r\n    }\r\n\r\n    private searchForId(list: any[], ref: ReferenceTuple): [any, boolean] {\r\n        if (list == null) {\r\n            return [null, false];\r\n        }\r\n        for (let i = 0; i < list.length; i = i + 1) {\r\n            if (list[i].id === ref.ID) {\r\n                return [list[i], true];\r\n            }\r\n        }\r\n        return [null, false];\r\n    }\r\n\r\n    private assignType(element: any): Types {\r\n        switch (true) {\r\n            case element instanceof SectionElement: {\r\n                return Types.SECTIONELEMENT;\r\n            }\r\n            case element instanceof AbstractQuestion: {\r\n                return Types.QUESTION;\r\n            }\r\n            case element instanceof TextBlock: {\r\n                return Types.TEXT;\r\n            }\r\n            case element instanceof Section: {\r\n                return Types.SECTION;\r\n            }\r\n            case element instanceof VibrationPattern: {\r\n                return Types.VIBRATIONPATTERN;\r\n            }\r\n            default: {\r\n                throw new Error(\"Kein passender Typ gefunden.\");\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n","export default \"mat-sidenav-container {\\r\\n    height: 94vh;\\r\\n  }\\r\\n  \\r\\n  mat-sidenav-content {\\r\\n    padding: 15px;\\r\\n  }\\r\\n  \\r\\n  mat-sidenav {\\r\\n    width: 250px;\\r\\n  }\\r\\n  \\r\\n  mat-toolbar {\\r\\n    height: 6vh;\\r\\n  }\\r\\n  \\r\\n  .bottomrow {\\r\\n  position: absolute;\\r\\n  bottom: 0;\\r\\n  left: 0;\\r\\n  width: 100%;\\r\\n}\\r\\n  \\r\\n  .flexExpand {\\r\\n  flex: 1 1 auto;\\r\\n}\\r\\n  \\r\\n  .helpButton {\\r\\n  background-color: #3e753b;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGFzaGJvYXJkL2Rhc2hib2FyZC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksWUFBWTtFQUNkOztFQUVBO0lBQ0UsYUFBYTtFQUNmOztFQUVBO0lBQ0UsWUFBWTtFQUNkOztFQUVBO0lBQ0UsV0FBVztFQUNiOztFQUVGO0VBQ0Usa0JBQWtCO0VBQ2xCLFNBQVM7RUFDVCxPQUFPO0VBQ1AsV0FBVztBQUNiOztFQUVBO0VBQ0UsY0FBYztBQUNoQjs7RUFFQTtFQUNFLHlCQUF5QjtBQUMzQiIsImZpbGUiOiJzcmMvYXBwL2Rhc2hib2FyZC9kYXNoYm9hcmQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIm1hdC1zaWRlbmF2LWNvbnRhaW5lciB7XHJcbiAgICBoZWlnaHQ6IDk0dmg7XHJcbiAgfVxyXG4gIFxyXG4gIG1hdC1zaWRlbmF2LWNvbnRlbnQge1xyXG4gICAgcGFkZGluZzogMTVweDtcclxuICB9XHJcbiAgXHJcbiAgbWF0LXNpZGVuYXYge1xyXG4gICAgd2lkdGg6IDI1MHB4O1xyXG4gIH1cclxuICBcclxuICBtYXQtdG9vbGJhciB7XHJcbiAgICBoZWlnaHQ6IDZ2aDtcclxuICB9XHJcbiAgXHJcbi5ib3R0b21yb3cge1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBib3R0b206IDA7XHJcbiAgbGVmdDogMDtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuLmZsZXhFeHBhbmQge1xyXG4gIGZsZXg6IDEgMSBhdXRvO1xyXG59XHJcblxyXG4uaGVscEJ1dHRvbiB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogIzNlNzUzYjtcclxufSJdfQ== */\";","export default \"<router-outlet></router-outlet>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2Rhc2hib2FyZC9wYXJ0aWNpcGF0ZWQtc3R1ZGllcy9wYXJ0aWNpcGF0ZWQtc3R1ZGllcy5jb21wb25lbnQuY3NzIn0= */\";","import { Routes } from \"@angular/router\";\r\nimport { AuthGuardService } from \"../guards/auth/auth-guard.service\";\r\nimport { RoleGuardService } from \"../guards/role/role-guard.service\";\r\nimport { UserPermission } from \"../Model/User/UserPermission\";\r\nimport { AvailableStudiesComponent } from \"./available-studies/available-studies.component\";\r\nimport { MyStudiesComponent } from \"./my-studies/my-studies.component\";\r\nimport { ParticipatedStudiesComponent } from \"./participated-studies/participated-studies.component\";\r\nimport { ProfileComponent } from \"./profile/profile.component\";\r\n\r\nexport const routes: Routes = [\r\n    {\r\n        path: \"\",\r\n        redirectTo: \"my-studies\",\r\n        pathMatch: \"full\"\r\n    },\r\n    {\r\n        path: \"profile\",\r\n        component: ProfileComponent,\r\n        canActivate: [AuthGuardService],\r\n    },\r\n    {\r\n        path: \"my-studies\",\r\n        component: MyStudiesComponent,\r\n        canActivate: [RoleGuardService, AuthGuardService],\r\n        data: {\r\n            expectedRole: UserPermission.CREATOR,\r\n        }\r\n    },\r\n    {\r\n        path: \"available-studies\",\r\n        component: AvailableStudiesComponent,\r\n        canActivate: [AuthGuardService],\r\n    },\r\n    {\r\n        path: \"participated-studies\",\r\n        component: ParticipatedStudiesComponent,\r\n        canActivate: [AuthGuardService],\r\n    }\r\n];\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { AppRoutingModule } from '@src/app/app-routing.module';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { LoginComponent } from '@src/app/login/login.component';\r\nimport { MaterialModule } from '@src/material.module';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RegisterComponent } from '@src/app/register/register.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { DashboardComponent } from '@src/app/dashboard/dashboard.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { DashboardModule } from '@src/app/dashboard/dashboard.module';\r\nimport { StudyCreationComponent } from '@src/app/studycreation/studycreation.component';\r\nimport { AppComponent } from './app.component';\r\nimport { DialogTemplate } from '@src/app/services/dialogs/confirmDialog.service';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    DashboardComponent,\r\n    StudyCreationComponent,\r\n    DialogTemplate,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    MaterialModule,\r\n    FormsModule,\r\n    RouterModule,\r\n    HttpClientModule,\r\n    DashboardModule,\r\n    MatDialogModule,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent],\r\n  entryComponents: [\r\n    DialogTemplate\r\n  ]\r\n})\r\nexport class AppModule { }\r\n","export default \"<mat-card>\\r\\n    <mat-card-title class=\\\"header\\\">\\r\\n        Accountdaten\\r\\n    </mat-card-title><br>\\r\\n    <mat-divider></mat-divider><br><br>\\r\\n    <mat-card-content>\\r\\n        <mat-form-field class=\\\"login-field\\\">\\r\\n            <input matInput placeholder=\\\"Vorname\\\" name=\\\"firstName\\\" [(ngModel)]=\\\"this.user.firstName\\\" type=\\\"text\\\" />\\r\\n        </mat-form-field>\\r\\n        <mat-form-field class=\\\"login-field\\\">\\r\\n            <input matInput placeholder=\\\"Nachname\\\" name=\\\"lastName\\\" [(ngModel)]=\\\"this.user.lastName\\\" type=\\\"text\\\" />\\r\\n        </mat-form-field>\\r\\n        <mat-form-field class=\\\"login-field\\\">\\r\\n            <input matInput placeholder=\\\"E-Mail\\\" name=\\\"email\\\" [(ngModel)]=\\\"this.user.email.email\\\" type=\\\"email\\\" />\\r\\n        </mat-form-field>\\r\\n        <mat-form-field class=\\\"login-field\\\">\\r\\n            <input matInput placeholder=\\\"Vorheriges Passwort\\\" name=\\\"oldPassword\\\" [(ngModel)]=\\\"this.oldPassword\\\" type=\\\"password\\\" />\\r\\n        </mat-form-field>\\r\\n    </mat-card-content>\\r\\n    <button mat-flat-button class=\\\"greenButton\\\" (click)=\\\"saveUser()\\\">Speichern</button>\\r\\n</mat-card>\\r\\n<br>\\r\\n<mat-card>\\r\\n    <mat-card-title class=\\\"header\\\">\\r\\n        Passwort ändern\\r\\n    </mat-card-title><br>\\r\\n    <mat-divider></mat-divider><br><br>\\r\\n    <mat-card-content>\\r\\n        <mat-form-field class=\\\"login-field\\\">\\r\\n            <input matInput placeholder=\\\"Vorheriges Passwort\\\" name=\\\"oldPassword\\\" [(ngModel)]=\\\"this.oldPassword\\\" type=\\\"password\\\" />\\r\\n        </mat-form-field>\\r\\n        <mat-form-field class=\\\"login-field\\\">\\r\\n            <input matInput placeholder=\\\"Neues Passwort\\\" name=\\\"newPassword\\\" [(ngModel)]=\\\"this.newPassword\\\" type=\\\"password\\\" />\\r\\n        </mat-form-field>\\r\\n        <mat-form-field class=\\\"login-field\\\">\\r\\n            <input matInput placeholder=\\\"Neues Passwort erneut eingeben\\\" name=\\\"newPasswordRepeat\\\" [(ngModel)]=\\\"this.newPasswordRepeat\\\" type=\\\"password\\\" />\\r\\n        </mat-form-field>\\r\\n    </mat-card-content>\\r\\n    <button mat-flat-button class=\\\"greenButton\\\" (click)=\\\"savePassword()\\\">Speichern</button>\\r\\n</mat-card>\\r\\n<br>\\r\\n<!--<mat-card>\\r\\n    <mat-card-title>\\r\\n        Accountrechte\\r\\n    </mat-card-title><br>\\r\\n    <mat-divider></mat-divider><br><br>\\r\\n    <mat-card-content>\\r\\n\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n<br>-->\\r\\n<mat-card>\\r\\n    <mat-card-title class=\\\"header\\\">\\r\\n        Account löschen\\r\\n    </mat-card-title><br>\\r\\n    <mat-divider></mat-divider><br><br>\\r\\n    <mat-card-content>\\r\\n        <button mat-flat-button class=\\\"redButton\\\" (click)=\\\"deleteUser()\\\">Endgültig löschen</button>\\r\\n    </mat-card-content>\\r\\n</mat-card>\";","export default \"<p>participated-studies works!</p>\\r\\n\";","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { AuthService } from '@src/app/services/auth/auth.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n/**\r\n * Der AuthGuardService ist ein Guard, also für die Navigation der Route innerhalb der Anwendung zuständig.\r\n * Dieser Guard ist für die Authentifizierung des Nutzers zuständig.\r\n * Dazu verwendet es das CanActivate Interface, welches von jedem anderen Guard verwendet wird.\r\n * Nur wenn alle Guards wahr sind, kann auf die gewünschte Ansicht navigiert werden, sonst nicht.\r\n */\r\nexport class AuthGuardService implements CanActivate {\r\n\r\n    /**\r\n     * Konstruktor des AuthGuardService. Darin werden sämtliche Services initialisert,\r\n     * die für den AuthGuardService gebraucht werden.\r\n     * @param authService AuthService Singleton, ist für die Authentifizierung des Nutzers zuständig\r\n     * @param router Router Singleton, zum Routen des Pfads nach Eintritt eines Ereignisses\r\n     */\r\n    constructor(private authService: AuthService, private router: Router) { }\r\n    \r\n    /**\r\n     * Die vom Interface zu implementierende Methode, welche den Guard aktiviert oder deaktiviert.\r\n     * @param route ActivatedRouteSnapshot ist der aktuellen Zustand der aktivierten Route \r\n     * @param state RouterSnapshot ist der aktuelle Zustand des Routers\r\n     * @returns Promise<boolean>, je nachdem ob der Nutzer authentifizierbar ist oder nicht\r\n     */\r\n    async canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\r\n        let isAuthenticated = false;\r\n        await this.authService.isAuthenticated().then(result => isAuthenticated = result);\r\n        if (!isAuthenticated) {\r\n            this.router.navigate([\"login\"], { replaceUrl: true });\r\n            this.authService.clear();\r\n            return isAuthenticated;\r\n        } else {\r\n            return isAuthenticated;\r\n        }\r\n    }\r\n}\r\n","export default \"<p>available-studies works!</p>\\r\\n\";","import { IPrototype } from \"../GenericIPrototype\";\r\nimport { Section } from \"./StudyObjects/Section\";\r\nimport { SectionElement } from \"./StudyObjects/SectionElement\";\r\nimport { AbstractStudyObject } from \"./StudyObjects/AbstractStudyObject\";\r\nimport { MetaData } from \"./MetaData\";\r\nimport { AbstractQuestion } from \"./StudyObjects/Questions/AbstractQuestion\";\r\nimport { ReferenceTuple } from \"./ReferenceTuple\";\r\nimport { RandomizingStrategies } from \"../Randomizing/RandomizingStrategies\";\r\nimport { KeyData } from \"./KeyData\";\r\nimport * as _ from \"lodash\";\r\n\r\n/**\r\n * Die Klasse public class StudyPrototype ist ein Template für die Instanz einer Studie,\r\n *  in der gleichzeitig das Ergebnis nach Ausführung der Studie durch einen User gespeichert wird.\r\n */\r\nexport class StudyPrototype implements IPrototype<StudyPrototype> {\r\n\r\n    /**\r\n     * In diesem Attribut sind alle wichtigen Schlüsselinformationen zu einer Studie enthalten.\r\n     */\r\n    private _keyData: KeyData;\r\n    get keyData(): KeyData {\r\n        return this._keyData;\r\n    }\r\n    set keyData(keyData: KeyData) {\r\n        this._keyData = keyData;\r\n    }\r\n\r\n    /**\r\n     * In diesem Attribut werden die Metadaten des Endgerätes als JSON gespeichert.\r\n     */\r\n    private _metaDataOfDevice: MetaData;\r\n    get metaDataOfDevice(): MetaData {\r\n        return this._metaDataOfDevice;\r\n    }\r\n    set metaDataOfDevice(metaDataOfDevice: MetaData) {\r\n        if (!metaDataOfDevice) {\r\n            throw new Error(\"Parameter darf nicht null sein!\");\r\n        }\r\n        this._metaDataOfDevice = metaDataOfDevice;\r\n    }\r\n\r\n    /**\r\n     * Diese Liste repräsentiert die Reihenfolge in der Sections in der Studienausführung drankommen.\r\n     */\r\n    private _refSections: ReferenceTuple[] = [];\r\n    get refSections(): ReferenceTuple[] {\r\n        return this._refSections;\r\n    }\r\n    set refSections(refSections: ReferenceTuple[]) {\r\n        if (refSections == null) {\r\n            throw new Error(\"RefSections darf nicht null sein!\");\r\n        }\r\n        this._refSections = refSections;\r\n    }\r\n\r\n    /**\r\n     * Enthält alle Sections der Studie.\r\n     */\r\n    private _sections: Section[] = [];\r\n    get sections(): Section[] {\r\n        return this._sections;\r\n    }\r\n    set sections(sections: Section[]) {\r\n        if (!sections) {\r\n            throw new Error(\"Sections darf nicht null sein!\");\r\n        }\r\n        this._sections = sections;\r\n    }\r\n\r\n    /**\r\n     * In dieser Liste werden alle Section Elemente einer Studie gespeichert.\r\n     */\r\n    _sectionElements: SectionElement[] = [];\r\n    get sectionElements(): SectionElement[] {\r\n        return this._sectionElements;\r\n    }\r\n    set sectionElements(sectionElements: SectionElement[]) {\r\n        if (sectionElements == null) {\r\n            throw new Error(\"SectionElements darf nicht null sein!\");\r\n        }\r\n        this._sectionElements = sectionElements;\r\n    }\r\n\r\n    /**\r\n     * In dieser Liste werden bereits erstellte Study Objects einer Studie gepeichert.\r\n     */\r\n    _studyObjects: AbstractStudyObject[] = [];\r\n    get studyObjects(): AbstractStudyObject[] {\r\n        return this._studyObjects;\r\n    }\r\n    set studyObjects(studyObjects: AbstractStudyObject[]) {\r\n        if (studyObjects == null) {\r\n            throw new Error(\"StudyObjects darf nicht null sein!\");\r\n        }\r\n        this._studyObjects = studyObjects;\r\n    }\r\n\r\n    private _answeredQuestion: AbstractQuestion[] = []; // in der Reihenfolge, in der sie bearbeitet wurden\r\n    get answeredQuestion(): AbstractQuestion[] {\r\n        return this._answeredQuestion;\r\n    }\r\n\r\n    /**\r\n     * Enthält die Randomisierungsstrategie welche auf die Liste refSections angewendet wird.\r\n     */\r\n    private _randomStrategy: RandomizingStrategies;\r\n    get randomStrategy(): RandomizingStrategies {\r\n        return this._randomStrategy;\r\n    }\r\n    set randomStrategy(randomStrategy: RandomizingStrategies) {\r\n        this._randomStrategy = randomStrategy;\r\n    }\r\n\r\n    /**\r\n     * Erzeugt einen neuen StudyPrototype\r\n     *\r\n     * @param metaDataOfDevice;\r\n     * @param sections;\r\n     * @param randomStrategy;\r\n     */\r\n    constructor(keyData: KeyData) {\r\n        this._keyData = keyData; \r\n    }\r\n\r\n    /**\r\n     * Erzeugt ein neues Objekt vom Typ StudyPrototype mit den selben Werten wie das aktuelle\r\n     */\r\n    clone(): StudyPrototype {\r\n        return _.cloneDeep(this);\r\n    }\r\n\r\n    addAnsweredQuestion(answer: AbstractQuestion): void {\r\n        this._answeredQuestion.push(answer);\r\n    }\r\n}\r\n","import { ResultTuple } from \"@src/app/Model/Study/Result/ResultTuple\";\r\nimport { User } from \"../../User/User\";\r\nimport { MetaData } from \"../MetaData\";\r\nimport { AbstractQuestion } from \"../StudyObjects/Questions/AbstractQuestion\";\r\n\r\n/**\r\n * Die Klasse enthält die Ausführung einer Studie zu einem Nutzer.\r\n */\r\nexport class UserResultTuple {\r\n    /**\r\n     * Der User der die Studie ausgeführt hat.\r\n     */\r\n    private _user: User;\r\n    get user(): User {\r\n        return this._user;\r\n    }\r\n    set user(user: User) {\r\n        this._user = user;\r\n    }\r\n\r\n    /**\r\n     * Die Fragen und Antworten die gegeben wurden, in der Reihenfolge in der der User die Fragen erhalten hat.\r\n     */\r\n    private _results: AbstractQuestion[];\r\n    get results(): AbstractQuestion[] {\r\n        return this._results;\r\n    }\r\n    set results(results: AbstractQuestion[]) {\r\n        this._results = results;\r\n    }\r\n\r\n    /**\r\n     * Referenzen auf die Fragen mit der orginalen Id aus der Study\r\n     */\r\n    answeredQuestions: ResultTuple[] = [];\r\n\r\n    /**\r\n     * Die MetaDaten die bei der Durchführung der Studie entstanden sind, sowie Daten über das Gerät, auf dem die Studie ausgeführt wurde.\r\n     */\r\n    private _metaData: MetaData;\r\n    get metaData(): MetaData {\r\n        return this._metaData;\r\n    }\r\n    set metaData(metaData: MetaData) {\r\n        this._metaData = metaData;\r\n    }\r\n\r\n    constructor(user: User, results: AbstractQuestion[], metaData: MetaData) {\r\n        this._user = user;\r\n        this._results = results;\r\n        this._metaData = metaData;\r\n    }\r\n}\r\n","export default \"<div class=\\\"full-page\\\">\\r\\n  <mat-card class=\\\"login-card\\\">\\r\\n    <mat-card-title style=\\\"text-align: center;\\\">\\r\\n      <img src=\\\"../../assets/images/Icon.png\\\" width=\\\"100\\\"><br><br>\\r\\n      VibroStudies Login\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n      <mat-form-field class=\\\"login-field\\\">\\r\\n        <input matInput placeholder=\\\"E-Mail\\\" name=\\\"email\\\" [(ngModel)]=\\\"email\\\" type=\\\"email\\\" (keyup.enter)=\\\"login()\\\" />\\r\\n      </mat-form-field>\\r\\n      <mat-form-field class=\\\"login-field\\\">\\r\\n        <input matInput placeholder=\\\"Passwort\\\" name=\\\"password\\\" [(ngModel)]=\\\"password\\\" type=\\\"password\\\"\\r\\n          (keyup.enter)=\\\"login()\\\" />\\r\\n      </mat-form-field>\\r\\n    </mat-card-content>\\r\\n    <mat-card-actions>\\r\\n    <div style=\\\"text-align: center\\\">\\r\\n      <button mat-raised-button class=\\\"greenButton\\\" (click)=\\\"login()\\\" type=\\\"submit\\\">\\r\\n        Login\\r\\n      </button>\\r\\n       </div>\\r\\n    </mat-card-actions>\\r\\n    <mat-divider></mat-divider><br>\\r\\n    <div style=\\\"text-align: center\\\">\\r\\n      <h3>Neu hier?</h3>\\r\\n      <button mat-flat-button class=\\\"redButton\\\" (click)=\\\"toRegister()\\\">Jetzt Registrieren</button>\\r\\n    </div>\\r\\n  </mat-card>\\r\\n</div>\";","export enum StudyStatus {\r\n    /**\r\n     * Die Studie wurde erstellt und ist noch in Bearbeitung also nicht veröffentlicht\r\n     */\r\n    CREATED,\r\n\r\n    /**\r\n     * Die Studie wurde veröffentlicht und Studienteilnehmer können an der Studie teilnehmen\r\n     */\r\n    PUBLISHED,\r\n\r\n    /**\r\n     * Es ist nicht mehr möglich an der Studie teilzunehmen.\r\n     * Der Studienleiter kann nun die Ergebnisse auswerten\r\n     */\r\n    FINISHED\r\n}\r\n","import { AbstractVibrationPatternElement } from \"./AbstractVibrationPatternElement\";\r\n\r\nexport class PauseElement extends AbstractVibrationPatternElement {\r\n  constructor(duration: number) {\r\n    super(duration);\r\n  }\r\n}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { StudyPrototypeDAO } from '../Model/Study/StudyPrototypeDAO.service';\r\nimport { AuthService } from '../services/auth/auth.service';\r\nimport { StorageService } from '../services/storage/storage.service';\r\nimport { StudyWrapperService } from '../services/study-wrapper/study-wrapper.service';\r\n\r\n@Component({\r\n    selector: 'app-studycreation',\r\n    templateUrl: './studycreation.component.html',\r\n    styleUrls: ['./studycreation.component.css']\r\n})\r\nexport class StudyCreationComponent implements OnInit, OnDestroy {\r\n    saving: boolean = false;\r\n\r\n    savingInterval;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        public studywrapper: StudyWrapperService,\r\n        private studyService: StudyPrototypeDAO,\r\n        private authService: AuthService\r\n    ) { }\r\n\r\n    ngOnDestroy() {\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (!this.studywrapper.study) {\r\n            this.router.navigate([\"dashboard\"]);\r\n        } else {\r\n            console.log(JSON.stringify({ study: this.studywrapper.study, token: this.authService.getAuthToken() }));\r\n        }\r\n    }\r\n\r\n    async save() {\r\n        if (!this.saving) {\r\n            this.saving = true;\r\n            await this.studyService.save(this.studywrapper.study).then(result => {\r\n                if (result) {\r\n                    setTimeout(() => {\r\n                        this.saving = false;\r\n                    }, 1000);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n","import { AbstractStudyObject } from \"./AbstractStudyObject\";\r\n\r\n/**\r\n * Ein AbstractVibrationPatternElement ist ein abstraktes Element, aus dem Vibrationen\r\n * erstellt werden können. Die Klasse spezialisiert sich in Pause und VibrationElemente.\r\n */\r\nexport abstract class AbstractVibrationPatternElement {\r\n\r\n  /**\r\n   * Duration gibt an wie lange in Millisekunden der Effekt der ausgeführt wird.\r\n   */\r\n  private _duration: number;\r\n  get duration(): number {\r\n    return this._duration;\r\n  }\r\n  // 2^64 weil long. Long weil es gecastet werden muss\r\n  set duration(duration: number) {\r\n    this.ensure64BitNumber(duration);\r\n    this._duration = duration;\r\n  }\r\n\r\n  /**\r\n   * Dieser Konstruktor prüft, bevor es ein AbstractVibrationPatternElement erstellt, den Paramter duration, da\r\n   * dieser nur Werte zwischen 0 und 2^(64) - 1 annehmen darf.\r\n   * @param duration beschreibt die Dauer in ms\r\n   */\r\n  constructor(duration: number) {\r\n    this.duration = duration;\r\n  }\r\n\r\n  private ensure64BitNumber(duration: number): void {\r\n    if (duration == null) {\r\n      throw new Error(\"Duration darf nicht null sein.\");\r\n    }\r\n    if (!(duration >= 0 && duration < Math.pow(2, 64))) {\r\n      throw new Error(\"Es sind nur positive long Werte, also Werte zwischen 0 und 2^(64) - 1, akzeptiert.\");\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AlertService {\r\n\r\n    constructor(private snackBar: MatSnackBar) { }\r\n\r\n    async alert(message: string): Promise<boolean> {\r\n        let result = false;\r\n        await this.snackBar.open(message, \"Ok\", {panelClass: \"snackbar-style\"}).afterDismissed().toPromise().then(response => {\r\n            if (response.dismissedByAction) {\r\n                result = true;\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n}\r\n","import { AbstractQuestion } from \"./AbstractQuestion\";\r\n\r\n/**\r\n * Ein DateQuestion stellt ein Fragenobjekt dar, bei dem man nur ein Kalenderdatum vom Typ\r\n * Date als Antwort angeben kann.\r\n */\r\nexport class DateQuestion extends AbstractQuestion {\r\n    objectType = \"DateQuestion\";\r\n\r\n    private _start: Date;\r\n    get start(): Date {\r\n        return this._start;\r\n    }\r\n    set start(start: Date) {\r\n        this._start = start;\r\n    }\r\n\r\n    private _end: Date;\r\n    get end(): Date {\r\n        return this._end;\r\n    }\r\n    set end(end: Date) {\r\n        this._end = end;\r\n    }\r\n\r\n    /**\r\n     * Ein Attribut, was nicht als Parameter übergeben wird, ist answer. Dieses bezeichnet die Antwort,\r\n     * die auf die Frage gegeben wird. Die Antwort stellt ein Datum vom Typ Date dar.\r\n     *\r\n     * @param questionText ist die Frage, die gestellt werden soll\r\n     * @param id ist die eindeutige Identifikationsnummer des DateQuestions\r\n     * @param fixed entscheidet, ob DateQuestion innerhalb eines Section-Elements eine feste Position hat oder die\r\n     * Position von Studieninstanz zu Studieninstanz mit Hilfe von Randomisierung variiert\r\n     */\r\n    constructor(id: number, name: string, questionText: string, displayName: string, start?: Date, end?: Date) {\r\n        super(id, name, questionText, displayName);\r\n        this.start = start;\r\n        this.end = end;\r\n        super.answer = \"\";\r\n    }\r\n}\r\n","export default \".full-page {\\r\\n    height: 100%;\\r\\n    display: flex;\\r\\n    background-color: #303030;\\r\\n}\\r\\n\\r\\n.login-card {\\r\\n    margin: auto;\\r\\n    width: 350px;\\r\\n}\\r\\n\\r\\n.login-field {\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\nmat-card {\\r\\n    padding: 50px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7SUFDWixhQUFhO0lBQ2IseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0ksWUFBWTtJQUNaLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxhQUFhO0FBQ2pCIiwiZmlsZSI6InNyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5mdWxsLXBhZ2Uge1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzMDMwMzA7XHJcbn1cclxuXHJcbi5sb2dpbi1jYXJkIHtcclxuICAgIG1hcmdpbjogYXV0bztcclxuICAgIHdpZHRoOiAzNTBweDtcclxufVxyXG5cclxuLmxvZ2luLWZpZWxkIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG5tYXQtY2FyZCB7XHJcbiAgICBwYWRkaW5nOiA1MHB4O1xyXG59Il19 */\";","import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { EMail } from \"../User/EMail\";\r\nimport { User } from \"../User/User\";\r\nimport { KeyData } from \"./KeyData\";\r\nimport { ReferenceTuple } from \"./ReferenceTuple\";\r\nimport { SectionElement } from \"./StudyObjects/SectionElement\";\r\nimport { Section } from \"./StudyObjects/Section\";\r\nimport { ShortDescription } from \"./ShortDescription\";\r\nimport { PauseElement } from \"./StudyObjects/PauseElement\";\r\nimport { DateQuestion } from \"./StudyObjects/Questions/DateQuestion\";\r\nimport { LinearScaleQuestion } from \"./StudyObjects/Questions/LinearScaleQuestion\";\r\nimport { MultipleChoiceQuestion } from \"./StudyObjects/Questions/MultipleChoiceQuestion\";\r\nimport { TextQuestion } from \"./StudyObjects/Questions/TextQuestion\";\r\nimport { TextBlock } from \"./StudyObjects/TextBlock\";\r\nimport { VibrationElement } from \"./StudyObjects/VibrationElement\";\r\nimport { VibrationPattern } from \"./StudyObjects/VibrationPattern\";\r\nimport { StudyPrototype } from \"./StudyPrototype\";\r\nimport { AppSettings } from \"@src/app/app-settings\";\r\nimport { AuthService } from \"@src/app/services/auth/auth.service\";\r\nimport { QualificationQuestion } from \"./StudyObjects/Questions/QualificationQuestion\";\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\n/**\r\n * Das StudyPrototypeDAO ist für den Zugriff auf die StudyPrototype Objekte in der Datenbank verantwortlich.\r\n */\r\nexport class StudyPrototypeDAO {\r\n    studyURL: string = AppSettings.baseURL + \"Study/\";\r\n    qualiQuestionURL: string = AppSettings.baseURL + \"QualificationQuestion/\";\r\n    userURL: string = AppSettings.baseURL + \"User/\";\r\n\r\n\r\n    constructor(private authService: AuthService, private http: HttpClient) { }\r\n\r\n    /**\r\n     * Die Methode gibt asynchron ein StudyPrototype Objekt zurück, welches eindeutig durch die id identifiziert wird.\r\n     * @param id number ist die ID der StudyPrototype, die aus der Datenbank geholt werden soll\r\n     */\r\n    async get(id: number): Promise<StudyPrototype> {\r\n        let study: StudyPrototype;\r\n\r\n        await (this.http.post(AppSettings.baseURL + \"StudyNew/\" + id + \"/\", { token: this.authService.getAuthToken() }) as Observable<StudyPrototype>).toPromise().then(studyResult => {\r\n            let keyData = new KeyData(studyResult.keyData.id,\r\n                new User(studyResult.keyData.author.id,\r\n                    studyResult.keyData.author.firstName,\r\n                    studyResult.keyData.author.lastName,\r\n                    studyResult.keyData.author.permission,\r\n                    new EMail(studyResult.keyData.author.email as any)),\r\n                studyResult.keyData.studyStatus,\r\n                new ShortDescription(studyResult.keyData.shortDescription as any),\r\n                studyResult.keyData.fullDescription,\r\n                studyResult.keyData.amplitudeNecessary,\r\n                studyResult.keyData.name);\r\n\r\n            for (let qualiQuestion of studyResult.keyData.qualiQuestions) {\r\n                let toInsert = new QualificationQuestion(qualiQuestion.id, qualiQuestion.name, qualiQuestion.questionText, qualiQuestion.displayName, qualiQuestion.requiredAnswer);\r\n                keyData.qualiQuestions.push(toInsert);\r\n            }\r\n\r\n            study = new StudyPrototype(keyData);\r\n            study.randomStrategy = studyResult.randomStrategy;\r\n\r\n            let sectionRef = [];\r\n            for (let ref of studyResult.refSections) {\r\n                sectionRef.push(new ReferenceTuple(ref.ID, ref.isFixed));\r\n            }\r\n            study.refSections = sectionRef;\r\n\r\n            let sections = [];\r\n            for (let section of studyResult.sections) {\r\n                let refArray = [];\r\n                for (let ref of section.sectionElements) {\r\n                    refArray.push(new ReferenceTuple(ref.ID, ref.isFixed));\r\n                }\r\n                let toInsert = new Section(section.id, section.name, section.displayName, section.skippable, section.resultRelevant, section.randomStrategy);\r\n                toInsert.sectionElements = refArray;\r\n                sections.push(toInsert);\r\n            }\r\n            study.sections = sections;\r\n\r\n            let sectionElements = [];\r\n            for (let sectionElement of studyResult.sectionElements) {\r\n                let refArray = [];\r\n                for (let ref of sectionElement.studyObjects) {\r\n                    refArray.push(new ReferenceTuple(ref.ID, ref.isFixed));\r\n                }\r\n                sectionElements.push(new SectionElement(sectionElement.id, sectionElement.name, sectionElement.displayName, sectionElement.randomStrategy, refArray));\r\n            }\r\n            study.sectionElements = sectionElements;\r\n\r\n            let studyObjects = [];\r\n            for (let studyObject of (studyResult as any).studyObjects) {\r\n                switch (studyObject.studyObjectTypes) {\r\n                    case 3: // TEXTBLOCK\r\n                        studyObjects.push(new TextBlock(studyObject.id, studyObject.name, studyObject.displayName, studyObject.text));\r\n                        break;\r\n                    case 4: // QUESTION\r\n                        switch (studyObject.questionType) {\r\n                            case 0: // DATE\r\n                                studyObjects.push(new DateQuestion(studyObject.id, studyObject.name,\r\n                                    studyObject.questionText, studyObject.displayName));\r\n                                break;\r\n                            case 1: // LINEAR SCALE\r\n                                studyObjects.push(new LinearScaleQuestion(studyObject.id,\r\n                                    studyObject.name, studyObject.questionText, studyObject.displayName,\r\n                                    studyObject.numberOfChoices, studyObject.leftLabel, studyObject.rightLabel));\r\n                                break;\r\n                            case 2: // MULTIPLE\r\n                                studyObjects.push(new MultipleChoiceQuestion(studyObject.id,\r\n                                    studyObject.name, studyObject.questionText,\r\n                                    studyObject.displayName, studyObject.answerOptions, studyObject.maxChoices));\r\n                                break;\r\n                            case 3: // TEXT\r\n                                studyObjects.push(new TextQuestion(studyObject.id, studyObject.name,\r\n                                    studyObject.questionText, studyObject.displayName));\r\n                                break;\r\n                        }\r\n                        break;\r\n                    case 5: // VIBRATIONPATTERN\r\n                        let vibrationElements = [];\r\n                        for (let vibElement of (studyObject as VibrationPattern).vibrationPatternElements) {\r\n                            if ((vibElement as any).amplitude == 0) {\r\n                                vibrationElements.push(new PauseElement(vibElement.duration));\r\n                            } else {\r\n                                vibrationElements.push(new VibrationElement(vibElement.duration,\r\n                                    (vibElement as VibrationElement).amplitude));\r\n                            }\r\n                        }\r\n                        let vibElement = new VibrationPattern(studyObject.id, studyObject.name, studyObject.displayName);\r\n                        vibElement.vibrationPatternElements = vibrationElements;\r\n                        studyObjects.push(vibElement);\r\n                        break;\r\n                }\r\n            }\r\n            study.studyObjects = studyObjects;\r\n        })\r\n\r\n        return study;\r\n    }\r\n\r\n    /**\r\n     * Die Methode speichert asynchron object in einer Datenbank, welches nachdem es gespeichert wurde wieder mit get aufgerufen werden kann.\r\n     * @param study StudyPrototype ist die Studie, die gespeichert werden soll\r\n     */\r\n    async save(study: StudyPrototype): Promise<number> {\r\n        let id = -1;\r\n        await this.http.post(AppSettings.baseURL + \"SaveStudy/\",\r\n            { study: study, token: this.authService.getAuthToken() }).toPromise().then(result => {\r\n                if (result != -1) {\r\n                    id = result as number;\r\n                }\r\n            });\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Die Methode aktualisiert object mit der Datenbank asynchron anhand seiner id.\r\n     * @param object StudyPrototype ist die Studie, die aktualisiert werden soll\r\n     */\r\n    async update(object: StudyPrototype): Promise<boolean> {\r\n        await this.save(object);\r\n        return true;\r\n    }\r\n\r\n\r\n}\r\n","export enum Types {\r\n    /**\r\n     * Ein SectionElement welches ein Container Objekt für die meisten StudyObjects ist und welches dem Container Section zugeordnet wird\r\n     */\r\n    SECTIONELEMENT,\r\n\r\n    /**\r\n     * Dieser Typ bezieht sich auf die Klasse VibrationPattern, aus der direkt eine Vibration generiert wird.\r\n     */\r\n    VIBRATIONPATTERN,\r\n\r\n    /**\r\n     * Allgemeiner Typ für alle Arten von Fragen\r\n     */\r\n    QUESTION,\r\n\r\n    /**\r\n     * Eine Section ist ein Container Objekt für SectionElements\r\n     */\r\n    SECTION,\r\n\r\n    /**\r\n     * Texte beziehen sich auf die Klasse TextBlock, in welchen nur Texte gespeichert werden\r\n     */\r\n    TEXT\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ReferenceTupleMembershipVerifier } from '@src/app/Model/Study/ReferenceTupleMembershipVerifier';\r\nimport { StudyPrototype } from '@src/app/Model/Study/StudyPrototype';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n/**\r\n * Der StudyWrapperService setzt eine beliebige Studie als Property des Services, sodass man mit dieser\r\n * in der Studienteilnahme, sowie Studienerstellung umgehen kann.\r\n */\r\nexport class StudyWrapperService {\r\n    private _study: StudyPrototype;\r\n    private _lastID: number;\r\n    isDemo: boolean = false;\r\n    /**\r\n     * Ist der ReferenceTupleMembershipVerifier für die jeweilige Studie\r\n     */\r\n    referenceTupleMembershipVerifier: ReferenceTupleMembershipVerifier;\r\n\r\n    get study(): StudyPrototype {\r\n        return this._study;\r\n    }\r\n\r\n    set study(study: StudyPrototype) {\r\n        this._study = study;\r\n        this.referenceTupleMembershipVerifier.studyPrototype = this._study;\r\n        this.lastID = this.getLastID();\r\n    }\r\n\r\n    set lastID(lastID: number) {\r\n        if (lastID == null) {\r\n            throw new Error(\"Setting the last ID to null or undefined is not allowed.\")\r\n        }\r\n        this._lastID = lastID;\r\n    }\r\n\r\n    /**\r\n     * Auf jeden get()-Aufruf wird die aktuelle lastID inkrementiert zurückgegeben.\r\n     */\r\n    get lastID(): number {\r\n        this._lastID += 1;\r\n        return this._lastID;\r\n    }\r\n\r\n    /**\r\n     * Gibt die höchste bzw. letzte ID innerhalb der Menge von Sections, SectionElements, StudyObjects\r\n     * und QualificationQuestions zurück.\r\n     */\r\n    private getLastID(): number {\r\n        let lastID = 0;\r\n        if (this._study) {\r\n\r\n            for (let section of this._study.sections) {\r\n                if (section.id > lastID) {\r\n                    lastID = section.id;\r\n                }\r\n            }\r\n            for (let sectionelement of this._study.sectionElements) {\r\n                if (sectionelement.id > lastID) {\r\n                    lastID = sectionelement.id;\r\n                }\r\n            }\r\n            for (let studyobject of this._study.studyObjects) {\r\n                if (studyobject.id > lastID) {\r\n                    lastID = studyobject.id;\r\n                }\r\n            }\r\n            for (let qualiquestion of this._study.keyData.qualiQuestions) {\r\n                if (qualiquestion.id > lastID) {\r\n                    lastID = qualiquestion.id;\r\n                }\r\n            }\r\n        }\r\n        return lastID;\r\n    }\r\n\r\n    /**\r\n     * Setzt für den StudyWrapperService den ReferenceTupleMembershipVerifier. Dieser war dann undefiniert.\r\n     */\r\n    constructor() {\r\n        this.referenceTupleMembershipVerifier = new ReferenceTupleMembershipVerifier(undefined);\r\n    }\r\n\r\n    /**\r\n     * Holt sich zu einer bestimmten number den Zufallstypen ab.\r\n     * @param value number für den Zufallstypen der zurückgegeben wird\r\n     */\r\n    getRandomizerName(value: number) {\r\n        switch (value) {\r\n            case 0:\r\n                return \"Keine\";\r\n            case 1:\r\n                return \"Einfacher Zufall\";\r\n        }\r\n    }\r\n}\r\n\r\n","import { MultipleChoiceQuestion } from \"./MultipleChoiceQuestion\";\r\nimport { AbstractQuestion } from \"./AbstractQuestion\";\r\n\r\n/**\r\n * Ein QualificationQuestion ist ein Fragenobjekt, das eine Ausschlussfrage modellieren soll\r\n * (als Teilnahmevoraussetzung zu einer Studie). Man kann nur zwei, selbst definierbare,\r\n * Antwortoptionen zur Verfügung stellen. Damit soll eine Ja-Nein-Ausschlussfrage realisiert werden.\r\n * Man kann dann auch nur eine Antwortoption auswählen.\r\n */\r\nexport class QualificationQuestion extends AbstractQuestion {\r\n  /**\r\n   * Ein Attribut, was nicht als Parameter übergeben wird, ist answerOptions. Dieses ist eine\r\n   * String-Liste, dass vorkonfigurierte Antworten enthält\r\n   *\r\n   * Ein weiteres Attribut, was nicht als Parameter übergeben wird, ist answer. Dieses ist ein String, das\r\n   * die ausgewählte Antwortoption als Antwort auf die Frage darstellt.\r\n   *\r\n   * maxChoices ist 1, weil............\r\n   *\r\n   * @param questionText ist die Frage, die gestellt werden soll\r\n   * @param id ist die eindeutige Identifikationsnummer des QualificationQuestions\r\n   * @param fixed entscheidet, ob QualificationQuestion innerhalb eines Section-Elements eine feste Position hat oder die\r\n   * Position von Studieninstanz zu Studieninstanz mit Hilfe von Randomisierung variiert\r\n   */\r\n  constructor(id: number, name: string, questionText: string, displayName: string, requiredAnswer: boolean) {\r\n    super(id, name, questionText, displayName);\r\n    this.requiredAnswer = requiredAnswer;\r\n  }\r\n  \r\n  private _requiredAnswer: boolean;\r\n  get requiredAnswer(): boolean {\r\n    return this._requiredAnswer;\r\n  }\r\n  set requiredAnswer(requiredAnswer: boolean) {\r\n    if (requiredAnswer == null) {\r\n      throw new Error(\"RequiredAnswer darf nicht null sein.\");\r\n    }\r\n    this._requiredAnswer = requiredAnswer;\r\n  }\r\n}\r\n","import { StudyStatus } from \"./StudyStatus\";\r\nimport { User } from \"../User/User\";\r\nimport { ShortDescription } from \"./ShortDescription\";\r\nimport { QualificationQuestion } from \"./StudyObjects/Questions/QualificationQuestion\";\r\n\r\n/**\r\n * Die Klasse public class KeyData enthählt alle wichtigen Schlüsselinformationen die für eine Studie benötigt werden.\r\n */\r\nexport class KeyData {\r\n\r\n    /**\r\n     * Dieses Attribut gibt einer (nicht ausgeführten) Studie eine eindeutige ID um sie von anderen Studien zu unterscheiden. \r\n     */\r\n    private _id: number;\r\n    get id(): number {\r\n        return this._id;\r\n    }\r\n    set id(id: number) {\r\n        this._id = id;\r\n    }\r\n\r\n    /**\r\n     * Dieses Attribut gibt es Autoren einer Studie an.\r\n     */\r\n    private _author: User;\r\n    get author(): User {\r\n        return this._author;\r\n    }\r\n    set author(user: User) {\r\n        this._author = user;\r\n    }\r\n\r\n    /**\r\n     * Dieses Attribut gibt an, ob das Gerät auf dem die Studie ausgeführt wird, die Amplitude unterstützen muss.\r\n     */\r\n    private _amplitudeNecessary: boolean;\r\n    get amplitudeNecessary(): boolean {\r\n        return this._amplitudeNecessary;\r\n    }\r\n    set amplitudeNecessary(amplitudeNecessary: boolean) {\r\n        if (amplitudeNecessary == null) {\r\n            throw new Error(\"Parameter darf nicht null sein!\");\r\n        }\r\n        this._amplitudeNecessary = amplitudeNecessary;\r\n    }\r\n\r\n    /**\r\n     * Dieses Attribut gibt an, in welchem Zustand sich die Studie befindet. Sie kann CREATED,\r\n     * PUBLISHED oder FINISHED sein.\r\n     */\r\n    private _studyStatus: StudyStatus;\r\n    get studyStatus() {\r\n        return this._studyStatus;\r\n    }\r\n    set studyStatus(studyStatus: StudyStatus) {\r\n        if (studyStatus == null) {\r\n            throw new Error(\"Parameter darf nicht null sein!\");\r\n        }\r\n        this._studyStatus = studyStatus;\r\n    }\r\n\r\n    /**\r\n     * Dieses Attribut speichert den Namen der Studie.\r\n     */\r\n    private _name: string;\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n    set name(name: string) {\r\n        if (!name) {\r\n            throw new Error(\"Parameter darf nicht null sein!\");\r\n        }\r\n        this._name = name;\r\n    }\r\n\r\n    /**\r\n     * ShortDescription enthält die Kurzbeschreibung eine Studie \r\n     * welche in der Listenansicht in der alle verfügbaren Studien angezeigt werden sichtbar ist.\r\n     */\r\n    private _shortDescription: ShortDescription;\r\n    get shortDescription(): ShortDescription {\r\n        return this._shortDescription;\r\n    }\r\n    set shortDescription(shortDescription: ShortDescription) {\r\n        this._shortDescription = shortDescription;\r\n    }\r\n\r\n    /**\r\n     * FullDescription enthält die volle Beschreibung einer Studie die dem User beim öffnen einer Studie angezeigt wird.\r\n     */\r\n    private _fullDescription: string;\r\n    get fullDescription(): string {\r\n        return this._fullDescription;\r\n    }\r\n    set fullDescription(fullDescription: string) {\r\n        this._fullDescription = fullDescription;\r\n    }\r\n\r\n    /**\r\n     * Die Liste enthält Ja Nein Fragen die alle korrekt beantwortet werden müssen, bevor ein Nutzer an einer Studie teilnehmen darf.\r\n     */\r\n    private _qualiQuestions: QualificationQuestion[] = [];\r\n    get qualiQuestions(): QualificationQuestion[] {\r\n        return this._qualiQuestions;\r\n    }\r\n    set qualiQuestions(qualiQuestions: QualificationQuestion[]) {\r\n        this._qualiQuestions = qualiQuestions;\r\n    }\r\n\r\n    constructor(id: number,\r\n        author: User,\r\n        studyStatus: StudyStatus,\r\n        shortdescription: ShortDescription,\r\n        fulldescription: string,\r\n        amplitudeNecessary: boolean,\r\n        name: string) {\r\n        this._amplitudeNecessary = amplitudeNecessary;\r\n        this._studyStatus = studyStatus;\r\n        this._id = id;\r\n        this._author = author;\r\n        this._shortDescription = shortdescription;\r\n        this._fullDescription = fulldescription;\r\n        this._name = name;\r\n    }\r\n}\r\n","import { AbstractQuestion } from \"./AbstractQuestion\";\r\n\r\n/**\r\n * Ein TextQuestion ist ein Fragenobjekt, bei dem man als Antwort\r\n * nur einen Text schreiben kann.\r\n */\r\nexport class TextQuestion extends AbstractQuestion {\r\n  objectType = \"TextQuestion\";\r\n\r\n  private _length: number;\r\n  get length(): number {\r\n    return this._length;\r\n  }\r\n  set length(length: number) {\r\n    this._length = length;\r\n  }\r\n\r\n  /**\r\n   * Ein Attribut, was nicht als Parameter übergeben wird, ist answer. Dieses bezeichnet die Antwort,\r\n   * die auf die Frage gegeben wird. Die Antwort stellt einen Text vom Typ string dar.\r\n   *\r\n   * @param questionText ist die Frage, die gestellt werden soll\r\n   * @param id ist die eindeutige Identifikationsnummer des TextQuestions\r\n   * @param fixed entscheidet, ob TextQuestion innerhalb eines Section-Elements eine feste Position hat oder die\r\n   * Position von Studieninstanz zu Studieninstanz mit Hilfe von Randomisierung variiert\r\n   */\r\n  constructor(id: number, name: string, questionText: string, displayName: string, length?: number) {\r\n    super(id, name, questionText, displayName);\r\n    this.length = length;\r\n    super.answer = \"\";\r\n  }\r\n}\r\n","import { UserPermission } from \"./UserPermission\";\r\nimport { EMail } from \"./EMail\";\r\n\r\n/**\r\n * Die Klasse User stellt einen Benutzer da.\r\n */\r\nexport class User {\r\n\r\n    /**\r\n     * Die eindeutige ID eines Benutzers.\r\n     */\r\n    private _id: number;\r\n    get id(): number {\r\n        return this._id;\r\n    }\r\n    set id(id: number ){\r\n        this._id = id;\r\n    }\r\n\r\n    /**\r\n     * Der Vorname des Benutzers\r\n     */\r\n    private _firstName: string;\r\n    get firstName(): string {\r\n        return this._firstName;\r\n    } \r\n    set firstName(firstName: string) {\r\n        if (this.ensureNameValidation(firstName)) {\r\n            this._firstName = firstName;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Der Nachname des Benutzers.\r\n     */\r\n    private _lastName: string;\r\n    get lastName(): string {\r\n        return this._lastName;\r\n    } \r\n    set lastName(lastName: string) {\r\n        if (this.ensureNameValidation(lastName)) {\r\n            this._lastName = lastName;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Die Rechte, die ein Benutzer innerhalb der Vibrostudies Anwendung hat.\r\n     */\r\n    private _permission: UserPermission;\r\n    get permission(): UserPermission {\r\n        return this._permission;\r\n    }\r\n    set permission(permission: UserPermission) {\r\n        if (this.ensurePermissionValidation(permission)) {\r\n            this._permission = permission;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Die EMail Adresse, die der Benutzer angegeben hat.\r\n     */\r\n    private _email: EMail;\r\n    get email(): EMail {\r\n        return this._email;\r\n    }\r\n    set email(email: EMail) {\r\n        this._email = email;\r\n    }\r\n\r\n    /**\r\n     * Ein neuer Benutzer wird erstellt und dabei wird sichergestellt, dass die Parameter gültig sind.\r\n     * @param id \r\n     * @param firstName \r\n     * @param lastName \r\n     * @param permission sagt aus, welche Aktionen ein Benuter durchführen kann\r\n     * @param password \r\n     * @param email \r\n     */\r\n    constructor(id: number, firstName: string, lastName: string, permission: UserPermission, email: EMail) {\r\n\r\n        this.id = id;\r\n\r\n        if (this.ensureNameValidation(firstName)) {\r\n            this.firstName = firstName;\r\n        }\r\n\r\n        if (this.ensureNameValidation(lastName)) {\r\n            this.lastName = lastName;\r\n        }\r\n\r\n        if (this.ensurePermissionValidation(permission)) {\r\n            this.permission = permission;\r\n        }\r\n\r\n        this.email = email;\r\n    }\r\n\r\n    private ensureNameValidation(toValidate: string): boolean {\r\n        if (!toValidate) {\r\n            throw new Error(\"Name kann nicht null oder leer sein.\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private ensurePermissionValidation(permission: UserPermission): boolean {\r\n        if (permission == undefined) {\r\n            throw new Error(\"Userpermission kann nicht null oder leer sein.\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Überprüft, ob der angegebene User toCompare mit dem aktuellen User übereinstimmt.\r\n     * @param toCompare \r\n     */\r\n    equals(toCompare: User): boolean {\r\n        if (this.firstName == toCompare.firstName && this.id == toCompare.id && \r\n            this.lastName == toCompare.lastName && this.permission == toCompare.permission) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","export default \"<mat-toolbar>\\r\\n    <img src=\\\"assets/images/Icon.png\\\" style=\\\"height: 4vh;\\\" />\\r\\n    <span>&nbsp;&nbsp;Neue Studie erstellen</span>\\r\\n    <span class=\\\"flexExpand\\\"></span>\\r\\n    <a class=\\\"helpButton\\\" mat-flat-button href=\\\"https://www.youtube.com/watch?v=RfdquOH7AxI\\\" target=\\\"_blank\\\">\\r\\n        <mat-icon>help</mat-icon>&nbsp;Hilfe\\r\\n    </a>\\r\\n</mat-toolbar>\\r\\n<mat-sidenav-container>\\r\\n    <mat-sidenav opened mode=\\\"side\\\">\\r\\n        <mat-nav-list>\\r\\n            <a mat-list-item [routerLink]=\\\"['general-editing']\\\">\\r\\n                <mat-icon>settings_applications</mat-icon>&nbsp;Allgemein\\r\\n            </a>\\r\\n            <mat-divider></mat-divider>\\r\\n            <a mat-list-item [routerLink]=\\\"['question-editing']\\\">\\r\\n                <mat-icon>speaker_notes</mat-icon>&nbsp;Fragen\\r\\n            </a>\\r\\n            <a mat-list-item [routerLink]=\\\"['textblock-editing']\\\">\\r\\n                <mat-icon>article</mat-icon>&nbsp;Texte\\r\\n            </a>\\r\\n            <a mat-list-item [routerLink]=\\\"['vibrationpattern-editing']\\\">\\r\\n                <mat-icon>vibration</mat-icon>&nbsp;Vibrationsmuster\\r\\n            </a>\\r\\n            <mat-divider></mat-divider>\\r\\n            <a mat-list-item [routerLink]=\\\"['sectionelement-editing']\\\">\\r\\n                <mat-icon>view_carousel</mat-icon>&nbsp;Studienseiten\\r\\n            </a>\\r\\n            <mat-divider></mat-divider>\\r\\n            <a mat-list-item [routerLink]=\\\"['section-editing']\\\">\\r\\n                <mat-icon>receipt</mat-icon>&nbsp;Abschnitte\\r\\n            </a>\\r\\n            <mat-divider></mat-divider>\\r\\n            <a mat-list-item [routerLink]=\\\"['sequence-editing']\\\">\\r\\n                <mat-icon>reorder</mat-icon>&nbsp;Studienablauf\\r\\n            </a>\\r\\n            <mat-divider></mat-divider>\\r\\n\\r\\n            <div class=\\\"bottomrow\\\">\\r\\n                <mat-divider></mat-divider>\\r\\n                <a mat-list-item (click)=\\\"save()\\\">\\r\\n\\r\\n                    <mat-icon>save</mat-icon>&nbsp;Speichern&nbsp;<mat-spinner *ngIf=\\\"this.saving\\\" color=\\\"accent\\\"\\r\\n                        diameter=\\\"25\\\"></mat-spinner>\\r\\n                </a>\\r\\n                <mat-divider></mat-divider>\\r\\n                <a mat-list-item [routerLink]=\\\"['../dashboard/my-studies']\\\">\\r\\n                    <mat-icon>keyboard_backspace</mat-icon>&nbsp;Zurück\\r\\n                </a>\\r\\n            </div>\\r\\n        </mat-nav-list>\\r\\n    </mat-sidenav>\\r\\n    <mat-sidenav-content>\\r\\n        <router-outlet></router-outlet>\\r\\n        <br><br>\\r\\n    </mat-sidenav-content>\\r\\n</mat-sidenav-container>\";","\r\n/**\r\n * Das public enum UserPermission definiert, welche Aktionen ein Benutzer ausführen darf.\r\n */\r\nexport enum UserPermission {\r\n    /**\r\n     * Ein PARTICIPANT kann an einer Studie teilnehmen.\r\n     */\r\n    PARTICIPANT,\r\n    /**\r\n     * Ein CREATOR kann an einer Studie teilnehmen, die nicht von ihm erstellt wurde und eigene Studien erstellen.\r\n     */\r\n    CREATOR,\r\n    /**\r\n     * Ein ADMINISTRATOR kann die Stufe eines Benutzers verändern. Außerdem kann er Studien erstellen und an ihnen teilnehmen.\r\n     */\r\n    ADMINISTRATOR\r\n}\r\n\r\n","import { ReferenceTuple } from \"../ReferenceTuple\";\r\nimport { AbstractStudyObject } from \"./AbstractStudyObject\";\r\nimport { AbstractVibrationPatternElement } from \"./AbstractVibrationPatternElement\";\r\nimport { PauseElement } from \"./PauseElement\";\r\nimport { VibrationElement } from \"./VibrationElement\";\r\n\r\n/**\r\n * Ein VibrationPattern stellt ein Studienobjekt dar, mit dem benutzerdefinierte\r\n * Vibrationsmuster, bestehend aus einstellbaren Pause- und Vibrieren-Elementen, erstellt werden können.\r\n */\r\nexport class VibrationPattern extends AbstractStudyObject {\r\n    objectType = \"VibrationPattern\";\r\n\r\n    /**\r\n     * Das Array enthält die Vibration und PauseElemente aus denen sich eine Vibration zusammensetzt.\r\n     */\r\n    private _vibrationPatternElements: AbstractVibrationPatternElement[];\r\n    get vibrationPatternElements(): AbstractVibrationPatternElement[] {\r\n        return this._vibrationPatternElements;\r\n    }\r\n    set vibrationPatternElements(vibrationPatternElements: AbstractVibrationPatternElement[]) {\r\n        if (vibrationPatternElements == null) {\r\n            throw new Error(\"Die Liste vibrationPatternElements konnte nicht gesetzt werden, da sie undefiniert ist.\");\r\n        }\r\n        this._vibrationPatternElements = vibrationPatternElements;\r\n    }\r\n\r\n    /**\r\n     * Ein Attribut, was nicht als Parameter übergeben wird, ist timings. Dieses ist eine Number-Liste, mit dem ein Vibrationsmuster\r\n     * kodiert wird. Werte in dieser Liste stellen eine Zeitdauer in ms dar. Alle geraden Indizes in der Liste entsprechen\r\n     * einem Pause-Element, wohingegen alle ungeraden Indizes in der Liste einem Vibrieren-Element entsprechen.\r\n     *\r\n     * Ein weiteres Attribut, was nicht als Parameter übergeben wird, ist amplitudes. Dieses bezeichnet eine Number-Liste,\r\n     * das die Amplituden-Werte für die Pause- und Vibrieren-Elemente enthält. Hierbei entspricht der i-te Wert der pattern-Liste\r\n     * dem i-ten Wert der amplitudes-Liste. In diesem Liste können Werte zwischen 0 und 255 vorkommen.\r\n     *\r\n     * @param id ist die eindeutige Identifikationsnummer des VibrationPatterns\r\n     * @param fixed entscheidet, ob das VibrationPattern innerhalb eines Section-Elements eine feste Position hat oder die\r\n     * Position von Studieninstanz zu Studieninstanz mit Hilfe von Randomisierung variiert\r\n     */\r\n    constructor(id: number, name: string, displayName: string) {\r\n        super(id, name, displayName);\r\n        this.vibrationPatternElements = [];\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { routes } from '@src/app/app.routes';\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AlertService } from '../services/alert/alert.service';\r\nimport { AuthService } from '../services/auth/auth.service';\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.css']\r\n})\r\n/**\r\n * Die LoginComponent ist zum Anmelden des Users zuständig. Falls der Nutzer noch nicht\r\n * registriert ist, wird er durch die LoginComponent in die Registrier-Ansicht navigiert.\r\n * Falls er bereits authentifiziert wurde, gelangt er durch Anmeldung automatisch in die Anwendung.\r\n */\r\nexport class LoginComponent implements OnInit {\r\n    /**\r\n     * Das Attribut enthält die E-Mail Adresse des Users der sich einloggen will.\r\n     */\r\n    email = \"\";\r\n    /**\r\n     * Das Attribut enthält das Passwort zur zugehörigen E-Mail Adresse.\r\n     */\r\n    password = \"\";\r\n\r\n    /**\r\n     * Konstruktor der LoginComponent. Darin werden sämtliche Services initialisert,\r\n     * die für das Anmelden gebraucht werden.\r\n     * @param router Router Singleton, zum Routen des Pfads nach Eintritt eines Ereignisses\r\n     * @param authService AuthService Singleton, ist für die Authentifizierung des Nutzers zuständig\r\n     */\r\n    constructor(private router: Router, private authService: AuthService, private alertService: AlertService) { }\r\n\r\n    /**\r\n     * Navigiert zum Dashboard wenn ein User authentifiziert wurde.\r\n     */\r\n    ngOnInit(): void {\r\n        if (this.authService.isAuthenticated()) {\r\n            this.toDashboard();\r\n        }\r\n        this.email = \"\";\r\n        this.password = \"\";\r\n    }\r\n\r\n    /**\r\n     * Loggt einen User mit den Klassenattributen ein.\r\n     */\r\n    async login() {\r\n        if (this.email != \"\" && this.password != \"\" && this.email != undefined && this.password != undefined) {\r\n            await this.authService.login(this.email, this.password).then(result => {\r\n                if (result) {\r\n                    this.toDashboard();\r\n                } else {\r\n                    this.alertService.alert(\"Anmeldung fehlgeschlagen. Überprüfe die eingegebene E-Mail und das Passwort.\");\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Navigiert den User zur Registrierungsansicht.\r\n     */\r\n    toRegister() {\r\n        this.router.navigate([\"register\"], { replaceUrl: true });\r\n    }\r\n\r\n    private toDashboard() {\r\n        this.router.navigate([\"dashboard\"], { replaceUrl: true });\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { CdkTreeModule } from '@angular/cdk/tree';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\n\r\n\r\nconst materialModules = [\r\n  CdkTreeModule,\r\n  MatAutocompleteModule,\r\n  MatButtonModule,\r\n  MatCardModule,\r\n  MatCheckboxModule,\r\n  MatChipsModule,\r\n  MatDividerModule,\r\n  MatExpansionModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatListModule,\r\n  MatMenuModule,\r\n  MatProgressSpinnerModule,\r\n  MatPaginatorModule,\r\n  MatRippleModule,\r\n  MatSelectModule,\r\n  MatSidenavModule,\r\n  MatSnackBarModule,\r\n  MatSortModule,\r\n  MatTableModule,\r\n  MatTabsModule,\r\n  MatToolbarModule,\r\n  MatFormFieldModule,\r\n  MatButtonToggleModule,\r\n  MatTreeModule,\r\n  OverlayModule,\r\n  PortalModule,\r\n  MatSlideToggleModule,\r\n  MatDialogModule\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    ...materialModules\r\n  ],\r\n  exports: [\r\n    ...materialModules\r\n  ],\r\n})\r\nexport class MaterialModule {\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-available-studies',\r\n    templateUrl: './available-studies.component.html',\r\n    styleUrls: ['./available-studies.component.css']\r\n})\r\nexport class AvailableStudiesComponent implements OnInit {\r\n    ngOnInit() {\r\n    }\r\n}\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from '@src/environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n/**\r\n * Der AppSettingsService verwaltet die Speicherung und Bearbeitung\r\n * der App-Einstellungn. Zu diesen Einstellungen zählt, ob das mobile Endgerät vibrieren kann\r\n * und ob sie Amplituden unterstützt.\r\n */\r\nexport class AppSettingsService {\r\n    private _hasVibrator = false;\r\n    private _hasAmplitude = false;\r\n    /**\r\n     * any-Objekt für das Vibrator-Objekt, den man zum Vibrieren des Handys braucht.\r\n     */\r\n    vibrator: any;\r\n\r\n    get hasVibrator(): boolean {\r\n        return this._hasVibrator;\r\n    }\r\n\r\n    set hasVibrator(hasVibrator: boolean) {\r\n        if (hasVibrator == null) {\r\n            throw new Error(\"Setting hasVibrator to null or undefined is not allowed.\");\r\n        }\r\n        this._hasVibrator = hasVibrator;\r\n    }\r\n\r\n    get hasAmplitude(): boolean {\r\n        return this._hasAmplitude;\r\n    }\r\n\r\n    set hasAmplitude(hasAmplitude: boolean) {\r\n        if (hasAmplitude == null) {\r\n            throw new Error(\"Setting hasAmplitude to null or undefined is not allowed.\");\r\n        }\r\n        this._hasAmplitude = hasAmplitude;\r\n    }\r\n\r\n    /**\r\n     * Standardkonstruktor für den AppSettingsService.\r\n     */\r\n    constructor() { }\r\n\r\n}\r\n","import { AbstractStudyObject } from \"../AbstractStudyObject\";\r\n\r\n/**\r\n * Ein AbstractQuestion stellt ein allgemeines Fragenobjekt dar.\r\n */\r\nexport abstract class AbstractQuestion extends AbstractStudyObject {\r\n  private _questionText: string = \"\";\r\n  get questionText(): string {\r\n    return this._questionText;\r\n  }\r\n  set questionText(questionText: string) {\r\n    this._questionText = questionText;\r\n  }\r\n\r\n  private _answer: Date | number | string | string[];\r\n  get answer(): Date | number | string | string[] {\r\n    return this._answer;\r\n  }\r\n  set answer(answer: Date | number | string | string[]) { // null überprüfen\r\n    if (answer == null) {\r\n      throw new Error(\"Answer darf nicht null sein.\");\r\n    }\r\n    this._answer = answer;\r\n  }\r\n\r\n  /**\r\n   * Ein Attribut, was nicht als Parameter übergeben wird, ist answer. Dieses bezeichnet die Antwort,\r\n   * die auf die Frage gegeben wird kann und dessen Typ bzw. Antwortmöglichkeit von der erbenden Klasse abhängt\r\n   *\r\n   * @param questionText ist die Frage, die gestellt werden soll\r\n   * @param id ist die eindeutige Identifikationsnummer des Fragenobjekts\r\n   */\r\n  constructor(id: number, name: string, questionText: string, displayName: string) {\r\n    super(id, name, displayName);\r\n    this.questionText = questionText;\r\n    this._answer = undefined;\r\n    this.displayName = displayName;\r\n  }\r\n}\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}