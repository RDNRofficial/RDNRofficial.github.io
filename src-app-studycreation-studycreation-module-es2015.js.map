{"version":3,"sources":["./src/app/studycreation/vibrationpattern-editing/vibrationpattern-editing.component.ts","./src/app/studycreation/question-editing/question-editing.component.ts","./src/app/studycreation/toolboxes/vibrationpattern-toolbox/vibrationpattern-toolbox.component.css","./src/app/studycreation/general-editing/general-editing.component.ts","./src/app/studycreation/error-state-matchers/ValidErrorStateMatcher.ts","./src/app/studycreation/error-state-matchers/NumberErrorStateMatcher.ts","./src/app/studycreation/toolboxes/studyobject-toolbox/studyobject-toolbox.component.html","./src/app/studycreation/section-editing/section-editing.component.css","./src/app/studycreation/sectionelement-editing/sectionelement-editing.component.css","./src/app/studycreation/question-editing/question-selection-dialog/question-selection-dialog.component.css","./src/app/studycreation/sectionelement-editing/sectionelement-editing.component.html","./src/app/studycreation/textblock-editing/textblock-editing.component.ts","./src/app/studycreation/sequence-editing/sequence-editing.component.css","./src/app/studycreation/studycreation.module.ts","./src/app/studycreation/question-editing/question-editing.component.html","./src/app/studycreation/question-editing/question-selection-dialog/question-selection-dialog.component.ts","./src/app/studycreation/sequence-editing/sequence-editing.component.ts","./src/app/studycreation/studycreation-routing.module.ts","./src/app/studycreation/sectionelement-editing/sectionelement-editing.component.ts","./src/app/studycreation/services/color/color.service.ts","./src/app/studycreation/question-editing/question-editing.component.css","./src/app/studycreation/general-editing/general-editing.component.html","./src/app/studycreation/toolboxes/studyobject-toolbox/studyobject-toolbox.component.css","./src/app/studycreation/section-editing/section-editing.component.ts","./src/app/studycreation/toolboxes/vibrationpattern-toolbox/vibrationpattern-toolbox.component.ts","./src/app/studycreation/vibrationpattern-editing/vibrationpattern-editing.component.html","./node_modules/@angular/cdk/fesm2015/drag-drop.js","./src/app/studycreation/textblock-editing/textblock-editing.component.html","./src/app/studycreation/toolboxes/vibrationpattern-toolbox/vibrationpattern-toolbox.component.html","./src/app/studycreation/vibrationpattern-editing/vibrationpattern-editing.component.css","./src/app/studycreation/section-editing/section-editing.component.html","./src/app/studycreation/sequence-editing/sequence-editing.component.html","./src/app/studycreation/textblock-editing/textblock-editing.component.css","./src/app/studycreation/general-editing/general-editing.component.css","./src/app/studycreation/question-editing/question-selection-dialog/question-selection-dialog.component.html","./src/app/studycreation/toolboxes/studyobject-toolbox/studyobject-toolbox.component.ts","./src/app/studycreation/studycreation.routes.ts"],"names":[],"mappings":"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;AACb;AAClB;AAC9B;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACS;AACL;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,2BAA2B;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,0CAA0C;AACrD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iCAAiC,mDAAmD;AACpF;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,WAAW,GAAG,gBAAgB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,6FAA+B,EAAE,gBAAgB;AACrF;AACA,mCAAmC,6FAA+B,EAAE,iBAAiB;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,iCAAiC;AACjC;AACA,+BAA+B,4CAAO;AACtC;AACA,wCAAwC,iDAAY;AACpD;AACA,sCAAsC,iDAAY;AAClD;AACA,mCAAmC,iDAAY;AAC/C;AACA,mCAAmC,iDAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC;AACA,2BAA2B,4CAAO;AAClC;AACA,4BAA4B,4CAAO;AACnC;AACA,yBAAyB,4CAAO;AAChC;AACA,2BAA2B,4CAAO;AAClC;AACA,0BAA0B,4CAAO;AACjC;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,kBAAkB,GAAG,kBAAkB;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mFAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,2EAAa;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2EAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,2EAAa;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe,EAAE;AAChD;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,aAAa;AACvD;AACA;AACA;AACA,uCAAuC;AACvC,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,yBAAyB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO,GAAG,mBAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,6CAA6C;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4BAA4B;AACnD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,qBAAqB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,OAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,cAAc,MAAM,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C,6BAA6B,kBAAkB;AAC/C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,UAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA;AACA,0BAA0B,4CAAO;AACjC;AACA,2BAA2B,4CAAO;AAClC;AACA,0BAA0B,4CAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iDAAY;AACvD;AACA;AACA;AACA;AACA;AACA,qCAAqC,4CAAO;AAC5C;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAQ,IAAI,4DAAuB;AAC/C,sBAAsB,gEAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,uBAAuB,2EAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2EAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2EAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+DAA+D;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wBAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2EAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,2BAA2B;AAC5F;AACA;AACA;AACA,oEAAoE,2BAA2B;AAC/F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,gBAAgB;AACnC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2EAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uBAAuB,2EAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,mBAAmB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,2EAAa;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,aAAa;AAC/D;AACA,qBAAqB;AACrB;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4EAAc,CAAC,2EAAa;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,6FAA+B;AACnE;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4CAAO;AACtC;AACA;AACA;AACA;AACA,6BAA6B,4CAAO;AACpC;AACA,0BAA0B,4CAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8DAA8D,oCAAoC,sDAAe,CAAC,oDAAa,GAAG,sDAAe,CAAC,wDAAQ,GAAG;AAC7J,yBAAyB,wEAAkB,EAAE,+CAA+C,6BAA6B,8DAAQ,CAAC,oDAAM,GAAG,8DAAQ,CAAC,wDAAQ,GAAG,EAAE,+CAA+C;AAChN;AACA,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI;AACvE;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,gBAAgB,qBAAqB;AACrC,KAAK,gBAAgB,UAAU,OAAO,oDAAa,EAAE,GAAG;AACxD,sBAAsB,oDAAM;AAC5B,uBAAuB,wDAAQ;AAC/B,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,4BAA4B,sDAAe,CAAC,wDAAQ,GAAG,sDAAe,CAAC,oDAAa,GAAG,sDAAe,CAAC,oEAAoB,GAAG,sDAAe,oBAAoB;AAC/M,iBAAiB,wEAAkB,EAAE,uCAAuC,qBAAqB,8DAAQ,CAAC,wDAAQ,GAAG,8DAAQ,CAAC,oDAAM,GAAG,8DAAQ,CAAC,oEAAa,GAAG,8DAAQ,oBAAoB,EAAE,uCAAuC;AACrO;AACA,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC1E,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,OAAO,oEAAa,EAAE;AAC3B,KAAK;AACL;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,gBAAgB,qBAAqB;AACrC,KAAK,gBAAgB,UAAU;AAC/B,sBAAsB,oDAAM;AAC5B,uBAAuB,wDAAQ;AAC/B,aAAa,GAAG,GAAG,OAAO,oDAAa,EAAE,GAAG,OAAO,oEAAoB,EAAE,GAAG,yBAAyB,EAAE,EAAE,QAAQ,EAAE;;AAEnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4DAAc;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4DAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA,yBAAyB,mFAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA,8DAA8D,sCAAsC;AACpG,wBAAwB,+DAAwB,EAAE,6EAA6E,qDAAqD,6CAA6C,gEAAyB,GAAG,8DAA8D,KAAK;AAChU;AACA,gBAAgB,OAAO,mDAAK,uCAAuC;AACnE;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA,6BAA6B,8DAA8D;AAC3F,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,GAAG;AACrC,kBAAkB,mDAAK;AACvB;AACA,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4DAAc;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,mFAAqB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gEAAS,mBAAmB,gEAAS;AAC3D;AACA;AACA;AACA,6BAA6B,yEAAW;AACxC;AACA;AACA;AACA,gGAAgG,KAAK;AACrG;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mFAAqB;AACvD,qCAAqC,mFAAqB;AAC1D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,uFAAuF;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,+BAA+B,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,YAAY,+DAAwB,CAAC,+DAAwB,GAAG,+DAAwB,CAAC,gEAAqB,MAAM,+DAAwB,2BAA2B,+DAAwB,CAAC,uEAAuB,GAAG,+DAAwB,sBAAsB;AACha,mBAAmB,+DAAwB,EAAE,qLAAqL;AAClO,QAAQ,4DAAqB;AAC7B,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,8cAA8c,YAAY,yHAAyH,wCAAwC,gEAAyB;AACtqB;AACA,aAA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EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA,2BAA2B,0DAAY;AACvC;AACA,4BAA4B,0DAAY;AACxC;AACA,yBAAyB,0DAAY;AACrC;AACA,2BAA2B,0DAAY;AACvC;AACA,0BAA0B,0DAAY;AACtC;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA,yBAAyB,+CAAU;AACnC,0DAA0D,0DAAG;AAC7D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mFAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2DAAI,KAAK,gEAAS;AACpC;AACA;AACA;AACA,uCAAuC,gEAAS;AAChD;AACA,YAAY,0DAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,YAAY,gEAAS;AACrB,uBAAuB,kDAAK;AAC5B,mDAAmD,gEAAS;AAC5D,iBAAiB;AACjB,aAAa,GAAG,gEAAS;AACzB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,qBAAqB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2EAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qCAAqC,kFAAoB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA,SAAS;AACT;AACA,gCAAgC,eAAe;AAC/C,SAAS;AACT;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,eAAe,oHAAoH;AACnI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,2BAA2B,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,qBAAqB,+DAAwB,CAAC,wDAAQ,GAAG,+DAAwB,CAAC,oDAAa,GAAG,+DAAwB,CAAC,8DAAuB,GAAG,+DAAwB,sBAAsB,+DAAwB,CAAC,gEAAqB,MAAM,+DAAwB,YAAY,+DAAwB,CAAC,+DAAwB,GAAG,+DAAwB,uBAAuB;AAC1gB,eAAe,+DAAwB,EAAE,sHAAsH;AAC/J,QAAQ,4DAAqB;AAC7B,QAAQ,4DAAqB;AAC7B,QAAQ,4DAAqB;AAC7B,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,iGAAiG;AACxG,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,4eAA4e,YAAY,sLAAsL,oCAAoC,gEAAyB,GAAG,iDAAiD,IAAI,kEAA2B,GAAG;AACn1B;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,gCAAgC,OAAO,oDAAM,0BAA0B,GAAG,OAAO,sDAAQ,EAAE,GAAG,OAAO,sDAAQ,EAAE,GAAG;AACvH,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC1E,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,OAAO,8DAAgB,EAAE;AAC9B,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,4BAA4B,GAAG;AACrG,KAAK,OAAO,gEAAc,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAC9D,KAAK,iBAAiB;AACtB,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,oCAAoC,OAAO,sDAAQ,EAAE,GAAG,OAAO,kDAAI,EAAE,GAAG,OAAO,oDAAM,4BAA4B;AACtH;AACA;AACA,gBAAgB,OAAO,6DAAe,2BAA2B,oBAAoB,IAAI;AACzF,wBAAwB,OAAO,0DAAY,6BAA6B;AACxE,4BAA4B,OAAO,0DAAY,iCAAiC;AAChF,YAAY,OAAO,mDAAK,0BAA0B;AAClD,gBAAgB,OAAO,mDAAK,8BAA8B;AAC1D,2BAA2B,OAAO,mDAAK,iCAAiC;AACxE,uBAAuB,OAAO,mDAAK,8BAA8B;AACjE,sBAAsB,OAAO,mDAAK,gCAAgC;AAClE,wBAAwB,OAAO,mDAAK,sCAAsC;AAC1E,gBAAgB,OAAO,mDAAK,8BAA8B;AAC1D,yBAAyB,OAAO,mDAAK,uCAAuC;AAC5E,oBAAoB,OAAO,mDAAK,kCAAkC;AAClE,eAAe,OAAO,oDAAM,6BAA6B;AACzD,gBAAgB,OAAO,oDAAM,8BAA8B;AAC3D,aAAa,OAAO,oDAAM,2BAA2B;AACrD,eAAe,OAAO,oDAAM,6BAA6B;AACzD,cAAc,OAAO,oDAAM,4BAA4B;AACvD,eAAe,OAAO,oDAAM,6BAA6B;AACzD,aAAa,OAAO,oDAAM,2BAA2B;AACrD;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,6BAA6B,iDAAiD;AAC9E,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,wDAAiB,EAAE,GAAG;AAC5D,sBAAsB,oDAAM;AAC5B;AACA,aAAa;AACb,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,GAAG;AACnB,sBAAsB,oDAAM;AAC5B,uBAAuB,wDAAQ;AAC/B,aAAa,GAAG,GAAG,OAAO,oDAAa,EAAE,GAAG,OAAO,8DAAuB,EAAE,GAAG;AAC/E,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,GAAG,OAAO,gEAAqB;AAC/C,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,GAAG,iBAAiB,GAAG,OAAO,+DAAwB,EAAE,GAAG;AAC3E,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,kDAAI;AAC1B,aAAa;AACb,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,EAAE,EAAE,GAAG;AACvB,kBAAkB,oDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,oDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,oDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,oDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,oDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,oDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,oDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,6DAAe;AACjC,qCAAqC,oBAAoB;AACzD,SAAS;AACT,kBAAkB,0DAAY;AAC9B;AACA,SAAS;AACT,kBAAkB,0DAAY;AAC9B;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS,GAAG,EAAE,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8DAAuB,EAAE,uBAAuB;AACtE,sBAAsB,8DAAuB,EAAE,8CAA8C,oCAAoC,EAAE;AACnI;AACA,iBAAiB,0EAAmB,GAAG;AACvC,cAAc,oDAAoD,gEAAyB,kBAAkB,4BAA4B,oGAAoG,EAAE,wBAAwB,SAAS,0EAAmB,6FAA6F,EAAE,EAAE,EAAE,EAAE;AACxY,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0EAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEyV;;AAEzV,qC;;;;;;;;;;;;AC35GA;AAAe,qJAAsF,cAAc,6FAA6F,mJAAmJ,oPAAoP,eAAe,6tBAA6tB,eAAe,iOAAiO,E;;;;;;;;;;;;ACAnjD;AAAe,4GAA6C,oGAAoG,mdAAmd,oBAAoB,4IAA4I,cAAc,iLAAiL,cAAc,gLAAgL,E;;;;;;;;;;;;ACAhpC;AAAe,sFAAuB,qBAAqB,KAAK,kBAAkB,qBAAqB,wBAAwB,mBAAmB,2BAA2B,oBAAoB,KAAK,sBAAsB,4BAA4B,KAAK,kBAAkB,oBAAoB,KAAK,yBAAyB,iCAAiC,qBAAqB,wBAAwB,KAAK,qBAAqB,iCAAiC,qBAAqB,wBAAwB,KAAK,+BAA+B,6BAA6B,0BAA0B,4BAA4B,yBAAyB,sBAAsB,KAAK,2BAA2B,yBAAyB,wBAAwB,2BAA2B,KAAK,sBAAsB,kCAAkC,qBAAqB,KAAK,oBAAoB,uBAAuB,oCAAoC,KAAK,mBAAmB,wBAAwB,KAAK,+CAA+C,2rEAA2rE,E;;;;;;;;;;;;ACA9sG;AAAe,saAAuW,cAAc,iHAAiH,2KAA2K,wKAAwK,MAAM,2DAA2D,mPAAmP,6EAA6E,8CAA8C,6ZAA6Z,MAAM,YAAY,sGAAsG,MAAM,MAAM,2FAA2F,SAAS,kMAAkM,yPAAyP,oBAAoB,8FAA8F,MAAM,MAAM,MAAM,MAAM,22BAA22B,E;;;;;;;;;;;;ACA5yG;AAAe,sXAAuT,MAAM,sDAAsD,uPAAuP,yEAAyE,8CAA8C,2ZAA2Z,gLAAgL,KAAK,wFAAwF,MAAM,MAAM,MAAM,MAAM,gyBAAgyB,E;;;;;;;;;;;;ACAhtE;AAAe,qFAAsB,oBAAoB,OAAO,wBAAwB,kCAAkC,qBAAqB,KAAK,sBAAsB,qBAAqB,kCAAkC,KAAK,qBAAqB,sBAAsB,KAAK,yDAAyD,mzBAAmzB,E;;;;;;;;;;;;ACAloC;AAAe,qFAAsB,oBAAoB,KAAK,sBAAsB,kCAAkC,qBAAqB,KAAK,oBAAoB,uBAAuB,oCAAoC,KAAK,mBAAmB,wBAAwB,KAAK,+CAA+C,+xBAA+xB,E;;;;;;;;;;;;ACAlmC;AAAe,4JAA6F,+bAA+b,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAne;AACgB;AACc;AACM;AACpB;AACpB;AACc;AACV;AACc;AACpB;IAOrD,2BAA2B,SAA3B,2BAA2B;IAkBpC,YAAmB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;QAjB7C;;WAEG;QAEH,YAAO,GAAG,EAAE,CAAC;IAaoC,CAAC;IAElD;;OAEG;IACH,QAAQ;QACJ,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAClD,CAAC;IAED;;;OAGG;IACH,kBAAkB,CAAC,UAAU;QACzB,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;QAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;YACjC,IAAI,IAAI,CAAC,cAAc,IAAI,SAAS,EAAE;gBAClC,IAAI,CAAC,cAAc,GAAG,CAAC,iBAAiB,GAAG,CAAC,CAAC,CAAC;aACjD;iBAAM;gBACH,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC,CAAC;aACnD;SACJ;IACL,CAAC;IAED;;;OAGG;IACH,WAAW,CAAC,OAAsB;QAC9B,IAAI,OAAO,CAAC,iBAAiB,CAAC,EAAE;YAC5B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;SACjD;IACL,CAAC;IAED;;;OAGG;IACH,iBAAiB,CAAC,IAAY;QAC1B,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,QAAQ,IAAI,EAAE;YACV,KAAK,cAAc;gBACf,KAAK,IAAI,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE;oBAC9B,IAAI,OAAO,YAAY,qGAAY;wBAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBAC7D;gBACD,MAAM;YACV,KAAK,kBAAkB;gBACnB,KAAK,IAAI,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE;oBAC9B,IAAI,OAAO,YAAY,oGAAgB;wBAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBACjE;gBACD,MAAM;YACV,KAAK,WAAW;gBACZ,KAAK,IAAI,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE;oBAC9B,IAAI,OAAO,YAAY,qFAAS;wBAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBAC1D;gBACD,MAAM;YACV,KAAK,qBAAqB;gBACtB,KAAK,IAAI,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE;oBAC9B,IAAI,OAAO,YAAY,mHAAmB;wBAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBACpE;gBACD,MAAM;YACV,KAAK,wBAAwB;gBACzB,KAAK,IAAI,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE;oBAC9B,IAAI,OAAO,YAAY,yHAAsB;wBAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBACvE;gBACD,MAAM;YACV,KAAK,cAAc;gBACf,KAAK,IAAI,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE;oBAC9B,IAAI,OAAO,YAAY,qGAAY;wBAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBAC7D;gBACD,MAAM;YACV,KAAK,gBAAgB;gBACjB,KAAK,IAAI,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE;oBAC9B,IAAI,OAAO,YAAY,+FAAc;wBAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBAC/D;gBACD,MAAM;YACV,KAAK,SAAS;gBACV,KAAK,IAAI,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE;oBAC9B,IAAI,OAAO,YAAY,iFAAO;wBAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBACxD;gBACD,MAAM;SACb;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;;;OAGG;IACH,SAAS,CAAC,IAAY;QAClB,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,KAAK,IAAI,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE;YAC9B,QAAQ,IAAI,EAAE;gBACV,KAAK,cAAc;oBACf,IAAI,OAAO,YAAY,qGAAY;wBAAE,OAAO,EAAE,CAAC;oBAC/C,MAAM;gBACV,KAAK,kBAAkB;oBACnB,IAAI,OAAO,YAAY,oGAAgB;wBAAE,OAAO,EAAE,CAAC;oBACnD,MAAM;gBACV,KAAK,WAAW;oBACZ,IAAI,OAAO,YAAY,qFAAS;wBAAE,OAAO,EAAE,CAAC;oBAC5C,MAAM;gBACV,KAAK,qBAAqB;oBACtB,IAAI,OAAO,YAAY,mHAAmB;wBAAE,OAAO,EAAE,CAAC;oBACtD,MAAM;gBACV,KAAK,wBAAwB;oBACzB,IAAI,OAAO,YAAY,yHAAsB;wBAAE,OAAO,EAAE,CAAC;oBACzD,MAAM;gBACV,KAAK,cAAc;oBACf,IAAI,OAAO,YAAY,qGAAY;wBAAE,OAAO,EAAE,CAAC;oBAC/C,MAAM;gBACV,KAAK,gBAAgB;oBACjB,IAAI,OAAO,YAAY,+FAAc;wBAAE,OAAO,EAAE,CAAC;oBACjD,MAAM;gBACV,KAAK,SAAS;oBACV,IAAI,OAAO,YAAY,iFAAO;wBAAE,OAAO,EAAE,CAAC;oBAC1C,MAAM;aACb;SACJ;QACD,OAAO,OAAO,CAAC;IACnB,CAAC;CAEJ;;YAnJQ,2EAAY;;;sBAWhB,mDAAK;8BAML,mDAAK;;AAVG,2BAA2B;IALvC,+DAAS,CAAC;QACP,QAAQ,EAAE,yBAAyB;QACnC,gGAAmD;;KAEtD,CAAC;qCAmBmC,2EAAY;GAlBpC,2BAA2B,CA4IvC;AA5IuC;;;;;;;;;;;;;ACfxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsF;AACG;AACH;AACqB;AAClB;AACG;AACqB;AAE1G,MAAM,MAAM,GAAW;IAC1B;QACE,IAAI,EAAE,iBAAiB;QACvB,SAAS,EAAE,kGAAuB;KACnC;IACD;QACE,IAAI,EAAE,kBAAkB;QACxB,SAAS,EAAE,qGAAwB;KACpC;IACD;QACE,IAAI,EAAE,iBAAiB;QACvB,SAAS,EAAE,kGAAuB;KACnC;IACD;QACE,IAAI,EAAE,wBAAwB;QAC9B,SAAS,EAAE,uHAA8B;KAC1C;IACD;QACE,IAAI,EAAE,kBAAkB;QACxB,SAAS,EAAE,qGAAwB;KACpC;IACD;QACE,IAAI,EAAE,mBAAmB;QACzB,SAAS,EAAE,wGAAyB;KACrC;IACD;QACE,IAAI,EAAE,0BAA0B;QAChC,SAAS,EAAE,6HAAgC;KAC5C;CACF,CAAC","file":"src-app-studycreation-studycreation-module-es2015.js","sourcesContent":["import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { PauseElement } from '@src/app/Model/Study/StudyObjects/PauseElement';\r\nimport { VibrationElement } from '@src/app/Model/Study/StudyObjects/VibrationElement';\r\nimport { VibrationPattern } from '@src/app/Model/Study/StudyObjects/VibrationPattern';\r\nimport { StudyWrapperService } from '../../services/study-wrapper/study-wrapper.service';\r\nimport { NumberErrorStateMatcher } from '../error-state-matchers/NumberErrorStateMatcher';\r\n\r\n@Component({\r\n    selector: 'app-vibrationpattern-editing',\r\n    templateUrl: './vibrationpattern-editing.component.html',\r\n    styleUrls: ['./vibrationpattern-editing.component.css']\r\n})\r\nexport class VibrationPatternEditingComponent implements OnInit {\r\n    /**\r\n     * Einfaches vorinitialisiertes VibrationElement\r\n     */\r\n    compareVibration = new VibrationElement(1, 1);\r\n\r\n    /**\r\n     * Einfaches vorinitialisiertes PauseELement\r\n     */\r\n    comparePause = new PauseElement(0);\r\n\r\n    /**\r\n     * Toolbox in der das compareVibration Element und comparePause Element liegen.\r\n     */\r\n    toolbox = [this.compareVibration, this.comparePause];\r\n\r\n    /**\r\n     * Array in dem alle VibrationPattern die erstellt wurden liegen.\r\n     */\r\n    vibrationpatterns: VibrationPattern[] = [];\r\n\r\n    formControls: FormControl[][][] = [];\r\n\r\n    matcher = new NumberErrorStateMatcher();\r\n\r\n    constructor(private studywrapper: StudyWrapperService) { }\r\n\r\n    /**\r\n     * VibrationPattern aus der Study werden in das vibrationpatterns Array in der Klasse geladen.\r\n     */\r\n    ngOnInit() {\r\n        this.studywrapper.study.studyObjects.forEach((studyobject) => {\r\n            if (studyobject instanceof VibrationPattern) {\r\n                this.vibrationpatterns.unshift(studyobject);\r\n                this.formControls.unshift([[]]);\r\n            }\r\n        });\r\n        let i = 0;\r\n        for (let vibPattern of this.vibrationpatterns) {\r\n            let j = 0;\r\n            for (let vpE of vibPattern.vibrationPatternElements) {\r\n                this.addVibrationFormControl(i, j, vpE);\r\n                j++;\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param vibIndex \r\n     * @param placeIndex \r\n     * @param vibrationPatternElement \r\n     */\r\n    addVibrationFormControl(vibIndex: number, placeIndex: number, vibrationPatternElement: any) {\r\n        let durationControl = new FormControl(\"\", {\r\n            validators: [Validators.required, Validators.min(0)]\r\n        });\r\n        let amplitudeControl = new FormControl(\"\", {\r\n            validators: [Validators.required, Validators.min(1), Validators.max(255)]\r\n        })\r\n        this.formControls[vibIndex].splice(placeIndex, 0,\r\n            [\r\n                durationControl, amplitudeControl\r\n            ]\r\n        );\r\n        durationControl.patchValue(vibrationPatternElement.duration);\r\n        let toInsert = 1;\r\n        if (vibrationPatternElement.amplitude) {\r\n            toInsert = vibrationPatternElement.amplitude;\r\n        }\r\n        amplitudeControl.patchValue(toInsert);\r\n        durationControl.valueChanges.subscribe(value => {\r\n            let toChange = value;\r\n            if (value < 0) {\r\n                toChange = 0;\r\n            }\r\n            if (!Number(value)) {\r\n                toChange = 1;\r\n            }\r\n            vibrationPatternElement.duration = toChange;\r\n        });\r\n        amplitudeControl.valueChanges.subscribe(value => {\r\n            let toChange = value;\r\n            if (value < 1) {\r\n                toChange = 1;\r\n            }\r\n            if (value > 255) {\r\n                toChange = 255;\r\n            }\r\n            if (!Number(value)) {\r\n                toChange = 1;\r\n            }\r\n            vibrationPatternElement.amplitude = toChange;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Ein neues leeres VibrationPattern wird erstellt.\r\n     */\r\n    onAddVibrationPattern() {\r\n        let toInsert = new VibrationPattern(\r\n            this.studywrapper.lastID, \"\"\r\n        );\r\n        this.vibrationpatterns.unshift(toInsert);\r\n        this.studywrapper.study.studyObjects.unshift(toInsert);\r\n        this.formControls.unshift([[]]);\r\n    }\r\n\r\n    /**\r\n     * Beim draggen eines Vibration oder PauseElements wird das VibrationPattern entsprechend editiert\r\n     * @param event \r\n     * @param vibIndex \r\n     */\r\n    onDrop(event: CdkDragDrop<any[]>, vibIndex: number) {\r\n        if (event.previousContainer.id == \"toolbox\") {\r\n            let toInsert: (VibrationElement | PauseElement);\r\n            if (event.previousContainer.data[event.previousIndex] instanceof VibrationElement) {\r\n                toInsert = new VibrationElement(1, 1);\r\n            } else {\r\n                toInsert = new PauseElement(1);\r\n            }\r\n            event.container.data.splice(event.currentIndex, 0, toInsert);\r\n            this.addVibrationFormControl(vibIndex, event.currentIndex, toInsert);\r\n        }\r\n        if (event.previousContainer === event.container) {\r\n            moveItemInArray(\r\n                event.container.data,\r\n                event.previousIndex,\r\n                event.currentIndex\r\n            );\r\n            moveItemInArray(\r\n                this.formControls[vibIndex],\r\n                event.previousIndex,\r\n                event.currentIndex\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Das VibrationPattern mit der angegebene id wird aus der Studie und der Webapp entfernt. \r\n     * @param index \r\n     * @param id \r\n     */\r\n    removeFromStudy(index: number, id: number) {\r\n        this.vibrationpatterns.splice(index, 1);\r\n        this.removeFromSectionElement(id);\r\n        this.formControls.splice(index, 1);\r\n        this.studywrapper.study.studyObjects = this.studywrapper.study.studyObjects.filter(element => element.id != id);\r\n    }\r\n\r\n    /**\r\n     * Entfernt ein VibrationPattern von allen SectionElements in der Studie\r\n     * @param id \r\n     */\r\n    removeFromSectionElement(id: number) {\r\n        for (let sectionelement of this.studywrapper.study.sectionElements) {\r\n            let index = 0;\r\n            for (let studyObjectRef of sectionelement.studyObjects) {\r\n                if (studyObjectRef.ID == id) {\r\n                    sectionelement.studyObjects.splice(index, 1);\r\n                }\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Entfernt ein Element aus dem Array\r\n     * @param targetArray \r\n     * @param index \r\n     */\r\n    removeFromArray(targetArray: any, index: number) {\r\n        targetArray.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Entfernt ein Vibration oder Pause Element von einem VibrationPattern\r\n     * @param vibIndex \r\n     * @param elIndex \r\n     */\r\n    removeFromVibrationPattern(vibIndex: number, elIndex: number) {\r\n        this.vibrationpatterns[vibIndex].vibrationPatternElements.splice(elIndex, 1);\r\n        this.formControls[vibIndex].splice(elIndex, 1);\r\n    }\r\n\r\n    /**\r\n     * Prüft, ob ein Element vom Typ VibrationElement ist.\r\n     * @param val \r\n     */\r\n    isVibration(val: any): boolean {\r\n        return val instanceof VibrationElement;\r\n    }\r\n\r\n    /**\r\n     * Prüft, ob ein Element vom Typ PauseElement ist.\r\n     * @param val \r\n     */\r\n    isPause(val: any): boolean {\r\n        return val instanceof PauseElement;\r\n    }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AbstractQuestion } from '@src/app/Model/Study/StudyObjects/Questions/AbstractQuestion';\r\nimport { StudyWrapperService } from '../../services/study-wrapper/study-wrapper.service';\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { LinearScaleQuestion } from '@src/app/Model/Study/StudyObjects/Questions/LinearScaleQuestion';\r\nimport { MultipleChoiceQuestion } from '@src/app/Model/Study/StudyObjects/Questions/MultipleChoiceQuestion';\r\nimport { QuestionSelectionDialogComponent } from './question-selection-dialog/question-selection-dialog.component';\r\nimport { AbstractStudyObject } from '@src/app/Model/Study/StudyObjects/AbstractStudyObject';\r\nimport { VibrationPattern } from '@src/app/Model/Study/StudyObjects/VibrationPattern';\r\nimport { TextBlock } from '@src/app/Model/Study/StudyObjects/TextBlock';\r\nimport { DateQuestion } from '@src/app/Model/Study/StudyObjects/Questions/DateQuestion';\r\nimport { TextQuestion } from '@src/app/Model/Study/StudyObjects/Questions/TextQuestion';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { NumberErrorStateMatcher } from '../error-state-matchers/NumberErrorStateMatcher';\r\n\r\n@Component({\r\n    selector: 'app-question-editing',\r\n    templateUrl: './question-editing.component.html',\r\n    styleUrls: ['./question-editing.component.css']\r\n})\r\nexport class QuestionEditingComponent implements OnInit {\r\n    questions: AbstractQuestion[] = [];\r\n    questionTypes = [\"Datum/Zeit\", \"Lineare Skala\", \"Multiple Choice\", \"Text\"];\r\n\r\n    formControls: FormControl[][] = [];\r\n\r\n    matcher: NumberErrorStateMatcher = new NumberErrorStateMatcher();\r\n\r\n    constructor(public studywrapper: StudyWrapperService, private dialog: MatDialog) { }\r\n\r\n    /**\r\n     * Überträgt aus einer gegebenen Studie alle Fragen in das questions Array\r\n     */\r\n    ngOnInit() {\r\n        this.studywrapper.study.studyObjects.forEach((studyobject) => {\r\n            if (studyobject instanceof AbstractQuestion) {\r\n                this.questions.unshift(studyobject);\r\n                this.addFormControl(studyobject);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Prüft, ob ein bestimmtes Objekt eine LinearScaleQuestion oder eine \r\n     * MultipleChoiceQuestion ist. Der entsprechende Typ wird als string zurückgegeben.\r\n     * @param question \r\n     */\r\n    isLinearScaleQuestion(question) {\r\n        if (question instanceof LinearScaleQuestion) {\r\n            return \"linearScale\";\r\n        } else if (question instanceof MultipleChoiceQuestion) {\r\n            return \"multipleChoice\";\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Ergänzt die übergebene MultipleChoiceQuestion um eine vordefinierte Antwort Option\r\n     * @param question \r\n     */\r\n    addFormControl(question: AbstractQuestion) {\r\n        let maxChoicesControl = new FormControl(\"\", {\r\n            validators: [Validators.min(1), Validators.required]\r\n        });\r\n        let choicesControl = new FormControl(\"\", { validators: [Validators.min(2), Validators.max(12), Validators.required] });\r\n        this.formControls.unshift([maxChoicesControl, choicesControl]);\r\n        maxChoicesControl.patchValue((question as MultipleChoiceQuestion).maxChoices);\r\n        choicesControl.patchValue((question as LinearScaleQuestion).numberOfChoices);\r\n        maxChoicesControl.valueChanges.subscribe(value => {\r\n            let toChange = value;\r\n            if (value < 0) {\r\n                toChange = 0;\r\n            }\r\n            if (!Number(value)) {\r\n                toChange = 1;\r\n            }\r\n            (question as MultipleChoiceQuestion).maxChoices = toChange;\r\n        });\r\n        choicesControl.valueChanges.subscribe(value => {\r\n            let toChange = value;\r\n            if (value < 2) {\r\n                toChange = 2;\r\n            }\r\n            if (value > 12) {\r\n                toChange = 12;\r\n            }\r\n            if (!Number(value)) {\r\n                toChange = 1;\r\n            }\r\n            (question as LinearScaleQuestion).numberOfChoices = toChange;\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Ergänzt die übergebene MultipleChoiceQuestion um eine vordefinierte Antwort Option\r\n     * @param question \r\n     */\r\n    onAddAnswerChoice(question: MultipleChoiceQuestion) {\r\n        question.answerOptions.push(\"\");\r\n    }\r\n\r\n    /**\r\n     * Fügt die erstellte Frage in die Studie und die questions Liste ein\r\n     */\r\n    onAddQuestion() {\r\n        let dialogRef = this.dialog.open(QuestionSelectionDialogComponent);\r\n        dialogRef.afterClosed().subscribe(result => {\r\n            if (result) {\r\n                this.questions.unshift(result);\r\n                this.studywrapper.study.studyObjects.unshift(result);\r\n                this.addFormControl(result);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Entfernt aus dem Array targetArray an der Stelle index einen Eintrag.\r\n     * @param targetArray \r\n     * @param index \r\n     */\r\n    removeFromArray(targetArray: any, index: number) {\r\n        targetArray.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Die AntwortOption in einer MultipleChoiceQuestion an der Stelle index wird aktualisiert.\r\n     * @param question \r\n     * @param index \r\n     * @param event \r\n     */\r\n    valueUpdate(question, index, event) {\r\n        question.answerOptions[index] = event.target.value;\r\n    }\r\n\r\n    /**\r\n     * Entfernt das Element an der Stelle index aus der Liste questions und entfernt das \r\n     * Element mit der id aus der Liste studyObjects in StudyPrototype.\r\n     * @param index \r\n     * @param id \r\n     */\r\n    removeFromStudy(index: number, id: number) {\r\n        this.questions.splice(index, 1);\r\n        this.removeFromSectionElement(id);\r\n        this.formControls.splice(index, 1);\r\n        this.studywrapper.study.studyObjects = this.studywrapper.study.studyObjects.filter(element => element.id != id);\r\n    }\r\n\r\n    /**\r\n     * Entfernt das Element an der Stelle index aus der Liste questions und \r\n     * entfernt das Element mit der id aus der Liste studyObjects in StudyPrototype.\r\n     * @param id \r\n     */\r\n    removeFromSectionElement(id: number) {\r\n        for (let sectionelement of this.studywrapper.study.sectionElements) {\r\n            let index = 0;\r\n            for (let studyObjectRef of sectionelement.studyObjects) {\r\n                if (studyObjectRef.ID == id) {\r\n                    sectionelement.studyObjects.splice(index, 1);\r\n                }\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gibt den Text zurück, welchen der User für einen bestimmten Objekttyp sehen soll.\r\n     * @param studyObject \r\n     */\r\n    getStudyObjectTypeName(studyObject: AbstractStudyObject): string {\r\n        switch (true) {\r\n            case studyObject instanceof VibrationPattern:\r\n                return \"VibrationPattern\";\r\n            case studyObject instanceof TextBlock:\r\n                return \"TextBlock\";\r\n            case studyObject instanceof DateQuestion:\r\n                return \"Datum\";\r\n            case studyObject instanceof LinearScaleQuestion:\r\n                return \"Lineare Skala\";\r\n            case studyObject instanceof MultipleChoiceQuestion:\r\n                return \"Multiple Choice\";\r\n            case studyObject instanceof TextQuestion:\r\n                return \"Freitext\";\r\n            default:\r\n                return \"undefined\";\r\n        }\r\n    }\r\n\r\n}\r\n","export default \"mat-card {\\r\\n    text-align: center;\\r\\n}\\r\\n\\r\\nmat-chip {\\r\\n    width: 100%;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi90b29sYm94ZXMvdmlicmF0aW9ucGF0dGVybi10b29sYm94L3ZpYnJhdGlvbnBhdHRlcm4tdG9vbGJveC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksV0FBVztBQUNmIiwiZmlsZSI6InNyYy9hcHAvc3R1ZHljcmVhdGlvbi90b29sYm94ZXMvdmlicmF0aW9ucGF0dGVybi10b29sYm94L3ZpYnJhdGlvbnBhdHRlcm4tdG9vbGJveC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsibWF0LWNhcmQge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG5tYXQtY2hpcCB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxufSJdfQ== */\";","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { QualificationQuestion } from '@src/app/Model/Study/StudyObjects/Questions/QualificationQuestion';\r\nimport { StudyWrapperService } from '../../services/study-wrapper/study-wrapper.service';\r\nimport { ValidErrorStateMatcher } from '../error-state-matchers/ValidErrorStateMatcher';\r\n\r\n@Component({\r\n    selector: 'app-general-editing',\r\n    templateUrl: './general-editing.component.html',\r\n    styleUrls: ['./general-editing.component.css']\r\n})\r\nexport class GeneralEditingComponent implements OnInit {\r\n    constructor(public studywrapper: StudyWrapperService) { }\r\n\r\n    shortControl: FormControl = new FormControl(\"\", {validators: Validators.maxLength(200)});\r\n\r\n    matcher: ValidErrorStateMatcher = new ValidErrorStateMatcher();\r\n\r\n    /**\r\n     * Initialisiert den Wert der ShortDescription\r\n     */\r\n    ngOnInit() {\r\n        this.shortControl.patchValue(this.studywrapper.study.keyData.shortDescription.text);\r\n        this.shortControl.valueChanges.subscribe(value => {\r\n            let toChange = value;\r\n            if (value.length > 200) {\r\n                toChange = value.substr(0, 200);\r\n            }\r\n            this.studywrapper.study.keyData.shortDescription.text = toChange;\r\n        });\r\n    }\r\n\r\n    onStateChange() { }\r\n\r\n    /**\r\n     * Erstellt eine neue Ausschlussfrage und fügt sie der Studie hinzu\r\n     */\r\n    onAddQualificationQuestion() {\r\n        this.studywrapper.study.keyData.qualiQuestions.push(\r\n            new QualificationQuestion(this.studywrapper.lastID, \"\", \"\", \"\", false)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Entfernt aus dem Array targetArray an der Stelle index einen Eintrag.\r\n     * @param targetArray \r\n     * @param index \r\n     */\r\n    removeFromArray(targetArray: any, index: number) {\r\n        targetArray.splice(index, 1);\r\n    }\r\n\r\n}\r\n","import { FormControl, FormGroupDirective, NgForm } from \"@angular/forms\";\r\nimport { ErrorStateMatcher } from \"@angular/material/core\";\r\n\r\nexport class ValidErrorStateMatcher implements ErrorStateMatcher {\r\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n        return !control.valid;\r\n    }\r\n}","import { FormControl, FormGroupDirective, NgForm } from \"@angular/forms\";\r\nimport { ErrorStateMatcher } from \"@angular/material/core\";\r\n\r\nexport class NumberErrorStateMatcher implements ErrorStateMatcher {\r\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n        let success = true;\r\n        let value = Number(control.value);\r\n        if (!value && value != 0) {\r\n            success = false;\r\n        }\r\n        return !success || !control.valid;\r\n    }\r\n}","export default \"<mat-card class=\\\"scrollable\\\" style=\\\"background-color: #212121;\\\"><br>\\r\\n    <mat-card-title>Werkzeugkasten</mat-card-title>\\r\\n    <div style=\\\"margin-top: 10px;\\\">\\r\\n        <mat-card-subtitle>Erstellte Objekte per Drag and Drog links einfügen</mat-card-subtitle>\\r\\n    </div>\\r\\n    <mat-card-content [style.overflow]=\\\"'auto'\\\" [style.height.vh]=\\\"'77'\\\" >\\r\\n        <mat-divider></mat-divider>\\r\\n        <br />\\r\\n        <mat-accordion multi>\\r\\n            <mat-expansion-panel *ngIf=\\\"getAmount('DateQuestion') > 0\\\" style=\\\"background-color: #856e68;\\\">\\r\\n                <mat-expansion-panel-header>\\r\\n                    <mat-panel-title>\\r\\n                        Datumfragen\\r\\n                    </mat-panel-title>\\r\\n                </mat-expansion-panel-header>\\r\\n                <div cdkDropList id=\\\"toolbox\\\" [cdkDropListConnectedTo]=\\\"connectedLists\\\" [cdkDropListData]=\\\"getObjectsPerType('DateQuestion')\\\">\\r\\n                    <div *ngFor=\\\"let element of toolbox\\\">\\r\\n                        <div *ngIf=\\\"this.colorService.getStudyObjectType(element) == 'DateQuestion'\\\">\\r\\n                            <mat-card cdkDrag style=\\\"cursor: move; height: 20px\\\" [style.background-color]=\\\"this.colorService.getStudyObjectColor(element)\\\">{{ element.name }}</mat-card>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-expansion-panel>\\r\\n            <mat-expansion-panel *ngIf=\\\"getAmount('TextQuestion') > 0\\\" style=\\\"background-color: #747d80;\\\">\\r\\n                <mat-expansion-panel-header>\\r\\n                    <mat-panel-title>\\r\\n                        Freitextfragen\\r\\n                    </mat-panel-title>\\r\\n                </mat-expansion-panel-header>\\r\\n                <div cdkDropList id=\\\"toolbox\\\" [cdkDropListConnectedTo]=\\\"connectedLists\\\" [cdkDropListData]=\\\"getObjectsPerType('TextQuestion')\\\">\\r\\n                    <div *ngFor=\\\"let element of toolbox\\\">\\r\\n                        <div *ngIf=\\\"this.colorService.getStudyObjectType(element) == 'TextQuestion'\\\">\\r\\n                            <mat-card cdkDrag style=\\\"cursor: move;\\\" [style.background-color]=\\\"this.colorService.getStudyObjectColor(element)\\\">{{ element.name }}</mat-card>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-expansion-panel>\\r\\n            <mat-expansion-panel *ngIf=\\\"getAmount('LinearScaleQuestion') > 0\\\" style=\\\"background-color: #6f8aab;\\\">\\r\\n                <mat-expansion-panel-header>\\r\\n                    <mat-panel-title>\\r\\n                        Lineare Skalen\\r\\n                    </mat-panel-title>\\r\\n                </mat-expansion-panel-header>\\r\\n                <div cdkDropList id=\\\"toolbox\\\" [cdkDropListConnectedTo]=\\\"connectedLists\\\" [cdkDropListData]=\\\"getObjectsPerType('LinearScaleQuestion')\\\">\\r\\n                    <div *ngFor=\\\"let element of toolbox\\\">\\r\\n                        <div *ngIf=\\\"this.colorService.getStudyObjectType(element) == 'LinearScaleQuestion'\\\">\\r\\n                            <mat-card cdkDrag style=\\\"cursor: move;\\\" [style.background-color]=\\\"this.colorService.getStudyObjectColor(element)\\\">{{ element.name }}</mat-card>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-expansion-panel>\\r\\n            <mat-expansion-panel *ngIf=\\\"getAmount('MultipleChoiceQuestion') > 0\\\" style=\\\"background-color: #a68a79;\\\">\\r\\n                <mat-expansion-panel-header>\\r\\n                    <mat-panel-title>\\r\\n                        Multiple Choice Fragen\\r\\n                    </mat-panel-title>\\r\\n                </mat-expansion-panel-header>\\r\\n                <div cdkDropList id=\\\"toolbox\\\" [cdkDropListConnectedTo]=\\\"connectedLists\\\" [cdkDropListData]=\\\"getObjectsPerType('MultipleChoiceQuestion')\\\">\\r\\n                    <div *ngFor=\\\"let element of toolbox\\\">\\r\\n                        <div *ngIf=\\\"this.colorService.getStudyObjectType(element) == 'MultipleChoiceQuestion'\\\">\\r\\n                            <mat-card cdkDrag style=\\\"cursor: move;\\\" [style.background-color]=\\\"this.colorService.getStudyObjectColor(element)\\\">{{ element.name }}</mat-card>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-expansion-panel>\\r\\n            <mat-expansion-panel *ngIf=\\\"getAmount('TextBlock') > 0\\\" style=\\\"background-color: #7da278;\\\">\\r\\n                <mat-expansion-panel-header>\\r\\n                    <mat-panel-title>\\r\\n                        Textblöcke\\r\\n                    </mat-panel-title>\\r\\n                </mat-expansion-panel-header>\\r\\n                <div cdkDropList id=\\\"toolbox\\\" [cdkDropListConnectedTo]=\\\"connectedLists\\\" [cdkDropListData]=\\\"getObjectsPerType('TextBlock')\\\">\\r\\n                    <div *ngFor=\\\"let element of toolbox\\\">\\r\\n                        <div *ngIf=\\\"this.colorService.getStudyObjectType(element) == 'TextBlock'\\\">\\r\\n                            <mat-card cdkDrag style=\\\"cursor: move;\\\" [style.background-color]=\\\"this.colorService.getStudyObjectColor(element)\\\">{{ element.name }}</mat-card>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-expansion-panel>\\r\\n            <mat-expansion-panel *ngIf=\\\"getAmount('VibrationPattern') > 0\\\" style=\\\"background-color: #A65C4E;\\\">\\r\\n                <mat-expansion-panel-header>\\r\\n                    <mat-panel-title>\\r\\n                        Vibrationsmuster\\r\\n                    </mat-panel-title>\\r\\n                </mat-expansion-panel-header>\\r\\n                <div cdkDropList id=\\\"toolbox\\\" [cdkDropListConnectedTo]=\\\"connectedLists\\\" [cdkDropListData]=\\\"getObjectsPerType('VibrationPattern')\\\">\\r\\n                    <div *ngFor=\\\"let element of toolbox\\\">\\r\\n                        <div *ngIf=\\\"this.colorService.getStudyObjectType(element) == 'VibrationPattern'\\\">\\r\\n                            <mat-card cdkDrag style=\\\"cursor: move;\\\" [style.background-color]=\\\"this.colorService.getStudyObjectColor(element)\\\">{{ element.name }}</mat-card>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-expansion-panel>\\r\\n            <mat-expansion-panel *ngIf=\\\"getAmount('SectionElement') > 0\\\" style=\\\"background-color: #9dbae1;\\\">\\r\\n                <mat-expansion-panel-header>\\r\\n                    <mat-panel-title>\\r\\n                        Studienseiten\\r\\n                    </mat-panel-title>\\r\\n                </mat-expansion-panel-header>\\r\\n                <div cdkDropList id=\\\"toolbox\\\" [cdkDropListConnectedTo]=\\\"connectedLists\\\" [cdkDropListData]=\\\"getObjectsPerType('SectionElement')\\\">\\r\\n                    <div *ngFor=\\\"let element of toolbox\\\">\\r\\n                        <div *ngIf=\\\"this.colorService.getStudyObjectType(element) == 'SectionElement'\\\">\\r\\n                            <mat-card cdkDrag style=\\\"cursor: move;\\\" [style.background-color]=\\\"this.colorService.getStudyObjectColor(element)\\\">{{ element.name }}</mat-card>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-expansion-panel>\\r\\n            <mat-expansion-panel *ngIf=\\\"getAmount('Section') > 0\\\" style=\\\"background-color: #dd9fb2;\\\">\\r\\n                <mat-expansion-panel-header>\\r\\n                    <mat-panel-title>\\r\\n                        Abschnitte\\r\\n                    </mat-panel-title>\\r\\n                </mat-expansion-panel-header>\\r\\n                <div cdkDropList id=\\\"toolbox\\\" [cdkDropListConnectedTo]=\\\"connectedLists\\\" [cdkDropListData]=\\\"getObjectsPerType('Section')\\\">\\r\\n                    <div *ngFor=\\\"let element of toolbox\\\">\\r\\n                        <div *ngIf=\\\"this.colorService.getStudyObjectType(element) == 'Section'\\\">\\r\\n                            <mat-card cdkDrag style=\\\"cursor: move;\\\" [style.background-color]=\\\"this.colorService.getStudyObjectColor(element)\\\">{{ element.name }}</mat-card>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-expansion-panel>\\r\\n        </mat-accordion>\\r\\n\\r\\n    </mat-card-content>\\r\\n</mat-card>\";","export default \"mat-sidenav-container {\\r\\n    height: 91vh;\\r\\n}\\r\\n\\r\\n.studyObjectList {\\r\\n    border-style: dashed;\\r\\n    border-width: 5px;\\r\\n    border-radius: 10px;\\r\\n    font-size: 18px;\\r\\n    padding: 15px;\\r\\n    margin-top: 15px;\\r\\n}\\r\\n\\r\\n.toolbox {\\r\\n    width: 250px;\\r\\n    position: fixed;\\r\\n    z-index: 1;\\r\\n    overflow-x: hidden;\\r\\n    right: 15px;\\r\\n}\\r\\n\\r\\n.mainContent {\\r\\n    margin-right: 265px;\\r\\n}\\r\\n\\r\\n.droplistSubtitle {\\r\\n    margin-top: 10px;\\r\\n    font-size: 14px;\\r\\n    text-align: center;\\r\\n}\\r\\n\\r\\n.greenButton {\\r\\n    background-color: #3e753b;\\r\\n    color: white;\\r\\n}\\r\\n\\r\\n.redButton {\\r\\n    color: #6D0000;\\r\\n    background-color: #FF000000;\\r\\n}\\r\\n\\r\\n.trashCan {\\r\\n    font-size: 40px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi9zZWN0aW9uLWVkaXRpbmcvc2VjdGlvbi1lZGl0aW5nLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksb0JBQW9CO0lBQ3BCLGlCQUFpQjtJQUNqQixtQkFBbUI7SUFDbkIsZUFBZTtJQUNmLGFBQWE7SUFDYixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osZUFBZTtJQUNmLFVBQVU7SUFDVixrQkFBa0I7SUFDbEIsV0FBVztBQUNmOztBQUVBO0lBQ0ksbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGVBQWU7SUFDZixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGNBQWM7SUFDZCwyQkFBMkI7QUFDL0I7O0FBRUE7SUFDSSxlQUFlO0FBQ25CIiwiZmlsZSI6InNyYy9hcHAvc3R1ZHljcmVhdGlvbi9zZWN0aW9uLWVkaXRpbmcvc2VjdGlvbi1lZGl0aW5nLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJtYXQtc2lkZW5hdi1jb250YWluZXIge1xyXG4gICAgaGVpZ2h0OiA5MXZoO1xyXG59XHJcblxyXG4uc3R1ZHlPYmplY3RMaXN0IHtcclxuICAgIGJvcmRlci1zdHlsZTogZGFzaGVkO1xyXG4gICAgYm9yZGVyLXdpZHRoOiA1cHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xyXG4gICAgZm9udC1zaXplOiAxOHB4O1xyXG4gICAgcGFkZGluZzogMTVweDtcclxuICAgIG1hcmdpbi10b3A6IDE1cHg7XHJcbn1cclxuXHJcbi50b29sYm94IHtcclxuICAgIHdpZHRoOiAyNTBweDtcclxuICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgIHotaW5kZXg6IDE7XHJcbiAgICBvdmVyZmxvdy14OiBoaWRkZW47XHJcbiAgICByaWdodDogMTVweDtcclxufVxyXG5cclxuLm1haW5Db250ZW50IHtcclxuICAgIG1hcmdpbi1yaWdodDogMjY1cHg7XHJcbn1cclxuXHJcbi5kcm9wbGlzdFN1YnRpdGxlIHtcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbiAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuXHJcbi5ncmVlbkJ1dHRvbiB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2U3NTNiO1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG59XHJcblxyXG4ucmVkQnV0dG9uIHtcclxuICAgIGNvbG9yOiAjNkQwMDAwO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGMDAwMDAwO1xyXG59XHJcblxyXG4udHJhc2hDYW4ge1xyXG4gICAgZm9udC1zaXplOiA0MHB4O1xyXG59Il19 */\";","export default \".vibration-container {\\r\\n    height: 91vh;\\r\\n}\\r\\n\\r\\n.studyObjectList {\\r\\n    border-style: dashed;\\r\\n    border-width: 5px;\\r\\n    border-radius: 10px;\\r\\n    font-size: 16px;\\r\\n    padding: 15px;\\r\\n    margin-top: 15px;\\r\\n}\\r\\n\\r\\n.toolbox {\\r\\n    width: 300px;\\r\\n    position: fixed;\\r\\n    z-index: 1;\\r\\n    overflow-x: hidden;\\r\\n    right: 15px;\\r\\n}\\r\\n\\r\\n.mainContent {\\r\\n    margin-right: 315px;\\r\\n}\\r\\n\\r\\n.droplistSubtitle {\\r\\n    margin-top: 10px;\\r\\n    font-size: 14px;\\r\\n    text-align: center;\\r\\n}\\r\\n\\r\\n.greenButton {\\r\\n    background-color: #3e753b;\\r\\n    color: white;\\r\\n}\\r\\n\\r\\n.redButton {\\r\\n    color: #6D0000;\\r\\n    background-color: #FF000000;\\r\\n}\\r\\n\\r\\n.grayButton {\\r\\n    color: gray;\\r\\n    background-color: #FF000000;\\r\\n}\\r\\n\\r\\n.trashCan {\\r\\n    font-size: 40px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi9zZWN0aW9uZWxlbWVudC1lZGl0aW5nL3NlY3Rpb25lbGVtZW50LWVkaXRpbmcuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxvQkFBb0I7SUFDcEIsaUJBQWlCO0lBQ2pCLG1CQUFtQjtJQUNuQixlQUFlO0lBQ2YsYUFBYTtJQUNiLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLFlBQVk7SUFDWixlQUFlO0lBQ2YsVUFBVTtJQUNWLGtCQUFrQjtJQUNsQixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsZUFBZTtJQUNmLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLHlCQUF5QjtJQUN6QixZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksY0FBYztJQUNkLDJCQUEyQjtBQUMvQjs7QUFFQTtJQUNJLFdBQVc7SUFDWCwyQkFBMkI7QUFDL0I7O0FBRUE7SUFDSSxlQUFlO0FBQ25CIiwiZmlsZSI6InNyYy9hcHAvc3R1ZHljcmVhdGlvbi9zZWN0aW9uZWxlbWVudC1lZGl0aW5nL3NlY3Rpb25lbGVtZW50LWVkaXRpbmcuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi52aWJyYXRpb24tY29udGFpbmVyIHtcclxuICAgIGhlaWdodDogOTF2aDtcclxufVxyXG5cclxuLnN0dWR5T2JqZWN0TGlzdCB7XHJcbiAgICBib3JkZXItc3R5bGU6IGRhc2hlZDtcclxuICAgIGJvcmRlci13aWR0aDogNXB4O1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcclxuICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgIHBhZGRpbmc6IDE1cHg7XHJcbiAgICBtYXJnaW4tdG9wOiAxNXB4O1xyXG59XHJcblxyXG4udG9vbGJveCB7XHJcbiAgICB3aWR0aDogMzAwcHg7XHJcbiAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgICB6LWluZGV4OiAxO1xyXG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xyXG4gICAgcmlnaHQ6IDE1cHg7XHJcbn1cclxuXHJcbi5tYWluQ29udGVudCB7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDMxNXB4O1xyXG59XHJcblxyXG4uZHJvcGxpc3RTdWJ0aXRsZSB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG4uZ3JlZW5CdXR0b24ge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzNlNzUzYjtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxufVxyXG5cclxuLnJlZEJ1dHRvbiB7XHJcbiAgICBjb2xvcjogIzZEMDAwMDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNGRjAwMDAwMDtcclxufVxyXG5cclxuLmdyYXlCdXR0b24ge1xyXG4gICAgY29sb3I6IGdyYXk7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkYwMDAwMDA7XHJcbn1cclxuXHJcbi50cmFzaENhbiB7XHJcbiAgICBmb250LXNpemU6IDQwcHg7XHJcbn0iXX0= */\";","export default \"button {\\r\\n    margin-bottom: 5px;\\r\\n    color: white;\\r\\n    background-color: #3e753b;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi9xdWVzdGlvbi1lZGl0aW5nL3F1ZXN0aW9uLXNlbGVjdGlvbi1kaWFsb2cvcXVlc3Rpb24tc2VsZWN0aW9uLWRpYWxvZy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWix5QkFBeUI7QUFDN0IiLCJmaWxlIjoic3JjL2FwcC9zdHVkeWNyZWF0aW9uL3F1ZXN0aW9uLWVkaXRpbmcvcXVlc3Rpb24tc2VsZWN0aW9uLWRpYWxvZy9xdWVzdGlvbi1zZWxlY3Rpb24tZGlhbG9nLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJidXR0b24ge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNXB4O1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzNlNzUzYjtcclxufVxyXG4iXX0= */\";","export default \"<div class=\\\"vibration-contianer\\\">\\r\\n    <div class=\\\"toolbox\\\">\\r\\n        <app-studyobject-toolbox [toolbox]=\\\"this.toolbox\\\" [playgroundCount]=\\\"sectionelements.length\\\">\\r\\n        </app-studyobject-toolbox>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"mainContent\\\">\\r\\n        <a mat-fab class=\\\"greenButton\\\" (click)=\\\"onAddPlayground()\\\" style=\\\"display: block; margin: auto;\\\">\\r\\n            <mat-icon>add</mat-icon>\\r\\n        </a><br>\\r\\n        <div *ngFor=\\\"let sectionelement of sectionelements; let index = index\\\">\\r\\n            <mat-card>\\r\\n                <mat-card-title>\\r\\n                    <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 50%; font-size:18px\\\">\\r\\n                        <input matInput placeholder=\\\"Bezeichnung\\\" [(ngModel)]=\\\"sectionelement.name\\\" /> </mat-form-field>\\r\\n                    &nbsp;&nbsp;\\r\\n                    <mat-form-field style=\\\"width: 20%; font-size:18px\\\">\\r\\n                        <mat-label>Randomisierung</mat-label>\\r\\n                        <mat-select [(value)]=\\\"sectionelement.randomStrategy\\\">\\r\\n                            <mat-option *ngFor=\\\"let randomizer of randomizers; let index = index\\\" [value]=\\\"index\\\">\\r\\n                                {{ this.studywrapper.getRandomizerName(index) }}\\r\\n                            </mat-option>\\r\\n                        </mat-select>\\r\\n                    </mat-form-field><button mat-icon-button class=\\\"redButton\\\" (click)=\\\"deleteTest(index, sectionelement.id)\\\">\\r\\n                        <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n                    </button>\\r\\n                </mat-card-title>\\r\\n                Für das Ergebnis relevant? &nbsp;&nbsp; Nein &nbsp;\\r\\n                <mat-slide-toggle [(ngModel)]=\\\"sectionelement.resultRelevant\\\"></mat-slide-toggle>\\r\\n                &nbsp;&nbsp;&nbsp;Ja<br>\\r\\n                <hr>\\r\\n                <div cdkDropList class=\\\"studyObjectList\\\" id=\\\"studyObjectList{{ index }}\\\"\\r\\n                    [cdkDropListData]=\\\"sectionelement.studyObjects\\\"\\r\\n                    (cdkDropListDropped)=\\\"onDrop($event, sectionelement)\\\">\\r\\n                    <div *ngFor=\\\"let ref of sectionelement.studyObjects; let index = index\\\">\\r\\n                        <mat-card cdkDrag\\r\\n                            [style.background-color]=\\\"this.colorService.getStudyObjectColor(findStudyObjectById(ref.ID))\\\"\\r\\n                            style=\\\"font-size:18px; cursor: move;\\\">{{(index+1) + \\\". \\\" + \\r\\n              this.studywrapper.referenceTupleMembershipVerifier.getObject(ref).name\\r\\n              }}&nbsp;&nbsp;&nbsp;&nbsp;<mat-slide-toggle [(ngModel)]=\\\"ref.isFixed\\\">Fixiert</mat-slide-toggle><button\\r\\n                                mat-icon-button class=\\\"grayButton\\\"\\r\\n                                (click)=\\\"removeFromArray(sectionelement.studyObjects, index)\\\">\\r\\n                                <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n                            </button>\\r\\n                        </mat-card>\\r\\n                        <div *ngIf=\\\"index+1 != sectionelement.studyObjects.length\\\">\\r\\n                            <br />\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"droplistSubtitle\\\">Hier Elemente aus dem Wergzeugkasten einfügen, um eine Abfolge\\r\\n                        festzulegen.</div>\\r\\n                </div>\\r\\n            </mat-card>\\r\\n            <br>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</div>\";","import { NgForOf } from '@angular/common';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroupDirective, NgForm, Validators } from '@angular/forms';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { TextBlock } from '@src/app/Model/Study/StudyObjects/TextBlock';\r\nimport { StudyWrapperService } from '../../services/study-wrapper/study-wrapper.service';\r\nimport { ValidErrorStateMatcher } from '../error-state-matchers/ValidErrorStateMatcher';\r\n@Component({\r\n    selector: 'app-textblock-editing',\r\n    templateUrl: './textblock-editing.component.html',\r\n    styleUrls: ['./textblock-editing.component.css']\r\n})\r\nexport class TextBlockEditingComponent implements OnInit {\r\n    /**\r\n     * In dem Array befinden sich alle Textblöcke die bereits erstellt wurden.\r\n     */\r\n    textblocks: TextBlock[] = [];\r\n\r\n    formControls: FormControl[][] = [];\r\n\r\n    matcher = new ValidErrorStateMatcher();\r\n\r\n    constructor(private studywrapper: StudyWrapperService) { }\r\n\r\n    /**\r\n     * Die Methode kopiert alle TextBlöcke die sich bereits in der Studie befinden in das teckblocks array.\r\n     */\r\n    ngOnInit() {\r\n        this.studywrapper.study.studyObjects.forEach((studyobject) => {\r\n            if (studyobject instanceof TextBlock) {\r\n                this.textblocks.unshift(studyobject);\r\n                this.addFormControl(studyobject);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Einem TextBlock wird eine FormControl hinzugefügt\r\n     * @param textblock \r\n     */\r\n    addFormControl(textblock: TextBlock) {\r\n        let titleControl = new FormControl(\"\", [\r\n        ]);\r\n        let textControl = new FormControl(\"\", [\r\n        ])\r\n        this.formControls.unshift(\r\n            [\r\n                titleControl,\r\n                textControl,\r\n            ]);\r\n        titleControl.patchValue(textblock.name);\r\n        textControl.patchValue(textblock.text);\r\n        titleControl.valueChanges.subscribe(value => {\r\n            textblock.name = value;\r\n        });\r\n        textControl.valueChanges.subscribe(value => {\r\n            textblock.text = value;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Ein default TextBlock wird erstellt und in das textblocks Array und die Studie geschrieben.\r\n     */\r\n    onAddTextBlock() {\r\n        let toInsert = new TextBlock(\r\n            this.studywrapper.lastID,\r\n            \"\",\r\n            \"\"\r\n        );\r\n        this.addFormControl(toInsert);\r\n        this.textblocks.unshift(toInsert);\r\n        this.studywrapper.study.studyObjects.unshift(toInsert);\r\n    }\r\n\r\n    /**\r\n     * Der Textblock mit der gegebenen id wird von allen sectionElements entfernt.\r\n     * @param id \r\n     */\r\n    removeFromSectionElement(id: number) {\r\n        for (let sectionelement of this.studywrapper.study.sectionElements) {\r\n            let index = 0;\r\n            for (let studyObjectRef of sectionelement.studyObjects) {\r\n                if (studyObjectRef.ID == id) {\r\n                    sectionelement.studyObjects.splice(index, 1);\r\n                }\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ein Textblock wird aus der Studie und dem textblocks Array entfernt.\r\n     * @param index \r\n     * @param id \r\n     */\r\n    removeFromStudy(index: number, id: number) {\r\n        this.textblocks.splice(index, 1);\r\n        this.formControls.splice(index, 1);\r\n        this.removeFromSectionElement(id);\r\n        this.studywrapper.study.studyObjects = this.studywrapper.study.studyObjects.filter(element => element.id != id);\r\n    }\r\n\r\n}\r\n","export default \".vibration-container {\\r\\n    height: 91vh;\\r\\n}\\r\\n\\r\\n\\r\\n.studyObjectList {\\r\\n    border-style: dashed;\\r\\n    border-width: 5px;\\r\\n    border-radius: 10px;\\r\\n    font-size: 16px;\\r\\n    padding: 15px;\\r\\n    margin-top: 15px;\\r\\n}\\r\\n\\r\\n\\r\\n.toolbox {\\r\\n    width: 250px;\\r\\n    position: fixed;\\r\\n    z-index: 1;\\r\\n    overflow-x: hidden;\\r\\n    right: 15px;\\r\\n}\\r\\n\\r\\n\\r\\n.mainContent {\\r\\n    margin-right: 265px;\\r\\n}\\r\\n\\r\\n\\r\\n.droplistSubtitle {\\r\\n    margin-top: 10px;\\r\\n    font-size: 14px;\\r\\n    text-align: center;\\r\\n}\\r\\n\\r\\n\\r\\n.redButton {\\r\\n    color: #6D0000;\\r\\n    background-color: #FF000000;\\r\\n}\\r\\n\\r\\n\\r\\n.trashCan {\\r\\n    font-size: 40px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi9zZXF1ZW5jZS1lZGl0aW5nL3NlcXVlbmNlLWVkaXRpbmcuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7QUFDaEI7OztBQUdBO0lBQ0ksb0JBQW9CO0lBQ3BCLGlCQUFpQjtJQUNqQixtQkFBbUI7SUFDbkIsZUFBZTtJQUNmLGFBQWE7SUFDYixnQkFBZ0I7QUFDcEI7OztBQUVBO0lBQ0ksWUFBWTtJQUNaLGVBQWU7SUFDZixVQUFVO0lBQ1Ysa0JBQWtCO0lBQ2xCLFdBQVc7QUFDZjs7O0FBRUE7SUFDSSxtQkFBbUI7QUFDdkI7OztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGVBQWU7SUFDZixrQkFBa0I7QUFDdEI7OztBQUVBO0lBQ0ksY0FBYztJQUNkLDJCQUEyQjtBQUMvQjs7O0FBRUE7SUFDSSxlQUFlO0FBQ25CIiwiZmlsZSI6InNyYy9hcHAvc3R1ZHljcmVhdGlvbi9zZXF1ZW5jZS1lZGl0aW5nL3NlcXVlbmNlLWVkaXRpbmcuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi52aWJyYXRpb24tY29udGFpbmVyIHtcclxuICAgIGhlaWdodDogOTF2aDtcclxufVxyXG5cclxuXHJcbi5zdHVkeU9iamVjdExpc3Qge1xyXG4gICAgYm9yZGVyLXN0eWxlOiBkYXNoZWQ7XHJcbiAgICBib3JkZXItd2lkdGg6IDVweDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICBwYWRkaW5nOiAxNXB4O1xyXG4gICAgbWFyZ2luLXRvcDogMTVweDtcclxufVxyXG5cclxuLnRvb2xib3gge1xyXG4gICAgd2lkdGg6IDI1MHB4O1xyXG4gICAgcG9zaXRpb246IGZpeGVkO1xyXG4gICAgei1pbmRleDogMTtcclxuICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcclxuICAgIHJpZ2h0OiAxNXB4O1xyXG59XHJcblxyXG4ubWFpbkNvbnRlbnQge1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAyNjVweDtcclxufVxyXG5cclxuLmRyb3BsaXN0U3VidGl0bGUge1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxuICAgIGZvbnQtc2l6ZTogMTRweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5cclxuLnJlZEJ1dHRvbiB7XHJcbiAgICBjb2xvcjogIzZEMDAwMDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNGRjAwMDAwMDtcclxufVxyXG5cclxuLnRyYXNoQ2FuIHtcclxuICAgIGZvbnQtc2l6ZTogNDBweDtcclxufSJdfQ== */\";","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { StudyCreationRoutingModule } from '@src/app/studycreation/studycreation-routing.module';\r\nimport { GeneralEditingComponent } from '@src/app/studycreation/general-editing/general-editing.component';\r\nimport { MaterialModule } from '@src/material.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { QuestionEditingComponent } from '@src/app/studycreation/question-editing/question-editing.component';\r\nimport { SectionEditingComponent } from '@src/app/studycreation/section-editing/section-editing.component';\r\nimport { SectionElementEditingComponent } from '@src/app/studycreation/sectionelement-editing/sectionelement-editing.component';\r\nimport { SequenceEditingComponent } from '@src/app/studycreation/sequence-editing/sequence-editing.component';\r\nimport { TextBlockEditingComponent } from '@src/app/studycreation/textblock-editing/textblock-editing.component';\r\nimport { VibrationPatternEditingComponent } from '@src/app/studycreation/vibrationpattern-editing/vibrationpattern-editing.component';\r\nimport { QuestionSelectionDialogComponent } from '@src/app/studycreation/question-editing/question-selection-dialog/question-selection-dialog.component';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { VibrationPatternToolboxComponent } from '@src/app/studycreation/toolboxes/vibrationpattern-toolbox/vibrationpattern-toolbox.component';\r\nimport { StudyObjectToolboxComponent } from '@src/app/studycreation/toolboxes/studyobject-toolbox/studyobject-toolbox.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    GeneralEditingComponent, \r\n    QuestionEditingComponent, \r\n    SectionEditingComponent, \r\n    SectionElementEditingComponent, \r\n    SequenceEditingComponent, \r\n    TextBlockEditingComponent, \r\n    VibrationPatternEditingComponent, \r\n    QuestionSelectionDialogComponent, \r\n    VibrationPatternToolboxComponent, \r\n    StudyObjectToolboxComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    StudyCreationRoutingModule,\r\n    MaterialModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    DragDropModule\r\n  ]\r\n})\r\nexport class StudycreationModule { }\r\n","export default \"<a mat-fab class=\\\"greenButton\\\" (click)=\\\"onAddQuestion()\\\" style=\\\"display: block; margin: auto;\\\">\\r\\n    <mat-icon>add</mat-icon>\\r\\n</a><br>\\r\\n<div *ngFor=\\\"let question of questions; let index = index\\\">\\r\\n    <mat-card>\\r\\n        <mat-card-title>\\r\\n            <h3>{{this.getStudyObjectTypeName(question)}}</h3>\\r\\n            <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 50%;font-size:18px\\\">\\r\\n                <input matInput placeholder=\\\"Bezeichnung\\\" [(ngModel)]=\\\"question.name\\\" />\\r\\n            </mat-form-field>&nbsp;&nbsp;\\r\\n            <button mat-icon-button class=\\\"redButton\\\" (click)=\\\"removeFromStudy(index, question.id)\\\">\\r\\n                <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n            </button>\\r\\n        </mat-card-title>\\r\\n        <!--FRAGEINHALT-->\\r\\n        <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 50%;\\\">\\r\\n            <input matInput placeholder=\\\"Fragestellung\\\" [(ngModel)]=\\\"question.questionText\\\" />\\r\\n        </mat-form-field>\\r\\n\\r\\n\\r\\n        <div *ngIf=\\\"isLinearScaleQuestion(question) == 'linearScale'\\\">\\r\\n            <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 32%;\\\">\\r\\n                <input matInput placeholder=\\\"Anzahl der Wahlmöglichkeiten (2 bis 12)\\\" [formControl]=\\\"this.formControls[index][1]\\\" [errorStateMatcher]=\\\"this.matcher\\\" />\\r\\n                <mat-error *ngIf=\\\"this.formControls[index][1].invalid\\\">Fehlerhafte Eingabe.</mat-error>\\r\\n            </mat-form-field>&nbsp;&nbsp;\\r\\n            <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 32%;\\\">\\r\\n                <input matInput placeholder=\\\"Linkes Label\\\" [(ngModel)]=\\\"question.leftLabel\\\" />\\r\\n            </mat-form-field>&nbsp;&nbsp;\\r\\n            <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 32%;\\\">\\r\\n                <input matInput placeholder=\\\"Rechtes Label\\\" [(ngModel)]=\\\"question.rightLabel\\\" />\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div *ngIf=\\\"isLinearScaleQuestion(question) == 'multipleChoice'\\\">\\r\\n            <!--<mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 20%;\\\">\\r\\n                <input matInput placeholder=\\\"Mindestens auszuwählen\\\" [(ngModel)]=\\\"question.minSelectable\\\" />\\r\\n            </mat-form-field>&nbsp;&nbsp;-->\\r\\n            <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 20%;\\\">\\r\\n                <input matInput placeholder=\\\"Maximal auswählbar\\\" [formControl]=\\\"this.formControls[index][0]\\\" [errorStateMatcher]=\\\"this.matcher\\\" />\\r\\n                <mat-error *ngIf=\\\"this.formControls[index][0].invalid\\\">Fehlerhafte Eingabe.</mat-error>\\r\\n            </mat-form-field><br>\\r\\n            <label>Antwortmöglichkeiten</label><br><br>\\r\\n            <div *ngFor=\\\"let answerChoice of question.answerOptions; let index = index\\\">\\r\\n                <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 32%;\\\">\\r\\n                    <input matInput placeholder={{index+1}} [ngModel]=\\\"question.answerOptions[index]\\\" (change)=\\\"valueUpdate(question, index, $event)\\\"/>\\r\\n                </mat-form-field>\\r\\n                <button mat-icon-button class=\\\"redButton\\\" (click)=\\\"removeFromArray(question.answerOptions, index)\\\">\\r\\n                    <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n                </button>\\r\\n            </div>\\r\\n            <a mat-fab class=\\\"greenButton\\\" (click)=\\\"onAddAnswerChoice(question)\\\" style=\\\"display: block; margin: auto;\\\">\\r\\n                <mat-icon>add</mat-icon>\\r\\n            </a>\\r\\n        </div>\\r\\n\\r\\n    </mat-card>\\r\\n    <br>\\r\\n</div>\";","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { DateQuestion } from '@src/app/Model/Study/StudyObjects/Questions/DateQuestion';\r\nimport { LinearScaleQuestion } from '@src/app/Model/Study/StudyObjects/Questions/LinearScaleQuestion';\r\nimport { MultipleChoiceQuestion } from '@src/app/Model/Study/StudyObjects/Questions/MultipleChoiceQuestion';\r\nimport { TextQuestion } from '@src/app/Model/Study/StudyObjects/Questions/TextQuestion';\r\nimport { StudyWrapperService } from '../../../services/study-wrapper/study-wrapper.service';\r\n\r\n@Component({\r\n  selector: 'app-question-selection-dialog',\r\n  templateUrl: './question-selection-dialog.component.html',\r\n  styleUrls: ['./question-selection-dialog.component.css']\r\n})\r\nexport class QuestionSelectionDialogComponent implements OnInit {\r\n  constructor(private studywrapper: StudyWrapperService, private dialogRef: MatDialogRef<QuestionSelectionDialogComponent>) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  /**\r\n   * Aus dem Parameter wird der Fragetyp abgeleitet, eine default Frage erstellt und zurückgegeben.\r\n   * @param questionType \r\n   */\r\n  onButtonClick(questionType) {\r\n    let questionResult: any = undefined;\r\n    switch (questionType) {\r\n      case 0:\r\n        questionResult = new DateQuestion(this.studywrapper.lastID, \"\", \"\", \"\");\r\n        break;\r\n      case 1:\r\n        questionResult = new LinearScaleQuestion(this.studywrapper.lastID, \"\", \"\", \"\", 5, \"\", \"\");\r\n        break;\r\n      case 2:\r\n        questionResult = new MultipleChoiceQuestion(this.studywrapper.lastID, \"\", \"\", \"\", [], 1);\r\n        break;\r\n      case 3:\r\n        questionResult = new TextQuestion(this.studywrapper.lastID, \"\", \"\", \"\");\r\n        break;\r\n    }\r\n    this.dialogRef.close(questionResult);\r\n  }\r\n\r\n}\r\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { RandomizingStrategies } from '@src/app/Model/Randomizing/RandomizingStrategies';\r\nimport { ReferenceTuple } from '@src/app/Model/Study/ReferenceTuple';\r\nimport { Section } from '@src/app/Model/Study/StudyObjects/Section';\r\nimport { StudyWrapperService } from '../../services/study-wrapper/study-wrapper.service';\r\nimport { ColorService } from '../services/color/color.service';\r\n\r\n@Component({\r\n  selector: 'app-sequence-editing',\r\n  templateUrl: './sequence-editing.component.html',\r\n  styleUrls: ['./sequence-editing.component.css']\r\n})\r\nexport class SequenceEditingComponent implements OnInit {\r\n  /**\r\n   * In dem toolbox Array befinden sich alle Elemente, die erstellt wurden und einer Section hinzugefügt werden können.\r\n   */\r\n  toolbox = [];\r\n\r\n  /**\r\n   * In diesem Array befinden sich alle Randomisierungsstrategien, die innerhalb einer Section verwendet werden können.\r\n   */\r\n  randomizers: string[] = [];\r\n\r\n  constructor(public studywrapper: StudyWrapperService, public colorService: ColorService) {\r\n    for (let randomizer in RandomizingStrategies) {\r\n      if (typeof RandomizingStrategies[randomizer] === \"number\") {\r\n        this.randomizers.push(randomizer);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bereits erstellte Sections und SectionElements werden in das sections bzw. toolbox Array geladen.\r\n   */\r\n  ngOnInit() {\r\n    for (let section of this.studywrapper.study.sections) {\r\n      this.toolbox.push(section);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sucht die Id in der Liste sectionElements aus StudyPrototype und gibt es zurück wenn es gefunden wird\r\n   * @param id \r\n   */\r\n  findSectionById(id: number): Section {\r\n    for (let section of this.studywrapper.study.sections) {\r\n      if (id == section.id) {\r\n        return section;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Die Aktion die mit den Toolbox Elementen ausgeführt wurde wird in den entsprechenden Datenstrukturen aktualisiert\r\n   * @param event \r\n   */\r\n  onDrop(event: CdkDragDrop<any[]>) {\r\n    if (\r\n      event.previousContainer.id == \"toolbox\" &&\r\n      event.container.id != \"toolbox\"\r\n    ) {\r\n      this.studywrapper.study.refSections.push(\r\n        new ReferenceTuple(\r\n          event.previousContainer.data[event.previousIndex].id,\r\n          false\r\n        )\r\n      );\r\n    } else {\r\n      if (event.previousContainer === event.container) {\r\n        moveItemInArray(\r\n          event.container.data,\r\n          event.previousIndex,\r\n          event.currentIndex\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Entfernt aus dem Array targetArray an der Stelle index einen Eintrag.\r\n   * @param targetArray \r\n   * @param index \r\n   */\r\n  removeFromArray(targetArray: any, index: number) {\r\n    targetArray.splice(index, 1);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { routes } from \"./studycreation.routes\";\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class StudyCreationRoutingModule { }\r\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { RandomizingStrategies } from '@src/app/Model/Randomizing/RandomizingStrategies';\r\nimport { ReferenceTuple } from '@src/app/Model/Study/ReferenceTuple';\r\nimport { SectionElement } from '@src/app/Model/Study/StudyObjects/SectionElement';\r\nimport { StudyWrapperService } from '../../services/study-wrapper/study-wrapper.service';\r\nimport { ColorService } from '../services/color/color.service';\r\n\r\n@Component({\r\n    selector: 'app-sectionelement-editing',\r\n    templateUrl: './sectionelement-editing.component.html',\r\n    styleUrls: ['./sectionelement-editing.component.css']\r\n})\r\nexport class SectionElementEditingComponent implements OnInit {\r\n    /**\r\n     * In dem toolbox Array befinden sich alle Elemente, die erstellt wurden und einer Section hinzugefügt werden können.\r\n     */\r\n    toolbox = [];\r\n\r\n    /**\r\n     * In dem sectionelements Array befinden sich alle SectionElements die in dieser Sicht erstellt wurden.\r\n     */\r\n    sectionelements: SectionElement[] = [];\r\n\r\n    /**\r\n     * In diesem Array befinden sich alle Randomisierungsstrategien, die innerhalb einer Section verwendet werden können.\r\n     */\r\n    randomizers: string[] = [];\r\n\r\n    constructor(public studywrapper: StudyWrapperService, public colorService: ColorService) {\r\n        for (let randomizer in RandomizingStrategies) {\r\n            if (typeof RandomizingStrategies[randomizer] === \"number\") {\r\n                this.randomizers.push(randomizer);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Bereits erstellte SectionElements und StudyObjects werden in das sections bzw. toolbox Array geladen. \r\n     */\r\n    ngOnInit() {\r\n        for (let sectionelement of this.studywrapper.study.sectionElements) {\r\n            if (sectionelement instanceof SectionElement) {\r\n                this.sectionelements.push(sectionelement);\r\n            }\r\n        }\r\n\r\n        for (let studyobject of this.studywrapper.study.studyObjects) {\r\n            this.toolbox.push(studyobject);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sucht die Id in der Liste studyObjects aus StudyPrototype und gibt es zurück wenn das Element gefunden wurde.\r\n     * @param id \r\n     */\r\n    findStudyObjectById(id: number): any {\r\n        for (let studyobject of this.studywrapper.study.studyObjects) {\r\n            if (id == studyobject.id) {\r\n                return studyobject;\r\n            }\r\n        }\r\n        throw new Error(\"AbstractStudyObject mit der id \" + id + \" gibt es nicht.\")\r\n    }\r\n\r\n    /**\r\n     * Ein neues SectionElement wird erzeugt und in die Listen eingebunden\r\n     */\r\n    onAddPlayground() {\r\n        let toInsert = new SectionElement(this.studywrapper.lastID, \"\", 1);\r\n        this.sectionelements.unshift(toInsert);\r\n        this.studywrapper.study.sectionElements.unshift(toInsert);\r\n    }\r\n\r\n    /**\r\n     * Die Aktion die mit den Toolbox Elementen ausgeführt wurde wird \r\n     * in den entsprechenden Datenstrukturen aktualisiert\r\n     * @param event \r\n     * @param sectionelement \r\n     */\r\n    onDrop(event: CdkDragDrop<any[]>, sectionelement: SectionElement) {\r\n        if (\r\n            event.previousContainer.id.startsWith(\"toolbox\") &&\r\n            event.container.id != \"toolbox\"\r\n        ) {\r\n            sectionelement.studyObjects.push(\r\n                new ReferenceTuple(\r\n                    event.previousContainer.data[event.previousIndex].id,\r\n                    false\r\n                )\r\n            );\r\n        } else {\r\n            if (event.previousContainer === event.container) {\r\n                moveItemInArray(\r\n                    event.container.data,\r\n                    event.previousIndex,\r\n                    event.currentIndex\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Entfernt aus dem Array targetArray an der Stelle index einen Eintrag. \r\n     * @param targetArray \r\n     * @param index \r\n     */\r\n    removeFromArray(targetArray: any, index: number) {\r\n        targetArray.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Entfernt ein sectionElement mit der gegebenen Id von allen Sections\r\n     * @param id \r\n     */\r\n    removeFromSection(id: number) {\r\n        for (let section of this.studywrapper.study.sections) {\r\n            let index = 0;\r\n            for (let sectionElementRef of section.sectionElements) {\r\n                if (sectionElementRef.ID == id) {\r\n                    section.sectionElements.splice(index, 1);\r\n                }\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Löscht ein StudyObject aus der Studie und aus dem toolbox Array.\r\n     * @param index \r\n     * @param id \r\n     */\r\n    deleteTest(index: number, id: number) {\r\n        this.studywrapper.study.sectionElements.splice(index, 1);\r\n        this.removeFromSection(id);\r\n        this.sectionelements.splice(index, 1);\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { DateQuestion } from '@src/app/Model/Study/StudyObjects/Questions/DateQuestion';\r\nimport { LinearScaleQuestion } from '@src/app/Model/Study/StudyObjects/Questions/LinearScaleQuestion';\r\nimport { MultipleChoiceQuestion } from '@src/app/Model/Study/StudyObjects/Questions/MultipleChoiceQuestion';\r\nimport { TextQuestion } from '@src/app/Model/Study/StudyObjects/Questions/TextQuestion';\r\nimport { Section } from '@src/app/Model/Study/StudyObjects/Section';\r\nimport { SectionElement } from '@src/app/Model/Study/StudyObjects/SectionElement';\r\nimport { TextBlock } from '@src/app/Model/Study/StudyObjects/TextBlock';\r\nimport { VibrationPattern } from '@src/app/Model/Study/StudyObjects/VibrationPattern';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n/**\r\n * Der Service ist dafür zuständig, einzelnen Objekten die richtige Farbe und das richtige Label zuzuordnen\r\n */\r\nexport class ColorService {\r\n\r\n    constructor() { }\r\n\r\n    /**\r\n     * Gibt einem Objekt den Typ seines Objekts als String zurück.\r\n     * @param item \r\n     */\r\n    getStudyObjectType(item: any): string {\r\n        switch (true) {\r\n            case item instanceof VibrationPattern:\r\n                return \"VibrationPattern\";\r\n            case item instanceof TextBlock:\r\n                return \"TextBlock\";\r\n            case item instanceof DateQuestion:\r\n                return \"DateQuestion\";\r\n            case item instanceof LinearScaleQuestion:\r\n                return \"LinearScaleQuestion\";\r\n            case item instanceof MultipleChoiceQuestion:\r\n                return \"MultipleChoiceQuestion\";\r\n            case item instanceof TextQuestion:\r\n                return \"TextQuestion\";\r\n            case item instanceof SectionElement:\r\n                return \"SectionElement\";\r\n            case item instanceof Section:\r\n                return \"Section\";\r\n            default:\r\n                return \"undefined\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gibt einem Objekt den Farbcode als String zurück, den das Objekt haben soll.\r\n     * @param item \r\n     */\r\n    getStudyObjectColor(item: any): string {\r\n        switch (true) {\r\n            case item instanceof VibrationPattern:\r\n                return \"#6D0000\";\r\n            case item instanceof TextBlock:\r\n                return \"#3e753b\";\r\n            case item instanceof DateQuestion:\r\n                return \"#4c2f27\";\r\n            case item instanceof LinearScaleQuestion:\r\n                return \"#1b5583\";\r\n            case item instanceof MultipleChoiceQuestion:\r\n                return \"#79553d\";\r\n            case item instanceof TextQuestion:\r\n                return \"#374447\";\r\n            case item instanceof SectionElement:\r\n                return \"#669ad2\";\r\n            case item instanceof Section:\r\n                return \"#c8708e\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n}\r\n","export default \".redButton {\\r\\n    color: #6D0000;\\r\\n    background-color: #FF000000;\\r\\n}\\r\\n\\r\\n.greenButton {\\r\\n    background-color: #3e753b;\\r\\n    color: white;\\r\\n}\\r\\n\\r\\n.trashCan {\\r\\n    font-size: 40px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi9xdWVzdGlvbi1lZGl0aW5nL3F1ZXN0aW9uLWVkaXRpbmcuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGNBQWM7SUFDZCwyQkFBMkI7QUFDL0I7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGVBQWU7QUFDbkIiLCJmaWxlIjoic3JjL2FwcC9zdHVkeWNyZWF0aW9uL3F1ZXN0aW9uLWVkaXRpbmcvcXVlc3Rpb24tZWRpdGluZy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnJlZEJ1dHRvbiB7XHJcbiAgICBjb2xvcjogIzZEMDAwMDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNGRjAwMDAwMDtcclxufVxyXG5cclxuLmdyZWVuQnV0dG9uIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzZTc1M2I7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbn1cclxuXHJcbi50cmFzaENhbiB7XHJcbiAgICBmb250LXNpemU6IDQwcHg7XHJcbn0iXX0= */\";","export default \"<mat-card>\\r\\n    <mat-card-title>\\r\\n        <mat-form-field style=\\\"width: 45vw;font-size:18px\\\">\\r\\n            <input matInput placeholder=\\\"Name der Studie\\\" [(ngModel)]=\\\"this.studywrapper.study.keyData.name\\\"\\r\\n                 /> </mat-form-field>\\r\\n    </mat-card-title>\\r\\n    <mat-form-field class=\\\"textblock-textarea\\\">\\r\\n        <textarea matInput [formControl]=\\\"this.shortControl\\\" [errorStateMatcher]=\\\"this.matcher\\\"\\r\\n            [placeholder]=\\\"'Kurzbeschreibung (' + this.studywrapper.study.keyData.shortDescription.text.length + '/200)'\\\"></textarea>\\r\\n            <mat-error *ngIf=\\\"this.shortControl.invalid\\\">Maximal 200 Zeichen erlaubt.</mat-error>\\r\\n    </mat-form-field>\\r\\n    <mat-form-field class=\\\"textblock-textarea\\\">\\r\\n        <textarea matInput [(ngModel)]=\\\"this.studywrapper.study.keyData.fullDescription\\\"\\r\\n            placeholder=\\\"Vollständige Beschreibung\\\"></textarea>\\r\\n    </mat-form-field>\\r\\n</mat-card>\\r\\n<br>\\r\\n<mat-card>\\r\\n    <mat-card-title style = \\\"font-size: 18px\\\">Ausschlussfragen</mat-card-title>\\r\\n    <hr />\\r\\n    Amplitude im teilnehmenden Gerät verpflichtend?&nbsp;&nbsp;<mat-slide-toggle\\r\\n        [(ngModel)]=\\\"this.studywrapper.study.keyData.amplitudeNecessary\\\"></mat-slide-toggle>\\r\\n    <hr><br>\\r\\n    <a mat-fab class=\\\"greenButton\\\" (click)=\\\"onAddQualificationQuestion()\\\" style=\\\"display: block; margin: auto;\\\">\\r\\n        <mat-icon>add</mat-icon>\\r\\n    </a>\\r\\n    <br>\\r\\n    <div *ngFor=\\\"let qualiQuestion of this.studywrapper.study.keyData.qualiQuestions; let index=index\\\">\\r\\n        <mat-card>\\r\\n            <mat-form-field style=\\\"font-size: 18px; width: 45vw;\\\">\\r\\n                <input matInput placeholder=\\\"Frage\\\" [(ngModel)]=\\\"qualiQuestion.questionText\\\" />\\r\\n            </mat-form-field>\\r\\n            &nbsp;&nbsp; Notwendige Antwort: &nbsp;&nbsp; Nein &nbsp;\\r\\n            <mat-slide-toggle [(ngModel)]=\\\"qualiQuestion.requiredAnswer\\\"></mat-slide-toggle>&nbsp;&nbsp;&nbsp;Ja<button\\r\\n                mat-icon-button class=\\\"redButton\\\" (click)=\\\"removeFromArray(this.studywrapper.study.keyData.qualiQuestions, index)\\\">\\r\\n                <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n            </button>\\r\\n        </mat-card>\\r\\n        <br>\\r\\n    </div>    \\r\\n</mat-card>\";","export default \"mat-card {\\r\\n    margin-bottom: 15px;\\r\\n    text-align: center;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi90b29sYm94ZXMvc3R1ZHlvYmplY3QtdG9vbGJveC9zdHVkeW9iamVjdC10b29sYm94LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxtQkFBbUI7SUFDbkIsa0JBQWtCO0FBQ3RCIiwiZmlsZSI6InNyYy9hcHAvc3R1ZHljcmVhdGlvbi90b29sYm94ZXMvc3R1ZHlvYmplY3QtdG9vbGJveC9zdHVkeW9iamVjdC10b29sYm94LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJtYXQtY2FyZCB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59Il19 */\";","import { Component, OnInit } from '@angular/core';\r\nimport { RandomizingStrategies } from '@src/app/Model/Randomizing/RandomizingStrategies';\r\nimport { Section } from '@src/app/Model/Study/StudyObjects/Section';\r\nimport { StudyWrapperService } from '../../services/study-wrapper/study-wrapper.service';\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { ReferenceTuple } from '@src/app/Model/Study/ReferenceTuple';\r\nimport { ColorService } from '../services/color/color.service';\r\n\r\n@Component({\r\n    selector: 'app-section-editing',\r\n    templateUrl: './section-editing.component.html',\r\n    styleUrls: ['./section-editing.component.css']\r\n})\r\n/**\r\n * Die Klasse ist zur Verwaltung der Operationen, die beim editieren von Sections benötigt werden.\r\n */\r\nexport class SectionEditingComponent implements OnInit {\r\n    /**\r\n     * In dem toolbox Array befinden sich alle Elemente, die erstellt wurden und einer Section hinzugefügt werden können.\r\n     */\r\n    toolbox = [];\r\n\r\n    /**\r\n     * In dem sections Array befinden sich alle Section die in dieser Sicht erstellt wurden.\r\n     */\r\n    sections: Section[] = [];\r\n\r\n    /**\r\n     * In diesem Array befinden sich alle Randomisierungsstrategien, die innerhalb einer Section verwendet werden können.\r\n     */\r\n    randomizers: string[] = [];\r\n\r\n    constructor(public studywrapper: StudyWrapperService, public colorService: ColorService) {\r\n        for (let randomizer in RandomizingStrategies) {\r\n            if (typeof RandomizingStrategies[randomizer] === \"number\") {\r\n                this.randomizers.push(randomizer);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Bereits erstellte Sections und SectionElements werden in das sections bzw. toolbox Array geladen.\r\n     */\r\n    ngOnInit() {\r\n        for (let section of this.studywrapper.study.sections) {\r\n            this.sections.push(section);\r\n        }\r\n\r\n        for (let sectionelement of this.studywrapper.study.sectionElements) {\r\n            this.toolbox.push(sectionelement);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sucht die Id in der Liste sectionElements aus StudyPrototype und gibt es zurück wenn es gefunden wird\r\n     * @param id\r\n     */\r\n    findSectionElementById(id: number): any {\r\n        for (let sectionelement of this.studywrapper.study.sectionElements) {\r\n            if (id == sectionelement.id) {\r\n                return sectionelement;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Eine neue default Section wird erstellt und der Studie und dem sections Array hinzugefügt.\r\n     */\r\n    onAddSection() {\r\n        let toInsert = new Section(this.studywrapper.lastID, \"\", false, true, 1);\r\n        this.sections.unshift(toInsert);\r\n        this.studywrapper.study.sections.unshift(toInsert);\r\n    }\r\n\r\n  /**\r\n   * Updated je nach Event section und synchronisiert das Model\r\n   * @param event \r\n   * @param section \r\n   */\r\n    onDrop(event: CdkDragDrop<any[]>, section: Section) {\r\n        if (\r\n            event.previousContainer.id == \"toolbox\" &&\r\n            event.container.id != \"toolbox\"\r\n        ) {\r\n            section.sectionElements.push(\r\n                new ReferenceTuple(\r\n                    event.previousContainer.data[event.previousIndex].id,\r\n                    false\r\n                )\r\n            );\r\n        } else {\r\n            if (event.previousContainer === event.container) {\r\n                moveItemInArray(\r\n                    event.container.data,\r\n                    event.previousIndex,\r\n                    event.currentIndex\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Entfernt aus dem Array targetArray an der Stelle index einen Eintrag.\r\n     */\r\n    removeFromArray(targetArray: any, index: number) {\r\n        targetArray.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Entfernt aus dem Array refsection in der Studie das Element an der Stelle Id\r\n     * @param id\r\n     */\r\n    removeFromReference(id: number) {\r\n        let index = 0;\r\n        for (let ref of this.studywrapper.study.refSections) {\r\n            if (ref.ID == id) {\r\n                this.studywrapper.study.refSections.splice(index, 1);\r\n            }\r\n            index++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Löscht eine Section aus der Studie und aus dem sections Array.\r\n     * @param index \r\n     * @param number\r\n     */\r\n    deleteSection(index: number, id: number) {\r\n        this.studywrapper.study.sections.splice(index, 1);\r\n        this.removeFromReference(id);\r\n        this.sections.splice(index, 1);\r\n    }\r\n\r\n}\r\n","import { Component, Input, OnInit, SimpleChanges } from '@angular/core';\r\nimport { PauseElement } from '@src/app/Model/Study/StudyObjects/PauseElement';\r\nimport { VibrationElement } from '@src/app/Model/Study/StudyObjects/VibrationElement';\r\n\r\n@Component({\r\n  selector: 'app-vibrationpattern-toolbox',\r\n  templateUrl: './vibrationpattern-toolbox.component.html',\r\n  styleUrls: ['./vibrationpattern-toolbox.component.css']\r\n})\r\nexport class VibrationPatternToolboxComponent implements OnInit {\r\n  /**\r\n   * In diesem Attribut befinden sich alle Elemente, die in einer Toolbox auf einer bestimmten Seite der studycreation liegen.\r\n   */\r\n  @Input()\r\n  toolbox: any[];\r\n\r\n  /**\r\n   * Enthält die Anzahl der VibrationPattern, die sich in der Toolbox befinden.\r\n   */\r\n  @Input()\r\n  vibrationpatternCount: number;\r\n\r\n  connectedLists: string[];\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Initialisiert die connectedLists mit der Anzahl der VibrationPattern die sie enthalten sollen.\r\n   */\r\n  ngOnInit() {\r\n    this.initConnectedLists(this.vibrationpatternCount);\r\n  }\r\n\r\n  /**\r\n   * Initialisiert die die connectedLists mit der Anzahl numOfLists.\r\n   * @param numOfLists \r\n   */\r\n  initConnectedLists(numOfLists) {\r\n    this.connectedLists = undefined;\r\n    for (let i = 0; i < numOfLists; i++) {\r\n      if (this.connectedLists == undefined) {\r\n        this.connectedLists = [\"vibrationpatternList\" + i];\r\n      } else {\r\n        this.connectedLists.push(\"vibrationpatternList\" + i);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ruft initConnectedLists auf, wenn sich die VibrationPatternCount geändert hat\r\n   * @param changes \r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes[\"vibrationpatternCount\"]) {\r\n      this.initConnectedLists(this.vibrationpatternCount);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prüft, ob ein Element vom Typ VibrationElement ist.\r\n   * @param val \r\n   */\r\n  isVibration(val: any): boolean {\r\n    return val instanceof VibrationElement;\r\n  }\r\n\r\n  /**\r\n   * Prüft, ob ein Element vom Typ PauseElement ist.\r\n   * @param val \r\n   */\r\n  isPause(val: any): boolean {\r\n    return val instanceof PauseElement;\r\n  }\r\n\r\n}\r\n","export default \"<div class=\\\"vibration-contianer\\\">\\r\\n    <div class=\\\"toolbox\\\">\\r\\n        <app-vibrationpattern-toolbox [toolbox]=\\\"toolbox\\\" [vibrationpatternCount]=\\\"vibrationpatterns.length\\\">\\r\\n        </app-vibrationpattern-toolbox>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"mainContent\\\">\\r\\n        <a mat-fab class=\\\"greenButton\\\" (click)=\\\"onAddVibrationPattern()\\\" style=\\\"display: block; margin: auto;\\\">\\r\\n            <mat-icon>add</mat-icon>\\r\\n        </a><br>\\r\\n        <div *ngFor=\\\"let vibrationpattern of vibrationpatterns; let index = index\\\">\\r\\n            <mat-card>\\r\\n                <mat-card-title>\\r\\n                    <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 50%; font-size:18px\\\">\\r\\n                        <input matInput placeholder=\\\"Bezeichnung\\\" [(ngModel)]=\\\"vibrationpattern.name\\\" />\\r\\n                    </mat-form-field>\\r\\n                    <button mat-icon-button class=\\\"redButton\\\" (click)=\\\"removeFromStudy(index, vibrationpattern.id)\\\">\\r\\n                        <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n                    </button>\\r\\n                </mat-card-title>\\r\\n                <div cdkDropList class=\\\"vibrationpatternList\\\" id=\\\"vibrationpatternList{{ index }}\\\"\\r\\n                    [cdkDropListData]=\\\"vibrationpattern.vibrationPatternElements\\\"\\r\\n                    (cdkDropListDropped)=\\\"onDrop($event, index)\\\">\\r\\n                    <div *ngFor=\\\"let item of vibrationpattern.vibrationPatternElements; let elIndex = index\\\">\\r\\n                        <div *ngIf=\\\"isVibration(item); then showVibration; else showPause\\\"></div>\\r\\n\\r\\n                        <ng-template #showVibration>\\r\\n                            <mat-card class=\\\"vibration-card\\\" cdkDrag>{{elIndex+1}}. Vibration&nbsp;&nbsp;\\r\\n                                <mat-form-field>\\r\\n                                    <input matInput placeholder=\\\"Länge in ms\\\"\\r\\n                                        [formControl]=\\\"this.formControls[index][elIndex][0]\\\"\\r\\n                                        [errorStateMatcher]=\\\"this.matcher\\\" />\\r\\n                                    <mat-error *ngIf=\\\"this.formControls[index][elIndex][0].invalid\\\">Falsche Eingabe.\\r\\n                                    </mat-error>\\r\\n                                </mat-form-field>&nbsp;&nbsp;\\r\\n                                <mat-form-field>\\r\\n                                    <input matInput placeholder=\\\"Amplitude (1 bis 255)\\\"\\r\\n                                        [formControl]=\\\"this.formControls[index][elIndex][1]\\\"\\r\\n                                        [errorStateMatcher]=\\\"this.matcher\\\" />\\r\\n                                    <mat-error *ngIf=\\\"this.formControls[index][elIndex][1].invalid\\\">Falsche Eingabe.\\r\\n                                    </mat-error>\\r\\n                                </mat-form-field><button mat-icon-button class=\\\"redButton\\\"\\r\\n                                    (click)=\\\"removeFromVibrationPattern(index, elIndex)\\\">\\r\\n                                    <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n                                </button></mat-card>\\r\\n                        </ng-template>\\r\\n                        <ng-template #showPause>\\r\\n                            <mat-card class=\\\"pause-card\\\" cdkDrag>{{elIndex+1}}. Pause&nbsp;&nbsp;<mat-form-field>\\r\\n                                    <input matInput placeholder=\\\"Länge in ms\\\"\\r\\n                                        [formControl]=\\\"this.formControls[index][elIndex][0]\\\"\\r\\n                                        [errorStateMatcher]=\\\"this.matcher\\\" />\\r\\n                                    <mat-error *ngIf=\\\"this.formControls[index][elIndex][0].invalid\\\">Falsche Eingabe.\\r\\n                                    </mat-error>\\r\\n\\r\\n                                </mat-form-field><button mat-icon-button class=\\\"redButton\\\"\\r\\n                                    (click)=\\\"removeFromVibrationPattern(index, elIndex)\\\">\\r\\n                                    <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n                                </button></mat-card>\\r\\n                        </ng-template>\\r\\n                        <div *ngIf=\\\"elIndex+1 != vibrationpattern.vibrationPatternElements.length\\\">\\r\\n                            <br />\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"droplistSubtitle\\\">Hier Elemente aus dem Wergzeugkasten einfügen, um eine Abfolge\\r\\n                        festzulegen.</div>\\r\\n                </div>\\r\\n            </mat-card>\\r\\n            <br>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</div>\";","import { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Inject, InjectionToken, Directive, Input, EventEmitter, ElementRef, ChangeDetectorRef, Optional, SkipSelf, Output, TemplateRef, ViewContainerRef, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document, _viewportRuler) {\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element)\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = event.target;\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support\n        // `contains` on the `document`.\n        const scrolledParentNode = target === this._document ? target.documentElement : target;\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    clone.value = source.value;\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch (_a) { }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._handles.find(handle => {\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains(target));\n                });\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            // Prevent the default action as early as possible in order to block\n            // native actions like dragging the selected text or images with the mouse.\n            event.preventDefault();\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!this._dropContainer || !this._dropContainer.isDragging()) {\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        this.withRootElement(element);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, false));\n        this._toggleNativeDragInteractions();\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        this._disabledHandles.delete(handle);\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const preview = this._preview = this._createPreviewElement();\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            this.started.next({ source: this }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && event.target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.subscribe(scrollEvent => {\n            this._updateOnScroll(scrollEvent);\n        });\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition =\n            this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance, this._initialIndex);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this)\n                });\n            });\n        }\n        this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n        this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: `${this._config.zIndex || 1000}`\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event) ?\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n            // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n            // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n            // throwing an error. The value returned here will be incorrect, but since this only\n            // breaks inside a developer tool and the value is only used for secondary information,\n            // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n            (event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }) : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const previewRect = this._previewRect;\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            x = clamp(x, minX, maxX);\n            y = clamp(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = event.target;\n            // ClientRect dimensions are based on the scroll position of the page and its parent node so\n            // we have to update the cached boundary ClientRect if the user has scrolled. Check for\n            // the `document` specifically since IE doesn't support `contains` on it.\n            if (this._boundaryRect && (target === this._document ||\n                (target !== this._boundaryElement && target.contains(this._boundaryElement)))) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        const cachedPosition = this._parentPositions.positions.get(this._document);\n        return cachedPosition ? cachedPosition.scrollPosition :\n            this._viewportRuler.getViewportScrollPosition();\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Gets the element into which the drag preview should be inserted. */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp$1(fromIndex, array.length - 1);\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n */\nconst AUTO_SCROLL_STEP = 2;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occured and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = { drag: null, delta: 0, overlaps: false };\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Direction in which the list is oriented. */\n        this._orientation = 'vertical';\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Layout direction of the drop list. */\n        this._direction = 'ltr';\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._siblings.forEach(sibling => sibling._startReceiving(this));\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            const reference = activeDraggables[0].getRootElement();\n            reference.parentNode.insertBefore(placeholder, reference);\n            activeDraggables.unshift(item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param previousIndex Index of the item when dragging started.\n     *\n     * @breaking-change 11.0.0 `previousIndex` parameter to become required.\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer, distance, previousIndex) {\n        this._reset();\n        // @breaking-change 11.0.0 Remove this fallback logic once `previousIndex` is a required param.\n        if (previousIndex == null) {\n            previousIndex = previousContainer.getItemIndex(item);\n        }\n        this.dropped.next({ item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._cacheItems();\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        this._orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, currentItem => currentItem.drag === item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* NONE */;\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        }).sort((a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                rootElement.style.transform = '';\n            }\n        });\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n    }\n    /** Caches the current items in the list and their positions. */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach(({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    });\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach(({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    });\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* NONE */;\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = new Set();\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /** Emits when the viewport has been scrolled while the user is dragging an item. */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.has(drag)) {\n            return;\n        }\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.has(drag);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nDragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\nDragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }])] });\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup',\n                providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }]\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\nconst ɵ0 = undefined;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _dir, _group, \n    /**\n     * @deprecated _scrollDispatcher parameter to become required.\n     * @breaking-change 11.0.0\n     */\n    _scrollDispatcher, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        this._scrollDispatcher = _scrollDispatcher;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            // @breaking-change 11.0.0 Remove null check for _scrollDispatcher once it's required.\n            if (!this._scrollableParentsResolved && this._scrollDispatcher) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8)); };\nCdkDropList.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], id: \"id\", enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], data: [\"cdkDropListData\", \"data\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/** Keeps track of the drop lists that are currently on the page. */\nCdkDropList._dropLists = [];\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DROP_LIST_GROUP,] }, { type: SkipSelf }] },\n    { type: ScrollDispatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n];\nCdkDropList.propDecorators = {\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DROP_LIST_GROUP]\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc1.ScrollDispatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], id: [{\n            type: Input\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n    }\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDragHandle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }])] });\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }, { type: SkipSelf }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                },\n                providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }])] });\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]',\n                providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() { return this._matchSize; }\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { matchSize: \"matchSize\", data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }])] });\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }],\n    matchSize: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]',\n                providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { matchSize: [{\n            type: Input\n        }], data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            }))).subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5,\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex\n        });\n        this._dragRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe(() => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((handles) => {\n                const childHandleElements = handles\n                    .filter(handle => handle._parentDrag === this)\n                    .map(handle => handle.element);\n                // Usually handles are only allowed to be a descendant of the drag element, but if\n                // the consumer defined a different drag root, we should allow the drag element\n                // itself to be a handle too.\n                if (this._selfHandle && this.rootElementSelector) {\n                    childHandleElements.push(this.element);\n                }\n                this._dragRef.withHandles(childHandleElements);\n            }), \n            // Listen if the state of any of the handles changes.\n            switchMap((handles) => {\n                return merge(...handles.map(item => {\n                    return item._stateChanges.pipe(startWith(item));\n                }));\n            }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                const dragRef = this._dragRef;\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            });\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`cdkDrag must be attached to an element node. ` +\n                `Currently attached to \"${rootElement.nodeName}\".`);\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        const element = coerceElement(boundary);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    matchSize: this._previewTemplate.matchSize,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(() => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(() => {\n            this.released.emit({ source: this });\n        });\n        ref.ended.subscribe(event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n    }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10)); };\nCdkDrag.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PREVIEW, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PLACEHOLDER, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_HANDLE, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { disabled: [\"cdkDragDisabled\", \"disabled\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], data: [\"cdkDragData\", \"data\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: CdkDragHandle, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [CDK_DRAG_HANDLE,] }] }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CDK_DRAG_HANDLE, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CDK_DRAG_PREVIEW,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CDK_DRAG_PLACEHOLDER,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': 'cdk-drag',\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_HANDLE]\n            }] }]; }, { started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CDK_DRAG_HANDLE, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PREVIEW]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PLACEHOLDER]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }] }); })();\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element, selector) {\n    let currentElement = element.parentElement;\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            currentElement.msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DragDropModule {\n}\nDragDropModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DragDropModule_Factory(t) { return new (t || DragDropModule)(); }, providers: [\n        DragDrop,\n    ], imports: [CdkScrollableModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: function () { return [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; }, exports: function () { return [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n\n//# sourceMappingURL=drag-drop.js.map","export default \"<a mat-fab class=\\\"greenButton\\\" (click)=\\\"onAddTextBlock()\\\" style=\\\"display: block; margin: auto;\\\">\\r\\n    <mat-icon>add</mat-icon>\\r\\n</a><br>\\r\\n<div *ngFor=\\\"let textblock of textblocks; let index = index\\\">\\r\\n    <mat-card>\\r\\n        <mat-card-title>\\r\\n            <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 50%; font-size:18px\\\">\\r\\n                <input matInput placeholder=\\\"Bezeichnung\\\" [formControl]=\\\"this.formControls[index][0]\\\"\\r\\n                    [errorStateMatcher]=\\\"this.matcher\\\" />\\r\\n                <mat-hint style=\\\"font-size: 15px;color: #f44336;\\\"\\r\\n                    *ngIf=\\\"this.formControls[index][0].hasError('required')\\\">\\r\\n                    Feld\\r\\n                    darf nicht leer sein.</mat-hint>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <button mat-icon-button class=\\\"redButton\\\" (click)=\\\"removeFromStudy(index, textblock.id)\\\">\\r\\n                <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n            </button>\\r\\n        </mat-card-title>\\r\\n        <mat-form-field class=\\\"textblock-textarea\\\">\\r\\n            <mat-label>Text</mat-label>\\r\\n            <textarea matInput [formControl]=\\\"this.formControls[index][1]\\\"\\r\\n                [errorStateMatcher]=\\\"this.matcher\\\"></textarea>\\r\\n            <mat-hint style=\\\"font-size: 15px;color: #f44336;\\\" *ngIf=\\\"this.formControls[index][1].hasError('required')\\\">\\r\\n                Feld\\r\\n                darf nicht leer sein.</mat-hint>\\r\\n        </mat-form-field>\\r\\n        <br>\\r\\n    </mat-card>\\r\\n    <br>\\r\\n</div>\";","export default \"<mat-card style=\\\"background-color: #212121;\\\"><br>\\r\\n    <mat-card-title>Werkzeugkasten</mat-card-title>\\r\\n    <div style=\\\"margin-top: 10px;\\\">\\r\\n        <mat-card-subtitle>Vibrationen oder Pausen per Drag and Drog links einfügen</mat-card-subtitle>\\r\\n    </div>\\r\\n    <mat-chip-list></mat-chip-list>\\r\\n    <mat-card-content>\\r\\n        <mat-divider></mat-divider>\\r\\n        <br />\\r\\n        <div cdkDropList id=\\\"toolbox\\\" [cdkDropListConnectedTo]=\\\"connectedLists\\\" [cdkDropListData]=\\\"toolbox\\\">\\r\\n            <div *ngFor=\\\"let tool of toolbox\\\">\\r\\n                <div *ngIf=\\\"isVibration(tool); then showVibration; else showPause\\\"></div>\\r\\n                <ng-template #showVibration>\\r\\n                    <mat-chip style=\\\"background-color: #6f8aab; cursor: move;\\\" cdkDrag>Vibration</mat-chip>\\r\\n                </ng-template>\\r\\n                <ng-template #showPause>\\r\\n                    <mat-chip style=\\\"background-color: #ba624f; cursor: move;\\\" cdkDrag>Pause</mat-chip>\\r\\n                </ng-template>\\r\\n                <br /><br />\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\";","export default \".vibration-container {\\r\\n    height: 91vh;\\r\\n}\\r\\n\\r\\n.toolbox {\\r\\n    width: 250px;\\r\\n    position: fixed;\\r\\n    z-index: 1;\\r\\n    overflow-x: hidden;\\r\\n    right: 15px;\\r\\n}\\r\\n\\r\\n.mainContent {\\r\\n    margin-right: 265px;\\r\\n}\\r\\n\\r\\nmat-chip {\\r\\n    margin: 5px;\\r\\n}\\r\\n\\r\\n.vibration-card {\\r\\n    background-color:#6f8aab;\\r\\n    cursor: move;\\r\\n    font-size: 16px;\\r\\n}\\r\\n\\r\\n.pause-card {\\r\\n    background-color:#ba624f;\\r\\n    cursor: move;\\r\\n    font-size: 16px;\\r\\n}\\r\\n\\r\\n.vibrationpatternList {\\r\\n    border-style: dashed;\\r\\n    border-width: 5px;\\r\\n    border-radius: 10px;\\r\\n    font-size: large;\\r\\n    padding: 15px;\\r\\n}\\r\\n\\r\\n.droplistSubtitle {\\r\\n    margin-top: 10px;\\r\\n    font-size: 14px;\\r\\n    text-align: center;\\r\\n}\\r\\n\\r\\n.greenButton {\\r\\n    background-color: #3e753b;\\r\\n    color: white;\\r\\n}\\r\\n\\r\\n.redButton {\\r\\n    color: #6D0000;\\r\\n    background-color: #FF000000;\\r\\n}\\r\\n\\r\\n.trashCan {\\r\\n    font-size: 40px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi92aWJyYXRpb25wYXR0ZXJuLWVkaXRpbmcvdmlicmF0aW9ucGF0dGVybi1lZGl0aW5nLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksWUFBWTtJQUNaLGVBQWU7SUFDZixVQUFVO0lBQ1Ysa0JBQWtCO0lBQ2xCLFdBQVc7QUFDZjs7QUFFQTtJQUNJLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7QUFFQTtJQUNJLHdCQUF3QjtJQUN4QixZQUFZO0lBQ1osZUFBZTtBQUNuQjs7QUFFQTtJQUNJLHdCQUF3QjtJQUN4QixZQUFZO0lBQ1osZUFBZTtBQUNuQjs7QUFFQTtJQUNJLG9CQUFvQjtJQUNwQixpQkFBaUI7SUFDakIsbUJBQW1CO0lBQ25CLGdCQUFnQjtJQUNoQixhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGVBQWU7SUFDZixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGNBQWM7SUFDZCwyQkFBMkI7QUFDL0I7O0FBRUE7SUFDSSxlQUFlO0FBQ25CIiwiZmlsZSI6InNyYy9hcHAvc3R1ZHljcmVhdGlvbi92aWJyYXRpb25wYXR0ZXJuLWVkaXRpbmcvdmlicmF0aW9ucGF0dGVybi1lZGl0aW5nLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIudmlicmF0aW9uLWNvbnRhaW5lciB7XHJcbiAgICBoZWlnaHQ6IDkxdmg7XHJcbn1cclxuXHJcbi50b29sYm94IHtcclxuICAgIHdpZHRoOiAyNTBweDtcclxuICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgIHotaW5kZXg6IDE7XHJcbiAgICBvdmVyZmxvdy14OiBoaWRkZW47XHJcbiAgICByaWdodDogMTVweDtcclxufVxyXG5cclxuLm1haW5Db250ZW50IHtcclxuICAgIG1hcmdpbi1yaWdodDogMjY1cHg7XHJcbn1cclxuXHJcbm1hdC1jaGlwIHtcclxuICAgIG1hcmdpbjogNXB4O1xyXG59XHJcblxyXG4udmlicmF0aW9uLWNhcmQge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjojNmY4YWFiO1xyXG4gICAgY3Vyc29yOiBtb3ZlO1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG59XHJcblxyXG4ucGF1c2UtY2FyZCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiNiYTYyNGY7XHJcbiAgICBjdXJzb3I6IG1vdmU7XHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbn1cclxuXHJcbi52aWJyYXRpb25wYXR0ZXJuTGlzdCB7XHJcbiAgICBib3JkZXItc3R5bGU6IGRhc2hlZDtcclxuICAgIGJvcmRlci13aWR0aDogNXB4O1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcclxuICAgIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbiAgICBwYWRkaW5nOiAxNXB4O1xyXG59XHJcblxyXG4uZHJvcGxpc3RTdWJ0aXRsZSB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG4uZ3JlZW5CdXR0b24ge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzNlNzUzYjtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxufVxyXG5cclxuLnJlZEJ1dHRvbiB7XHJcbiAgICBjb2xvcjogIzZEMDAwMDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNGRjAwMDAwMDtcclxufVxyXG5cclxuLnRyYXNoQ2FuIHtcclxuICAgIGZvbnQtc2l6ZTogNDBweDtcclxufSJdfQ== */\";","export default \"<div class=\\\"vibration-contianer\\\">\\r\\n    <div class=\\\"toolbox\\\">\\r\\n        <app-studyobject-toolbox [toolbox]=\\\"this.toolbox\\\" [playgroundCount]=\\\"sections.length\\\">\\r\\n        </app-studyobject-toolbox>\\r\\n    </div>\\r\\n\\r\\n\\r\\n    <div class=\\\"mainContent\\\">\\r\\n        <a mat-fab class=\\\"greenButton\\\" (click)=\\\"onAddSection()\\\" style=\\\"display: block; margin: auto;\\\">\\r\\n            <mat-icon>add</mat-icon>\\r\\n        </a><br>\\r\\n        <div *ngFor=\\\"let section of sections; let index = index\\\">\\r\\n            <mat-card>\\r\\n                <mat-card-title>\\r\\n                    <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 50%; font-size:18px\\\">\\r\\n                        <input matInput placeholder=\\\"Bezeichnung\\\" [(ngModel)]=\\\"section.name\\\" />\\r\\n                    </mat-form-field>&nbsp;&nbsp;\\r\\n                    <mat-form-field style=\\\"width: 20%; font-size:18px\\\">\\r\\n                        <mat-label>Randomisierung</mat-label>\\r\\n                        <mat-select [(value)]=\\\"section.randomStrategy\\\">\\r\\n                            <mat-option *ngFor=\\\"let randomizer of randomizers; let index = index\\\" [value]=\\\"index\\\">\\r\\n                                {{ this.studywrapper.getRandomizerName(index) }}\\r\\n                            </mat-option>\\r\\n                        </mat-select>\\r\\n                    </mat-form-field><button mat-icon-button class=\\\"redButton\\\" (click)=\\\"deleteSection(index, section.id)\\\">\\r\\n                        <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n                    </button>\\r\\n                </mat-card-title>\\r\\n                Für das Ergebnis relevant? &nbsp;&nbsp; Nein &nbsp;\\r\\n                <mat-slide-toggle [(ngModel)]=\\\"section.resultRelevant\\\"></mat-slide-toggle>&nbsp;&nbsp;&nbsp;Ja<br>\\r\\n                <div cdkDropList class=\\\"studyObjectList\\\" id=\\\"studyObjectList{{ index }}\\\"\\r\\n                    [cdkDropListData]=\\\"section.sectionElements\\\" (cdkDropListDropped)=\\\"onDrop($event, section)\\\">\\r\\n                    <div *ngFor=\\\"let ref of section.sectionElements; let index = index\\\">\\r\\n                        <mat-card cdkDrag\\r\\n                            [style.background-color]=\\\"this.colorService.getStudyObjectColor(findSectionElementById(ref.ID))\\\"\\r\\n                            style=\\\"cursor: move; font-size:18px\\\">{{(index+1) + \\\". \\\"+\\r\\n                findSectionElementById(ref.ID).name\\r\\n              }}&nbsp;&nbsp;&nbsp;&nbsp;<mat-slide-toggle [(ngModel)]=\\\"ref.isFixed\\\">Fixiert</mat-slide-toggle><button\\r\\n                                mat-icon-button class=\\\"redButton\\\"\\r\\n                                (click)=\\\"removeFromArray(section.sectionElements, index)\\\">\\r\\n                                <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n                            </button>\\r\\n                        </mat-card>\\r\\n                        <div *ngIf=\\\"index+1 != section.sectionElements.length\\\">\\r\\n                            <br />\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"droplistSubtitle\\\">Hier Elemente aus dem Wergzeugkasten einfügen, um eine Abfolge\\r\\n                        festzulegen.</div>\\r\\n                </div>\\r\\n            </mat-card>\\r\\n            <br>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\";","export default \"<div class=\\\"vibration-contianer\\\">\\r\\n    <div class=\\\"toolbox\\\">\\r\\n        <app-studyobject-toolbox [toolbox]=\\\"this.toolbox\\\" [playgroundCount]=\\\"1\\\"></app-studyobject-toolbox>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"mainContent\\\">\\r\\n        <mat-card>\\r\\n            \\r\\n                Studienablauf&nbsp;&nbsp;\\r\\n                <mat-form-field style=\\\"width:20%; font-size:18px\\\">\\r\\n                    <mat-label>Randomisierung</mat-label>\\r\\n                    <mat-select [(value)]=\\\"this.studywrapper.study.randomStrategy\\\">\\r\\n                        <mat-option *ngFor=\\\"let randomizer of randomizers; let index = index\\\" [value]=\\\"index\\\">\\r\\n                            {{ this.studywrapper.getRandomizerName(index) }}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n           \\r\\n            <div cdkDropList class=\\\"studyObjectList\\\" id=\\\"studyObjectList0\\\"\\r\\n                [cdkDropListData]=\\\"this.studywrapper.study.refSections\\\" (cdkDropListDropped)=\\\"onDrop($event)\\\">\\r\\n                <div *ngFor=\\\"let ref of this.studywrapper.study.refSections; let index = index\\\">\\r\\n                    <mat-card cdkDrag [style.background-color]=\\\"this.colorService.getStudyObjectColor(findSectionById(ref.ID))\\\" style=\\\"cursor: move;\\\">{{(index+1) + \\\". \\\" +\\r\\n                findSectionById(ref.ID).name\\r\\n              }}&nbsp;&nbsp;&nbsp;&nbsp;<mat-slide-toggle [(ngModel)]=\\\"ref.isFixed\\\">Fixiert</mat-slide-toggle><button\\r\\n                            mat-icon-button class=\\\"redButton\\\"\\r\\n                            (click)=\\\"removeFromArray(this.studywrapper.study.refSections, index)\\\">\\r\\n                            <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n                        </button>\\r\\n                    </mat-card>\\r\\n                    <div *ngIf=\\\"index+1 != this.studywrapper.study.refSections.length\\\">\\r\\n                        <br />\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"droplistSubtitle\\\">Hier Elemente aus dem Wergzeugkasten einfügen, um eine Abfolge festzulegen.</div>\\r\\n            </div>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <br />\\r\\n</div>\";","export default \".textblock-textarea {\\r\\n    width: 100%;\\r\\n  }\\r\\n\\r\\n  .greenButton {\\r\\n    background-color: #3e753b;\\r\\n    color: white;\\r\\n}\\r\\n\\r\\n  .redButton {\\r\\n  color: #6D0000;\\r\\n  background-color: #FF000000;\\r\\n}\\r\\n\\r\\n  .trashCan {\\r\\n  font-size: 40px;\\r\\n}\\r\\n  \\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi90ZXh0YmxvY2stZWRpdGluZy90ZXh0YmxvY2stZWRpdGluZy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksV0FBVztFQUNiOztFQUVBO0lBQ0UseUJBQXlCO0lBQ3pCLFlBQVk7QUFDaEI7O0VBRUE7RUFDRSxjQUFjO0VBQ2QsMkJBQTJCO0FBQzdCOztFQUVBO0VBQ0UsZUFBZTtBQUNqQiIsImZpbGUiOiJzcmMvYXBwL3N0dWR5Y3JlYXRpb24vdGV4dGJsb2NrLWVkaXRpbmcvdGV4dGJsb2NrLWVkaXRpbmcuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi50ZXh0YmxvY2stdGV4dGFyZWEge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfVxyXG5cclxuICAuZ3JlZW5CdXR0b24ge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzNlNzUzYjtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxufVxyXG5cclxuLnJlZEJ1dHRvbiB7XHJcbiAgY29sb3I6ICM2RDAwMDA7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI0ZGMDAwMDAwO1xyXG59XHJcblxyXG4udHJhc2hDYW4ge1xyXG4gIGZvbnQtc2l6ZTogNDBweDtcclxufVxyXG4gIFxyXG4iXX0= */\";","export default \".textblock-textarea {\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\n.greenButton {\\r\\n    background-color: #3e753b;\\r\\n    color: white;\\r\\n}\\r\\n\\r\\n.redButton {\\r\\n    color: #6D0000;\\r\\n    background-color: #FF000000;\\r\\n}\\r\\n\\r\\n.trashCan {\\r\\n    font-size: 40px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi9nZW5lcmFsLWVkaXRpbmcvZ2VuZXJhbC1lZGl0aW5nLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxXQUFXO0FBQ2Y7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGNBQWM7SUFDZCwyQkFBMkI7QUFDL0I7O0FBRUE7SUFDSSxlQUFlO0FBQ25CIiwiZmlsZSI6InNyYy9hcHAvc3R1ZHljcmVhdGlvbi9nZW5lcmFsLWVkaXRpbmcvZ2VuZXJhbC1lZGl0aW5nLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIudGV4dGJsb2NrLXRleHRhcmVhIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG4uZ3JlZW5CdXR0b24ge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzNlNzUzYjtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxufVxyXG5cclxuLnJlZEJ1dHRvbiB7XHJcbiAgICBjb2xvcjogIzZEMDAwMDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNGRjAwMDAwMDtcclxufVxyXG5cclxuLnRyYXNoQ2FuIHtcclxuICAgIGZvbnQtc2l6ZTogNDBweDtcclxufSJdfQ== */\";","export default \"<h2 mat-dialog-title>Fragetyp wählen</h2>\\r\\n<mat-dialog-content style=\\\"text-align: center;\\\">\\r\\n    <button mat-flat-button color=\\\"#3e753b\\\" (click)=\\\"onButtonClick(0)\\\">Datum/Zeit</button><br>\\r\\n    <button mat-flat-button color=\\\"#3e753b\\\" (click)=\\\"onButtonClick(1)\\\">Lineare Skala</button><br>\\r\\n    <button mat-flat-button color=\\\"#3e753b\\\" (click)=\\\"onButtonClick(2)\\\">Multiple Choice</button><br>\\r\\n    <button mat-flat-button color=\\\"#3e753b\\\" (click)=\\\"onButtonClick(3)\\\">Freitext</button><br>\\r\\n</mat-dialog-content>\\r\\n\";","import { Component, Input, OnInit, SimpleChanges } from '@angular/core';\r\nimport { DateQuestion } from '@src/app/Model/Study/StudyObjects/Questions/DateQuestion';\r\nimport { LinearScaleQuestion } from '@src/app/Model/Study/StudyObjects/Questions/LinearScaleQuestion';\r\nimport { MultipleChoiceQuestion } from '@src/app/Model/Study/StudyObjects/Questions/MultipleChoiceQuestion';\r\nimport { TextQuestion } from '@src/app/Model/Study/StudyObjects/Questions/TextQuestion';\r\nimport { Section } from '@src/app/Model/Study/StudyObjects/Section';\r\nimport { SectionElement } from '@src/app/Model/Study/StudyObjects/SectionElement';\r\nimport { TextBlock } from '@src/app/Model/Study/StudyObjects/TextBlock';\r\nimport { VibrationPattern } from '@src/app/Model/Study/StudyObjects/VibrationPattern';\r\nimport { ColorService } from '../../services/color/color.service';\r\n\r\n@Component({\r\n    selector: 'app-studyobject-toolbox',\r\n    templateUrl: './studyobject-toolbox.component.html',\r\n    styleUrls: ['./studyobject-toolbox.component.css']\r\n})\r\nexport class StudyObjectToolboxComponent implements OnInit {\r\n    /**\r\n     * Enthält alle Elemente, die in der Toolbox verfügbar sind.\r\n     */\r\n    @Input()\r\n    toolbox = [];\r\n\r\n    /**\r\n     * Enthält die Anzahl der Elemente, die sich in der Toolbox befinden.\r\n     */\r\n    @Input()\r\n    playgroundCount: number;\r\n\r\n    /**\r\n     * Namen aller Elemente die sich in der Toolbox befinden.\r\n     */\r\n    connectedLists: string[];\r\n\r\n    constructor(public colorService: ColorService) { }\r\n\r\n    /**\r\n     * Initialisiert connectedLists mit default Werten und nummeriert diese von 0 bis zur Anzahl von playgroundCount.\r\n     */\r\n    ngOnInit() {\r\n        this.initConnectedLists(this.playgroundCount);\r\n    }\r\n\r\n    /**\r\n     * Initialisiert connectedLists mit default Werten und nummeriert diese mit numOfLists.\r\n     * @param numOfLists \r\n     */\r\n    initConnectedLists(numOfLists) {\r\n        this.connectedLists = undefined;\r\n        for (let i = 0; i < numOfLists; i++) {\r\n            if (this.connectedLists == undefined) {\r\n                this.connectedLists = [\"studyObjectList\" + i];\r\n            } else {\r\n                this.connectedLists.push(\"studyObjectList\" + i);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialisiert connectedLists neu.\r\n     * @param changes \r\n     */\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes[\"playgroundCount\"]) {\r\n            this.initConnectedLists(this.playgroundCount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Liefert die Liste aller Objekte des Typs item in der toolbox zurück.\r\n     * @param item \r\n     */\r\n    getObjectsPerType(item: string): any[] {\r\n        let result = [];\r\n        switch (item) {\r\n            case \"DateQuestion\":\r\n                for (let element of this.toolbox) {\r\n                    if (element instanceof DateQuestion) result.push(element);\r\n                }\r\n                break;\r\n            case \"VibrationPattern\":\r\n                for (let element of this.toolbox) {\r\n                    if (element instanceof VibrationPattern) result.push(element);\r\n                }\r\n                break;\r\n            case \"TextBlock\":\r\n                for (let element of this.toolbox) {\r\n                    if (element instanceof TextBlock) result.push(element);\r\n                }\r\n                break;\r\n            case \"LinearScaleQuestion\":\r\n                for (let element of this.toolbox) {\r\n                    if (element instanceof LinearScaleQuestion) result.push(element);\r\n                }\r\n                break;\r\n            case \"MultipleChoiceQuestion\":\r\n                for (let element of this.toolbox) {\r\n                    if (element instanceof MultipleChoiceQuestion) result.push(element);\r\n                }\r\n                break;\r\n            case \"TextQuestion\":\r\n                for (let element of this.toolbox) {\r\n                    if (element instanceof TextQuestion) result.push(element);\r\n                }\r\n                break;\r\n            case \"SectionElement\":\r\n                for (let element of this.toolbox) {\r\n                    if (element instanceof SectionElement) result.push(element);\r\n                }\r\n                break;\r\n            case \"Section\":\r\n                for (let element of this.toolbox) {\r\n                    if (element instanceof Section) result.push(element);\r\n                }\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Zählt alle Objekte in der Toolbox.\r\n     * @param item \r\n     */\r\n    getAmount(item: string): number {\r\n        let counter = 0;\r\n        for (let element of this.toolbox) {\r\n            switch (item) {\r\n                case \"DateQuestion\":\r\n                    if (element instanceof DateQuestion) counter++;\r\n                    break;\r\n                case \"VibrationPattern\":\r\n                    if (element instanceof VibrationPattern) counter++;\r\n                    break;\r\n                case \"TextBlock\":\r\n                    if (element instanceof TextBlock) counter++;\r\n                    break;\r\n                case \"LinearScaleQuestion\":\r\n                    if (element instanceof LinearScaleQuestion) counter++;\r\n                    break;\r\n                case \"MultipleChoiceQuestion\":\r\n                    if (element instanceof MultipleChoiceQuestion) counter++;\r\n                    break;\r\n                case \"TextQuestion\":\r\n                    if (element instanceof TextQuestion) counter++;\r\n                    break;\r\n                case \"SectionElement\":\r\n                    if (element instanceof SectionElement) counter++;\r\n                    break;\r\n                case \"Section\":\r\n                    if (element instanceof Section) counter++;\r\n                    break;\r\n            }\r\n        }\r\n        return counter;\r\n    }\r\n\r\n}\r\n","import { Routes } from \"@angular/router\";\r\nimport { GeneralEditingComponent } from \"./general-editing/general-editing.component\";\r\nimport { QuestionEditingComponent } from \"./question-editing/question-editing.component\";\r\nimport { SectionEditingComponent } from \"./section-editing/section-editing.component\";\r\nimport { SectionElementEditingComponent } from \"./sectionelement-editing/sectionelement-editing.component\";\r\nimport { SequenceEditingComponent } from \"./sequence-editing/sequence-editing.component\";\r\nimport { TextBlockEditingComponent } from \"./textblock-editing/textblock-editing.component\";\r\nimport { VibrationPatternEditingComponent } from \"./vibrationpattern-editing/vibrationpattern-editing.component\";\r\n\r\nexport const routes: Routes = [\r\n    {\r\n      path: \"general-editing\",\r\n      component: GeneralEditingComponent,\r\n    },\r\n    {\r\n      path: \"question-editing\",\r\n      component: QuestionEditingComponent,\r\n    },\r\n    {\r\n      path: \"section-editing\",\r\n      component: SectionEditingComponent,\r\n    },\r\n    {\r\n      path: \"sectionelement-editing\",\r\n      component: SectionElementEditingComponent,\r\n    },\r\n    {\r\n      path: \"sequence-editing\",\r\n      component: SequenceEditingComponent,\r\n    },\r\n    {\r\n      path: \"textblock-editing\",\r\n      component: TextBlockEditingComponent,\r\n    },\r\n    {\r\n      path: \"vibrationpattern-editing\",\r\n      component: VibrationPatternEditingComponent,\r\n    }\r\n  ];"],"sourceRoot":"webpack:///"}