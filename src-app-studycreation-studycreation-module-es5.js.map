{"version":3,"sources":["webpack:///src/app/studycreation/vibrationpattern-editing/vibrationpattern-editing.component.ts","webpack:///src/app/studycreation/question-editing/question-editing.component.ts","webpack:///src/app/studycreation/toolboxes/vibrationpattern-toolbox/vibrationpattern-toolbox.component.css","webpack:///src/app/studycreation/general-editing/general-editing.component.ts","webpack:///src/app/studycreation/error-state-matchers/ValidErrorStateMatcher.ts","webpack:///src/app/studycreation/error-state-matchers/NumberErrorStateMatcher.ts","webpack:///src/app/studycreation/toolboxes/studyobject-toolbox/studyobject-toolbox.component.html","webpack:///src/app/studycreation/section-editing/section-editing.component.css","webpack:///src/app/studycreation/sectionelement-editing/sectionelement-editing.component.css","webpack:///src/app/studycreation/question-editing/question-selection-dialog/question-selection-dialog.component.css","webpack:///src/app/studycreation/sectionelement-editing/sectionelement-editing.component.html","webpack:///src/app/studycreation/textblock-editing/textblock-editing.component.ts","webpack:///src/app/studycreation/sequence-editing/sequence-editing.component.css","webpack:///src/app/studycreation/studycreation.module.ts","webpack:///src/app/studycreation/question-editing/question-editing.component.html","webpack:///src/app/studycreation/question-editing/question-selection-dialog/question-selection-dialog.component.ts","webpack:///src/app/studycreation/sequence-editing/sequence-editing.component.ts","webpack:///src/app/studycreation/studycreation-routing.module.ts","webpack:///src/app/studycreation/sectionelement-editing/sectionelement-editing.component.ts","webpack:///src/app/studycreation/services/color/color.service.ts","webpack:///src/app/studycreation/question-editing/question-editing.component.css","webpack:///src/app/studycreation/general-editing/general-editing.component.html","webpack:///src/app/studycreation/toolboxes/studyobject-toolbox/studyobject-toolbox.component.css","webpack:///src/app/studycreation/section-editing/section-editing.component.ts","webpack:///src/app/studycreation/toolboxes/vibrationpattern-toolbox/vibrationpattern-toolbox.component.ts","webpack:///src/app/studycreation/vibrationpattern-editing/vibrationpattern-editing.component.html","webpack:///node_modules/@angular/cdk/fesm2015/drag-drop.js","webpack:///src/app/studycreation/textblock-editing/textblock-editing.component.html","webpack:///src/app/studycreation/toolboxes/vibrationpattern-toolbox/vibrationpattern-toolbox.component.html","webpack:///src/app/studycreation/vibrationpattern-editing/vibrationpattern-editing.component.css","webpack:///src/app/studycreation/section-editing/section-editing.component.html","webpack:///src/app/studycreation/sequence-editing/sequence-editing.component.html","webpack:///src/app/studycreation/textblock-editing/textblock-editing.component.css","webpack:///src/app/studycreation/general-editing/general-editing.component.css","webpack:///src/app/studycreation/question-editing/question-selection-dialog/question-selection-dialog.component.html","webpack:///src/app/studycreation/toolboxes/studyobject-toolbox/studyobject-toolbox.component.ts","webpack:///src/app/studycreation/studycreation.routes.ts"],"names":["VibrationPatternEditingComponent","studywrapper","compareVibration","comparePause","toolbox","vibrationpatterns","formControls","matcher","study","studyObjects","forEach","studyobject","unshift","i","vibPattern","j","vibrationPatternElements","vpE","addVibrationFormControl","vibIndex","placeIndex","vibrationPatternElement","durationControl","validators","required","min","amplitudeControl","max","splice","patchValue","duration","toInsert","amplitude","valueChanges","subscribe","value","toChange","Number","lastID","event","previousContainer","id","data","previousIndex","container","currentIndex","index","removeFromSectionElement","filter","element","sectionElements","sectionelement","studyObjectRef","ID","targetArray","elIndex","val","selector","template","QuestionEditingComponent","dialog","questions","questionTypes","addFormControl","question","maxChoicesControl","choicesControl","maxChoices","numberOfChoices","answerOptions","push","dialogRef","open","afterClosed","result","target","studyObject","GeneralEditingComponent","shortControl","maxLength","keyData","shortDescription","text","length","substr","qualiQuestions","ValidErrorStateMatcher","control","form","valid","NumberErrorStateMatcher","success","TextBlockEditingComponent","textblocks","textblock","titleControl","textControl","name","StudycreationModule","declarations","imports","QuestionSelectionDialogComponent","questionType","questionResult","undefined","close","SequenceEditingComponent","colorService","randomizers","randomizer","sections","section","refSections","StudyCreationRoutingModule","forChild","exports","SectionElementEditingComponent","sectionelements","Error","startsWith","sectionElementRef","removeFromSection","ColorService","item","providedIn","SectionEditingComponent","ref","removeFromReference","VibrationPatternToolboxComponent","initConnectedLists","vibrationpatternCount","numOfLists","connectedLists","changes","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","multiplier","toLowerCase","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","getPropertyValue","split","map","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","top","right","bottom","left","width","height","isInsideClientRect","x","y","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","_viewportRuler","positions","Map","clear","elements","set","scrollPosition","getViewportScrollPosition","scrollTop","scrollLeft","cachedPosition","get","scrolledParentNode","documentElement","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","position","node","contains","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","transferCanvasData","transferInputData","transferData","callback","descendantElements","cloneElements","cloneUniqueId","type","context","getContext","drawImage","_a","passiveEventListenerOptions","passive","activeEventListenerOptions","MOUSE_EVENT_IGNORE_TIME","DragRef","_config","_ngZone","_dragDropRegistry","_passiveTransform","_activeTransform","_moveEvents","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","next","targetHandle","handle","has","disabled","_initializeDragSequence","_rootElement","_pointerMove","preventDefault","pointerPosition","_getPointerPositionOnPage","_hasStartedDragging","distanceX","Math","abs","_pickupPositionOnPage","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","_endDragSequence","_dropContainer","isDragging","run","_startDragSequence","_previewRect","_preview","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","withRootElement","_parentPositions","registerDragItem","_placeholder","getPlaceholderElement","getRootElement","handles","_toggleNativeDragInteractions","_previewTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","_ownerSVGElement","ownerSVGElement","boundaryElement","unsubscribe","change","_containInsideBoundaryOnResize","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","transform","add","direction","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","isTouchEvent","_lastTouchEventTime","dropContainer","parent","parentNode","preview","_createPreviewElement","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","display","body","appendChild","replaceChild","getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","cache","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","pointerMove","pointerUp","scroll","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","isPointerOverContainer","_isOverContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewClass","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","pointerEvents","margin","zIndex","classList","Array","isArray","className","Promise","resolve","placeholderRect","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","constrainPosition","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","clamp","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","setFreeDragPosition","touch","mouse","scrollDifference","handleScroll","newValue","round","removeChild","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp$1","to","transferArrayItem","currentArray","targetIndex","copyArrayItem","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","AUTO_SCROLL_STEP","DropListRef","autoScrollDisabled","enterPredicate","sorted","_isDragging","_itemPositions","_previousSwap","drag","overlaps","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_cachedShadowRoot","_startScrollInterval","pipe","_scrollNode","incrementVerticalScroll","incrementHorizontalScroll","withScrollableParents","registerDropContainer","removeDropContainer","styles","_initialScrollSnap","msScrollSnapType","scrollSnapType","_cacheItems","sibling","_startReceiving","_listenToScrollEvents","newIndex","_draggables","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","parentElement","_shouldEnterAsFirstChild","reference","_cacheItemPositions","_cacheParentPositions","_reset","items","previousItems","_withDropContainer","draggedItems","every","connectedTo","slice","orientation","_scrollableElements","reverse","findIndex","currentItem","size","pointerDelta","_clientRect","siblings","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","offset","elementToOffset","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","window","elementToMeasure","getVisibleElement","sort","a","b","_stopReceiving","immediateSibling","end","itemPositions","reversed","lastItemRect","firstItemRect","_","floor","_canReceive","elementFromPoint","_getShadowRoot","nativeElement","activeSiblings","_sortFromLastPointerPosition","isReceiving","shadowRoot","predicate","amount","scrollBy","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_preventDefaultWhileDragging","_persistentTouchmoveListener","e","options","config","_clearGlobalListeners","instance","ɵfac","DragDropRegistry_Factory","t","ɵprov","factory","token","ctorParameters","decorators","args","DEFAULT_CONFIG","DragDrop","DragDrop_Factory","CDK_DRAG_PARENT","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","CdkDropListGroup_Factory","ɵdir","selectors","inputs","exportAs","features","provide","useExisting","propDecorators","providers","CDK_DRAG_CONFIG","_uniqueIdCounter","CDK_DROP_LIST","ɵ0","CdkDropList","dragDrop","_changeDetectorRef","_dir","_group","_scrollDispatcher","_destroyed","_unsortedItems","_dropListRef","createDropList","_assignDefaults","_setupInputSyncSubscription","_handleEvents","_dropLists","_syncItemsWithRef","documentPosition","_dragRef","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","dispose","withDirection","correspondingDropList","list","ngDevMode","console","warn","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","withOrientation","markForCheck","emit","draggingDisabled","listAutoScrollDisabled","listOrientation","withItems","getSortedItems","CdkDropList_Factory","hostAttrs","hostVars","hostBindings","CdkDropList_HostBindings","rf","ctx","outputs","useValue","host","CDK_DRAG_HANDLE","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","CdkDragHandle_Factory","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","templateRef","CdkDragPlaceholder_Factory","CDK_DRAG_PREVIEW","CdkDragPreview","_matchSize","CdkDragPreview_Factory","CdkDrag","_viewContainerRef","_selfHandle","observer","subscription","movedEvent","createDrag","addItem","_syncInputs","reset","getFreeDragPosition","onStable","_updateRootElement","childHandleElements","rootElementSelector","withHandles","handleInstance","dragRef","disableHandle","enableHandle","freeDragPosition","rootSelectorChange","positionChange","firstChange","removeItem","getClosestMatchingAncestor","boundary","dir","withBoundaryElement","_getBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","CdkDrag_Factory","contentQueries","CdkDrag_ContentQueries","dirIndex","_t","first","CdkDrag_HostBindings","descendants","currentElement","matches","msMatchesSelector","DragDropModule","ɵmod","ɵinj","DragDropModule_Factory","ngJitMode","StudyObjectToolboxComponent","playgroundCount","counter","routes","path","component"],"mappings":"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","file":"src-app-studycreation-studycreation-module-es5.js","sourcesContent":["import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { PauseElement } from '@src/app/Model/Study/StudyObjects/PauseElement';\r\nimport { VibrationElement } from '@src/app/Model/Study/StudyObjects/VibrationElement';\r\nimport { VibrationPattern } from '@src/app/Model/Study/StudyObjects/VibrationPattern';\r\nimport { StudyWrapperService } from '../../services/study-wrapper/study-wrapper.service';\r\nimport { NumberErrorStateMatcher } from '../error-state-matchers/NumberErrorStateMatcher';\r\n\r\n@Component({\r\n    selector: 'app-vibrationpattern-editing',\r\n    templateUrl: './vibrationpattern-editing.component.html',\r\n    styleUrls: ['./vibrationpattern-editing.component.css']\r\n})\r\nexport class VibrationPatternEditingComponent implements OnInit {\r\n    /**\r\n     * Einfaches vorinitialisiertes VibrationElement\r\n     */\r\n    compareVibration = new VibrationElement(1, 1);\r\n\r\n    /**\r\n     * Einfaches vorinitialisiertes PauseELement\r\n     */\r\n    comparePause = new PauseElement(0);\r\n\r\n    /**\r\n     * Toolbox in der das compareVibration Element und comparePause Element liegen.\r\n     */\r\n    toolbox = [this.compareVibration, this.comparePause];\r\n\r\n    /**\r\n     * Array in dem alle VibrationPattern die erstellt wurden liegen.\r\n     */\r\n    vibrationpatterns: VibrationPattern[] = [];\r\n\r\n    formControls: FormControl[][][] = [];\r\n\r\n    matcher = new NumberErrorStateMatcher();\r\n\r\n    constructor(private studywrapper: StudyWrapperService) { }\r\n\r\n    /**\r\n     * VibrationPattern aus der Study werden in das vibrationpatterns Array in der Klasse geladen.\r\n     */\r\n    ngOnInit() {\r\n        this.studywrapper.study.studyObjects.forEach((studyobject) => {\r\n            if (studyobject instanceof VibrationPattern) {\r\n                this.vibrationpatterns.unshift(studyobject);\r\n                this.formControls.unshift([[]]);\r\n            }\r\n        });\r\n        let i = 0;\r\n        for (let vibPattern of this.vibrationpatterns) {\r\n            let j = 0;\r\n            for (let vpE of vibPattern.vibrationPatternElements) {\r\n                this.addVibrationFormControl(i, j, vpE);\r\n                j++;\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param vibIndex \r\n     * @param placeIndex \r\n     * @param vibrationPatternElement \r\n     */\r\n    addVibrationFormControl(vibIndex: number, placeIndex: number, vibrationPatternElement: any) {\r\n        let durationControl = new FormControl(\"\", {\r\n            validators: [Validators.required, Validators.min(0)]\r\n        });\r\n        let amplitudeControl = new FormControl(\"\", {\r\n            validators: [Validators.required, Validators.min(1), Validators.max(255)]\r\n        })\r\n        this.formControls[vibIndex].splice(placeIndex, 0,\r\n            [\r\n                durationControl, amplitudeControl\r\n            ]\r\n        );\r\n        durationControl.patchValue(vibrationPatternElement.duration);\r\n        let toInsert = 1;\r\n        if (vibrationPatternElement.amplitude) {\r\n            toInsert = vibrationPatternElement.amplitude;\r\n        }\r\n        amplitudeControl.patchValue(toInsert);\r\n        durationControl.valueChanges.subscribe(value => {\r\n            let toChange = value;\r\n            if (value < 0) {\r\n                toChange = 0;\r\n            }\r\n            if (!Number(value)) {\r\n                toChange = 1;\r\n            }\r\n            vibrationPatternElement.duration = toChange;\r\n        });\r\n        amplitudeControl.valueChanges.subscribe(value => {\r\n            let toChange = value;\r\n            if (value < 1) {\r\n                toChange = 1;\r\n            }\r\n            if (value > 255) {\r\n                toChange = 255;\r\n            }\r\n            if (!Number(value)) {\r\n                toChange = 1;\r\n            }\r\n            vibrationPatternElement.amplitude = toChange;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Ein neues leeres VibrationPattern wird erstellt.\r\n     */\r\n    onAddVibrationPattern() {\r\n        let toInsert = new VibrationPattern(\r\n            this.studywrapper.lastID, \"\", \"\"\r\n        );\r\n        this.vibrationpatterns.unshift(toInsert);\r\n        this.studywrapper.study.studyObjects.unshift(toInsert);\r\n        this.formControls.unshift([[]]);\r\n    }\r\n\r\n    /**\r\n     * Beim draggen eines Vibration oder PauseElements wird das VibrationPattern entsprechend editiert\r\n     * @param event \r\n     * @param vibIndex \r\n     */\r\n    onDrop(event: CdkDragDrop<any[]>, vibIndex: number) {\r\n        if (event.previousContainer.id == \"toolbox\") {\r\n            let toInsert: (VibrationElement | PauseElement);\r\n            if (event.previousContainer.data[event.previousIndex] instanceof VibrationElement) {\r\n                toInsert = new VibrationElement(1, 1);\r\n            } else {\r\n                toInsert = new PauseElement(1);\r\n            }\r\n            event.container.data.splice(event.currentIndex, 0, toInsert);\r\n            this.addVibrationFormControl(vibIndex, event.currentIndex, toInsert);\r\n        }\r\n        if (event.previousContainer === event.container) {\r\n            moveItemInArray(\r\n                event.container.data,\r\n                event.previousIndex,\r\n                event.currentIndex\r\n            );\r\n            moveItemInArray(\r\n                this.formControls[vibIndex],\r\n                event.previousIndex,\r\n                event.currentIndex\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Das VibrationPattern mit der angegebene id wird aus der Studie und der Webapp entfernt. \r\n     * @param index \r\n     * @param id \r\n     */\r\n    removeFromStudy(index: number, id: number) {\r\n        this.vibrationpatterns.splice(index, 1);\r\n        this.removeFromSectionElement(id);\r\n        this.formControls.splice(index, 1);\r\n        this.studywrapper.study.studyObjects = this.studywrapper.study.studyObjects.filter(element => element.id != id);\r\n    }\r\n\r\n    /**\r\n     * Entfernt ein VibrationPattern von allen SectionElements in der Studie\r\n     * @param id \r\n     */\r\n    removeFromSectionElement(id: number) {\r\n        for (let sectionelement of this.studywrapper.study.sectionElements) {\r\n            let index = 0;\r\n            for (let studyObjectRef of sectionelement.studyObjects) {\r\n                if (studyObjectRef.ID == id) {\r\n                    sectionelement.studyObjects.splice(index, 1);\r\n                }\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Entfernt ein Element aus dem Array\r\n     * @param targetArray \r\n     * @param index \r\n     */\r\n    removeFromArray(targetArray: any, index: number) {\r\n        targetArray.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Entfernt ein Vibration oder Pause Element von einem VibrationPattern\r\n     * @param vibIndex \r\n     * @param elIndex \r\n     */\r\n    removeFromVibrationPattern(vibIndex: number, elIndex: number) {\r\n        this.vibrationpatterns[vibIndex].vibrationPatternElements.splice(elIndex, 1);\r\n        this.formControls[vibIndex].splice(elIndex, 1);\r\n    }\r\n\r\n    /**\r\n     * Prüft, ob ein Element vom Typ VibrationElement ist.\r\n     * @param val \r\n     */\r\n    isVibration(val: any): boolean {\r\n        return val instanceof VibrationElement;\r\n    }\r\n\r\n    /**\r\n     * Prüft, ob ein Element vom Typ PauseElement ist.\r\n     * @param val \r\n     */\r\n    isPause(val: any): boolean {\r\n        return val instanceof PauseElement;\r\n    }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AbstractQuestion } from '@src/app/Model/Study/StudyObjects/Questions/AbstractQuestion';\r\nimport { StudyWrapperService } from '../../services/study-wrapper/study-wrapper.service';\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { LinearScaleQuestion } from '@src/app/Model/Study/StudyObjects/Questions/LinearScaleQuestion';\r\nimport { MultipleChoiceQuestion } from '@src/app/Model/Study/StudyObjects/Questions/MultipleChoiceQuestion';\r\nimport { QuestionSelectionDialogComponent } from './question-selection-dialog/question-selection-dialog.component';\r\nimport { AbstractStudyObject } from '@src/app/Model/Study/StudyObjects/AbstractStudyObject';\r\nimport { VibrationPattern } from '@src/app/Model/Study/StudyObjects/VibrationPattern';\r\nimport { TextBlock } from '@src/app/Model/Study/StudyObjects/TextBlock';\r\nimport { DateQuestion } from '@src/app/Model/Study/StudyObjects/Questions/DateQuestion';\r\nimport { TextQuestion } from '@src/app/Model/Study/StudyObjects/Questions/TextQuestion';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { NumberErrorStateMatcher } from '../error-state-matchers/NumberErrorStateMatcher';\r\n\r\n@Component({\r\n    selector: 'app-question-editing',\r\n    templateUrl: './question-editing.component.html',\r\n    styleUrls: ['./question-editing.component.css']\r\n})\r\nexport class QuestionEditingComponent implements OnInit {\r\n    questions: AbstractQuestion[] = [];\r\n    questionTypes = [\"Datum/Zeit\", \"Lineare Skala\", \"Multiple Choice\", \"Text\"];\r\n\r\n    formControls: FormControl[][] = [];\r\n\r\n    matcher: NumberErrorStateMatcher = new NumberErrorStateMatcher();\r\n\r\n    constructor(public studywrapper: StudyWrapperService, private dialog: MatDialog) { }\r\n\r\n    /**\r\n     * Überträgt aus einer gegebenen Studie alle Fragen in das questions Array\r\n     */\r\n    ngOnInit() {\r\n        this.studywrapper.study.studyObjects.forEach((studyobject) => {\r\n            if (studyobject instanceof AbstractQuestion) {\r\n                this.questions.unshift(studyobject);\r\n                this.addFormControl(studyobject);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Prüft, ob ein bestimmtes Objekt eine LinearScaleQuestion oder eine \r\n     * MultipleChoiceQuestion ist. Der entsprechende Typ wird als string zurückgegeben.\r\n     * @param question \r\n     */\r\n    isLinearScaleQuestion(question) {\r\n        if (question instanceof LinearScaleQuestion) {\r\n            return \"linearScale\";\r\n        } else if (question instanceof MultipleChoiceQuestion) {\r\n            return \"multipleChoice\";\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Ergänzt die übergebene MultipleChoiceQuestion um eine vordefinierte Antwort Option\r\n     * @param question \r\n     */\r\n    addFormControl(question: AbstractQuestion) {\r\n        let maxChoicesControl = new FormControl(\"\", {\r\n            validators: [Validators.min(1), Validators.required]\r\n        });\r\n        let choicesControl = new FormControl(\"\", { validators: [Validators.min(2), Validators.max(12), Validators.required] });\r\n        this.formControls.unshift([maxChoicesControl, choicesControl]);\r\n        maxChoicesControl.patchValue((question as MultipleChoiceQuestion).maxChoices);\r\n        choicesControl.patchValue((question as LinearScaleQuestion).numberOfChoices);\r\n        maxChoicesControl.valueChanges.subscribe(value => {\r\n            let toChange = value;\r\n            if (value < 0) {\r\n                toChange = 0;\r\n            }\r\n            if (!Number(value)) {\r\n                toChange = 1;\r\n            }\r\n            (question as MultipleChoiceQuestion).maxChoices = toChange;\r\n        });\r\n        choicesControl.valueChanges.subscribe(value => {\r\n            let toChange = value;\r\n            if (value < 2) {\r\n                toChange = 2;\r\n            }\r\n            if (value > 12) {\r\n                toChange = 12;\r\n            }\r\n            if (!Number(value)) {\r\n                toChange = 1;\r\n            }\r\n            (question as LinearScaleQuestion).numberOfChoices = toChange;\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Ergänzt die übergebene MultipleChoiceQuestion um eine vordefinierte Antwort Option\r\n     * @param question \r\n     */\r\n    onAddAnswerChoice(question: MultipleChoiceQuestion) {\r\n        question.answerOptions.push(\"\");\r\n    }\r\n\r\n    /**\r\n     * Fügt die erstellte Frage in die Studie und die questions Liste ein\r\n     */\r\n    onAddQuestion() {\r\n        let dialogRef = this.dialog.open(QuestionSelectionDialogComponent);\r\n        dialogRef.afterClosed().subscribe(result => {\r\n            if (result) {\r\n                this.questions.unshift(result);\r\n                this.studywrapper.study.studyObjects.unshift(result);\r\n                this.addFormControl(result);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Entfernt aus dem Array targetArray an der Stelle index einen Eintrag.\r\n     * @param targetArray \r\n     * @param index \r\n     */\r\n    removeFromArray(targetArray: any, index: number) {\r\n        targetArray.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Die AntwortOption in einer MultipleChoiceQuestion an der Stelle index wird aktualisiert.\r\n     * @param question \r\n     * @param index \r\n     * @param event \r\n     */\r\n    valueUpdate(question, index, event) {\r\n        question.answerOptions[index] = event.target.value;\r\n    }\r\n\r\n    /**\r\n     * Entfernt das Element an der Stelle index aus der Liste questions und entfernt das \r\n     * Element mit der id aus der Liste studyObjects in StudyPrototype.\r\n     * @param index \r\n     * @param id \r\n     */\r\n    removeFromStudy(index: number, id: number) {\r\n        this.questions.splice(index, 1);\r\n        this.removeFromSectionElement(id);\r\n        this.formControls.splice(index, 1);\r\n        this.studywrapper.study.studyObjects = this.studywrapper.study.studyObjects.filter(element => element.id != id);\r\n    }\r\n\r\n    /**\r\n     * Entfernt das Element an der Stelle index aus der Liste questions und \r\n     * entfernt das Element mit der id aus der Liste studyObjects in StudyPrototype.\r\n     * @param id \r\n     */\r\n    removeFromSectionElement(id: number) {\r\n        for (let sectionelement of this.studywrapper.study.sectionElements) {\r\n            let index = 0;\r\n            for (let studyObjectRef of sectionelement.studyObjects) {\r\n                if (studyObjectRef.ID == id) {\r\n                    sectionelement.studyObjects.splice(index, 1);\r\n                }\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gibt den Text zurück, welchen der User für einen bestimmten Objekttyp sehen soll.\r\n     * @param studyObject \r\n     */\r\n    getStudyObjectTypeName(studyObject: AbstractStudyObject): string {\r\n        switch (true) {\r\n            case studyObject instanceof VibrationPattern:\r\n                return \"VibrationPattern\";\r\n            case studyObject instanceof TextBlock:\r\n                return \"TextBlock\";\r\n            case studyObject instanceof DateQuestion:\r\n                return \"Datum\";\r\n            case studyObject instanceof LinearScaleQuestion:\r\n                return \"Lineare Skala\";\r\n            case studyObject instanceof MultipleChoiceQuestion:\r\n                return \"Multiple Choice\";\r\n            case studyObject instanceof TextQuestion:\r\n                return \"Freitext\";\r\n            default:\r\n                return \"undefined\";\r\n        }\r\n    }\r\n\r\n}\r\n","export default \"mat-card {\\r\\n    text-align: center;\\r\\n}\\r\\n\\r\\nmat-chip {\\r\\n    width: 100%;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi90b29sYm94ZXMvdmlicmF0aW9ucGF0dGVybi10b29sYm94L3ZpYnJhdGlvbnBhdHRlcm4tdG9vbGJveC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksV0FBVztBQUNmIiwiZmlsZSI6InNyYy9hcHAvc3R1ZHljcmVhdGlvbi90b29sYm94ZXMvdmlicmF0aW9ucGF0dGVybi10b29sYm94L3ZpYnJhdGlvbnBhdHRlcm4tdG9vbGJveC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsibWF0LWNhcmQge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG5tYXQtY2hpcCB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxufSJdfQ== */\";","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { QualificationQuestion } from '@src/app/Model/Study/StudyObjects/Questions/QualificationQuestion';\r\nimport { StudyWrapperService } from '../../services/study-wrapper/study-wrapper.service';\r\nimport { ValidErrorStateMatcher } from '../error-state-matchers/ValidErrorStateMatcher';\r\n\r\n@Component({\r\n    selector: 'app-general-editing',\r\n    templateUrl: './general-editing.component.html',\r\n    styleUrls: ['./general-editing.component.css']\r\n})\r\nexport class GeneralEditingComponent implements OnInit {\r\n    constructor(public studywrapper: StudyWrapperService) { }\r\n\r\n    shortControl: FormControl = new FormControl(\"\", {validators: Validators.maxLength(200)});\r\n\r\n    matcher: ValidErrorStateMatcher = new ValidErrorStateMatcher();\r\n\r\n    /**\r\n     * Initialisiert den Wert der ShortDescription\r\n     */\r\n    ngOnInit() {\r\n        this.shortControl.patchValue(this.studywrapper.study.keyData.shortDescription.text);\r\n        this.shortControl.valueChanges.subscribe(value => {\r\n            let toChange = value;\r\n            if (value.length > 200) {\r\n                toChange = value.substr(0, 200);\r\n            }\r\n            this.studywrapper.study.keyData.shortDescription.text = toChange;\r\n        });\r\n    }\r\n\r\n    onStateChange() { }\r\n\r\n    /**\r\n     * Erstellt eine neue Ausschlussfrage und fügt sie der Studie hinzu\r\n     */\r\n    onAddQualificationQuestion() {\r\n        this.studywrapper.study.keyData.qualiQuestions.push(\r\n            new QualificationQuestion(this.studywrapper.lastID, \"\", \"\", \"\", false)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Entfernt aus dem Array targetArray an der Stelle index einen Eintrag.\r\n     * @param targetArray \r\n     * @param index \r\n     */\r\n    removeFromArray(targetArray: any, index: number) {\r\n        targetArray.splice(index, 1);\r\n    }\r\n\r\n}\r\n","import { FormControl, FormGroupDirective, NgForm } from \"@angular/forms\";\r\nimport { ErrorStateMatcher } from \"@angular/material/core\";\r\n\r\nexport class ValidErrorStateMatcher implements ErrorStateMatcher {\r\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n        return !control.valid;\r\n    }\r\n}","import { FormControl, FormGroupDirective, NgForm } from \"@angular/forms\";\r\nimport { ErrorStateMatcher } from \"@angular/material/core\";\r\n\r\nexport class NumberErrorStateMatcher implements ErrorStateMatcher {\r\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n        let success = true;\r\n        let value = Number(control.value);\r\n        if (!value && value != 0) {\r\n            success = false;\r\n        }\r\n        return !success || !control.valid;\r\n    }\r\n}","export default \"<mat-card class=\\\"scrollable\\\" style=\\\"background-color: #212121;\\\"><br>\\r\\n    <mat-card-title>Werkzeugkasten</mat-card-title>\\r\\n    <div style=\\\"margin-top: 10px;\\\">\\r\\n        <mat-card-subtitle>Erstellte Objekte per Drag and Drog links einfügen</mat-card-subtitle>\\r\\n    </div>\\r\\n    <mat-card-content [style.overflow]=\\\"'auto'\\\" [style.height.vh]=\\\"'77'\\\" >\\r\\n        <mat-divider></mat-divider>\\r\\n        <br />\\r\\n        <mat-accordion multi>\\r\\n            <mat-expansion-panel *ngIf=\\\"getAmount('DateQuestion') > 0\\\" style=\\\"background-color: #856e68;\\\">\\r\\n                <mat-expansion-panel-header>\\r\\n                    <mat-panel-title>\\r\\n                        Datumfragen\\r\\n                    </mat-panel-title>\\r\\n                </mat-expansion-panel-header>\\r\\n                <div cdkDropList id=\\\"toolbox\\\" [cdkDropListConnectedTo]=\\\"connectedLists\\\" [cdkDropListData]=\\\"getObjectsPerType('DateQuestion')\\\">\\r\\n                    <div *ngFor=\\\"let element of toolbox\\\">\\r\\n                        <div *ngIf=\\\"this.colorService.getStudyObjectType(element) == 'DateQuestion'\\\">\\r\\n                            <mat-card cdkDrag style=\\\"cursor: move; height: 20px\\\" [style.background-color]=\\\"this.colorService.getStudyObjectColor(element)\\\">{{ element.name }}</mat-card>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-expansion-panel>\\r\\n            <mat-expansion-panel *ngIf=\\\"getAmount('TextQuestion') > 0\\\" style=\\\"background-color: #747d80;\\\">\\r\\n                <mat-expansion-panel-header>\\r\\n                    <mat-panel-title>\\r\\n                        Freitextfragen\\r\\n                    </mat-panel-title>\\r\\n                </mat-expansion-panel-header>\\r\\n                <div cdkDropList id=\\\"toolbox\\\" [cdkDropListConnectedTo]=\\\"connectedLists\\\" [cdkDropListData]=\\\"getObjectsPerType('TextQuestion')\\\">\\r\\n                    <div *ngFor=\\\"let element of toolbox\\\">\\r\\n                        <div *ngIf=\\\"this.colorService.getStudyObjectType(element) == 'TextQuestion'\\\">\\r\\n                            <mat-card cdkDrag style=\\\"cursor: move;\\\" [style.background-color]=\\\"this.colorService.getStudyObjectColor(element)\\\">{{ element.name }}</mat-card>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-expansion-panel>\\r\\n            <mat-expansion-panel *ngIf=\\\"getAmount('LinearScaleQuestion') > 0\\\" style=\\\"background-color: #6f8aab;\\\">\\r\\n                <mat-expansion-panel-header>\\r\\n                    <mat-panel-title>\\r\\n                        Lineare Skalen\\r\\n                    </mat-panel-title>\\r\\n                </mat-expansion-panel-header>\\r\\n                <div cdkDropList id=\\\"toolbox\\\" [cdkDropListConnectedTo]=\\\"connectedLists\\\" [cdkDropListData]=\\\"getObjectsPerType('LinearScaleQuestion')\\\">\\r\\n                    <div *ngFor=\\\"let element of toolbox\\\">\\r\\n                        <div *ngIf=\\\"this.colorService.getStudyObjectType(element) == 'LinearScaleQuestion'\\\">\\r\\n                            <mat-card cdkDrag style=\\\"cursor: move;\\\" [style.background-color]=\\\"this.colorService.getStudyObjectColor(element)\\\">{{ element.name }}</mat-card>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-expansion-panel>\\r\\n            <mat-expansion-panel *ngIf=\\\"getAmount('MultipleChoiceQuestion') > 0\\\" style=\\\"background-color: #a68a79;\\\">\\r\\n                <mat-expansion-panel-header>\\r\\n                    <mat-panel-title>\\r\\n                        Multiple Choice Fragen\\r\\n                    </mat-panel-title>\\r\\n                </mat-expansion-panel-header>\\r\\n                <div cdkDropList id=\\\"toolbox\\\" [cdkDropListConnectedTo]=\\\"connectedLists\\\" [cdkDropListData]=\\\"getObjectsPerType('MultipleChoiceQuestion')\\\">\\r\\n                    <div *ngFor=\\\"let element of toolbox\\\">\\r\\n                        <div *ngIf=\\\"this.colorService.getStudyObjectType(element) == 'MultipleChoiceQuestion'\\\">\\r\\n                            <mat-card cdkDrag style=\\\"cursor: move;\\\" [style.background-color]=\\\"this.colorService.getStudyObjectColor(element)\\\">{{ element.name }}</mat-card>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-expansion-panel>\\r\\n            <mat-expansion-panel *ngIf=\\\"getAmount('TextBlock') > 0\\\" style=\\\"background-color: #7da278;\\\">\\r\\n                <mat-expansion-panel-header>\\r\\n                    <mat-panel-title>\\r\\n                        Textblöcke\\r\\n                    </mat-panel-title>\\r\\n                </mat-expansion-panel-header>\\r\\n                <div cdkDropList id=\\\"toolbox\\\" [cdkDropListConnectedTo]=\\\"connectedLists\\\" [cdkDropListData]=\\\"getObjectsPerType('TextBlock')\\\">\\r\\n                    <div *ngFor=\\\"let element of toolbox\\\">\\r\\n                        <div *ngIf=\\\"this.colorService.getStudyObjectType(element) == 'TextBlock'\\\">\\r\\n                            <mat-card cdkDrag style=\\\"cursor: move;\\\" [style.background-color]=\\\"this.colorService.getStudyObjectColor(element)\\\">{{ element.name }}</mat-card>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-expansion-panel>\\r\\n            <mat-expansion-panel *ngIf=\\\"getAmount('VibrationPattern') > 0\\\" style=\\\"background-color: #A65C4E;\\\">\\r\\n                <mat-expansion-panel-header>\\r\\n                    <mat-panel-title>\\r\\n                        Vibrationsmuster\\r\\n                    </mat-panel-title>\\r\\n                </mat-expansion-panel-header>\\r\\n                <div cdkDropList id=\\\"toolbox\\\" [cdkDropListConnectedTo]=\\\"connectedLists\\\" [cdkDropListData]=\\\"getObjectsPerType('VibrationPattern')\\\">\\r\\n                    <div *ngFor=\\\"let element of toolbox\\\">\\r\\n                        <div *ngIf=\\\"this.colorService.getStudyObjectType(element) == 'VibrationPattern'\\\">\\r\\n                            <mat-card cdkDrag style=\\\"cursor: move;\\\" [style.background-color]=\\\"this.colorService.getStudyObjectColor(element)\\\">{{ element.name }}</mat-card>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-expansion-panel>\\r\\n            <mat-expansion-panel *ngIf=\\\"getAmount('SectionElement') > 0\\\" style=\\\"background-color: #9dbae1;\\\">\\r\\n                <mat-expansion-panel-header>\\r\\n                    <mat-panel-title>\\r\\n                        Studienseiten\\r\\n                    </mat-panel-title>\\r\\n                </mat-expansion-panel-header>\\r\\n                <div cdkDropList id=\\\"toolbox\\\" [cdkDropListConnectedTo]=\\\"connectedLists\\\" [cdkDropListData]=\\\"getObjectsPerType('SectionElement')\\\">\\r\\n                    <div *ngFor=\\\"let element of toolbox\\\">\\r\\n                        <div *ngIf=\\\"this.colorService.getStudyObjectType(element) == 'SectionElement'\\\">\\r\\n                            <mat-card cdkDrag style=\\\"cursor: move;\\\" [style.background-color]=\\\"this.colorService.getStudyObjectColor(element)\\\">{{ element.name }}</mat-card>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-expansion-panel>\\r\\n            <mat-expansion-panel *ngIf=\\\"getAmount('Section') > 0\\\" style=\\\"background-color: #dd9fb2;\\\">\\r\\n                <mat-expansion-panel-header>\\r\\n                    <mat-panel-title>\\r\\n                        Abschnitte\\r\\n                    </mat-panel-title>\\r\\n                </mat-expansion-panel-header>\\r\\n                <div cdkDropList id=\\\"toolbox\\\" [cdkDropListConnectedTo]=\\\"connectedLists\\\" [cdkDropListData]=\\\"getObjectsPerType('Section')\\\">\\r\\n                    <div *ngFor=\\\"let element of toolbox\\\">\\r\\n                        <div *ngIf=\\\"this.colorService.getStudyObjectType(element) == 'Section'\\\">\\r\\n                            <mat-card cdkDrag style=\\\"cursor: move;\\\" [style.background-color]=\\\"this.colorService.getStudyObjectColor(element)\\\">{{ element.name }}</mat-card>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-expansion-panel>\\r\\n        </mat-accordion>\\r\\n\\r\\n    </mat-card-content>\\r\\n</mat-card>\";","export default \"mat-sidenav-container {\\r\\n    height: 91vh;\\r\\n}\\r\\n\\r\\n.studyObjectList {\\r\\n    border-style: dashed;\\r\\n    border-width: 5px;\\r\\n    border-radius: 10px;\\r\\n    font-size: 18px;\\r\\n    padding: 15px;\\r\\n    margin-top: 15px;\\r\\n}\\r\\n\\r\\n.toolbox {\\r\\n    width: 250px;\\r\\n    position: fixed;\\r\\n    z-index: 1;\\r\\n    overflow-x: hidden;\\r\\n    right: 15px;\\r\\n}\\r\\n\\r\\n.mainContent {\\r\\n    margin-right: 265px;\\r\\n}\\r\\n\\r\\n.droplistSubtitle {\\r\\n    margin-top: 10px;\\r\\n    font-size: 14px;\\r\\n    text-align: center;\\r\\n}\\r\\n\\r\\n.greenButton {\\r\\n    background-color: #3e753b;\\r\\n    color: white;\\r\\n}\\r\\n\\r\\n.redButton {\\r\\n    color: #6D0000;\\r\\n    background-color: #FF000000;\\r\\n}\\r\\n\\r\\n.trashCan {\\r\\n    font-size: 40px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi9zZWN0aW9uLWVkaXRpbmcvc2VjdGlvbi1lZGl0aW5nLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksb0JBQW9CO0lBQ3BCLGlCQUFpQjtJQUNqQixtQkFBbUI7SUFDbkIsZUFBZTtJQUNmLGFBQWE7SUFDYixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osZUFBZTtJQUNmLFVBQVU7SUFDVixrQkFBa0I7SUFDbEIsV0FBVztBQUNmOztBQUVBO0lBQ0ksbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGVBQWU7SUFDZixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGNBQWM7SUFDZCwyQkFBMkI7QUFDL0I7O0FBRUE7SUFDSSxlQUFlO0FBQ25CIiwiZmlsZSI6InNyYy9hcHAvc3R1ZHljcmVhdGlvbi9zZWN0aW9uLWVkaXRpbmcvc2VjdGlvbi1lZGl0aW5nLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJtYXQtc2lkZW5hdi1jb250YWluZXIge1xyXG4gICAgaGVpZ2h0OiA5MXZoO1xyXG59XHJcblxyXG4uc3R1ZHlPYmplY3RMaXN0IHtcclxuICAgIGJvcmRlci1zdHlsZTogZGFzaGVkO1xyXG4gICAgYm9yZGVyLXdpZHRoOiA1cHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xyXG4gICAgZm9udC1zaXplOiAxOHB4O1xyXG4gICAgcGFkZGluZzogMTVweDtcclxuICAgIG1hcmdpbi10b3A6IDE1cHg7XHJcbn1cclxuXHJcbi50b29sYm94IHtcclxuICAgIHdpZHRoOiAyNTBweDtcclxuICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgIHotaW5kZXg6IDE7XHJcbiAgICBvdmVyZmxvdy14OiBoaWRkZW47XHJcbiAgICByaWdodDogMTVweDtcclxufVxyXG5cclxuLm1haW5Db250ZW50IHtcclxuICAgIG1hcmdpbi1yaWdodDogMjY1cHg7XHJcbn1cclxuXHJcbi5kcm9wbGlzdFN1YnRpdGxlIHtcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbiAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuXHJcbi5ncmVlbkJ1dHRvbiB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2U3NTNiO1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG59XHJcblxyXG4ucmVkQnV0dG9uIHtcclxuICAgIGNvbG9yOiAjNkQwMDAwO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGMDAwMDAwO1xyXG59XHJcblxyXG4udHJhc2hDYW4ge1xyXG4gICAgZm9udC1zaXplOiA0MHB4O1xyXG59Il19 */\";","export default \".vibration-container {\\r\\n    height: 91vh;\\r\\n}\\r\\n\\r\\n.studyObjectList {\\r\\n    border-style: dashed;\\r\\n    border-width: 5px;\\r\\n    border-radius: 10px;\\r\\n    font-size: 16px;\\r\\n    padding: 15px;\\r\\n    margin-top: 15px;\\r\\n}\\r\\n\\r\\n.toolbox {\\r\\n    width: 300px;\\r\\n    position: fixed;\\r\\n    z-index: 1;\\r\\n    overflow-x: hidden;\\r\\n    right: 15px;\\r\\n}\\r\\n\\r\\n.mainContent {\\r\\n    margin-right: 315px;\\r\\n}\\r\\n\\r\\n.droplistSubtitle {\\r\\n    margin-top: 10px;\\r\\n    font-size: 14px;\\r\\n    text-align: center;\\r\\n}\\r\\n\\r\\n.greenButton {\\r\\n    background-color: #3e753b;\\r\\n    color: white;\\r\\n}\\r\\n\\r\\n.redButton {\\r\\n    color: #6D0000;\\r\\n    background-color: #FF000000;\\r\\n}\\r\\n\\r\\n.grayButton {\\r\\n    color: gray;\\r\\n    background-color: #FF000000;\\r\\n}\\r\\n\\r\\n.trashCan {\\r\\n    font-size: 40px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi9zZWN0aW9uZWxlbWVudC1lZGl0aW5nL3NlY3Rpb25lbGVtZW50LWVkaXRpbmcuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxvQkFBb0I7SUFDcEIsaUJBQWlCO0lBQ2pCLG1CQUFtQjtJQUNuQixlQUFlO0lBQ2YsYUFBYTtJQUNiLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLFlBQVk7SUFDWixlQUFlO0lBQ2YsVUFBVTtJQUNWLGtCQUFrQjtJQUNsQixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsZUFBZTtJQUNmLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLHlCQUF5QjtJQUN6QixZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksY0FBYztJQUNkLDJCQUEyQjtBQUMvQjs7QUFFQTtJQUNJLFdBQVc7SUFDWCwyQkFBMkI7QUFDL0I7O0FBRUE7SUFDSSxlQUFlO0FBQ25CIiwiZmlsZSI6InNyYy9hcHAvc3R1ZHljcmVhdGlvbi9zZWN0aW9uZWxlbWVudC1lZGl0aW5nL3NlY3Rpb25lbGVtZW50LWVkaXRpbmcuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi52aWJyYXRpb24tY29udGFpbmVyIHtcclxuICAgIGhlaWdodDogOTF2aDtcclxufVxyXG5cclxuLnN0dWR5T2JqZWN0TGlzdCB7XHJcbiAgICBib3JkZXItc3R5bGU6IGRhc2hlZDtcclxuICAgIGJvcmRlci13aWR0aDogNXB4O1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcclxuICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgIHBhZGRpbmc6IDE1cHg7XHJcbiAgICBtYXJnaW4tdG9wOiAxNXB4O1xyXG59XHJcblxyXG4udG9vbGJveCB7XHJcbiAgICB3aWR0aDogMzAwcHg7XHJcbiAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgICB6LWluZGV4OiAxO1xyXG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xyXG4gICAgcmlnaHQ6IDE1cHg7XHJcbn1cclxuXHJcbi5tYWluQ29udGVudCB7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDMxNXB4O1xyXG59XHJcblxyXG4uZHJvcGxpc3RTdWJ0aXRsZSB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG4uZ3JlZW5CdXR0b24ge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzNlNzUzYjtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxufVxyXG5cclxuLnJlZEJ1dHRvbiB7XHJcbiAgICBjb2xvcjogIzZEMDAwMDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNGRjAwMDAwMDtcclxufVxyXG5cclxuLmdyYXlCdXR0b24ge1xyXG4gICAgY29sb3I6IGdyYXk7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkYwMDAwMDA7XHJcbn1cclxuXHJcbi50cmFzaENhbiB7XHJcbiAgICBmb250LXNpemU6IDQwcHg7XHJcbn0iXX0= */\";","export default \"button {\\r\\n    margin-bottom: 5px;\\r\\n    color: white;\\r\\n    background-color: #3e753b;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi9xdWVzdGlvbi1lZGl0aW5nL3F1ZXN0aW9uLXNlbGVjdGlvbi1kaWFsb2cvcXVlc3Rpb24tc2VsZWN0aW9uLWRpYWxvZy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWix5QkFBeUI7QUFDN0IiLCJmaWxlIjoic3JjL2FwcC9zdHVkeWNyZWF0aW9uL3F1ZXN0aW9uLWVkaXRpbmcvcXVlc3Rpb24tc2VsZWN0aW9uLWRpYWxvZy9xdWVzdGlvbi1zZWxlY3Rpb24tZGlhbG9nLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJidXR0b24ge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNXB4O1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzNlNzUzYjtcclxufVxyXG4iXX0= */\";","export default \"<div class=\\\"vibration-contianer\\\">\\r\\n    <div class=\\\"toolbox\\\">\\r\\n        <app-studyobject-toolbox [toolbox]=\\\"this.toolbox\\\" [playgroundCount]=\\\"sectionelements.length\\\">\\r\\n        </app-studyobject-toolbox>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"mainContent\\\">\\r\\n        <a mat-fab class=\\\"greenButton\\\" (click)=\\\"onAddPlayground()\\\" style=\\\"display: block; margin: auto;\\\">\\r\\n            <mat-icon>add</mat-icon>\\r\\n        </a><br>\\r\\n        <div *ngFor=\\\"let sectionelement of sectionelements; let index = index\\\">\\r\\n            <mat-card>\\r\\n                <mat-card-title>\\r\\n                    <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 50%; font-size:18px\\\">\\r\\n                        <input matInput placeholder=\\\"Interne Bezeichnung\\\" [(ngModel)]=\\\"sectionelement.name\\\" /> </mat-form-field>\\r\\n                    &nbsp;&nbsp;\\r\\n                    <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 50%; font-size:18px\\\">\\r\\n                        <input matInput placeholder=\\\"Anzeigename\\\" [(ngModel)]=\\\"sectionelement.displayName\\\" /> </mat-form-field>\\r\\n                    &nbsp;&nbsp;\\r\\n                    <mat-form-field style=\\\"width: 20%; font-size:18px\\\">\\r\\n                        <mat-label>Randomisierung</mat-label>\\r\\n                        <mat-select [(value)]=\\\"sectionelement.randomStrategy\\\">\\r\\n                            <mat-option *ngFor=\\\"let randomizer of randomizers; let index = index\\\" [value]=\\\"index\\\">\\r\\n                                {{ this.studywrapper.getRandomizerName(index) }}\\r\\n                            </mat-option>\\r\\n                        </mat-select>\\r\\n                    </mat-form-field><button mat-icon-button class=\\\"redButton\\\" (click)=\\\"deleteTest(index, sectionelement.id)\\\">\\r\\n                        <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n                    </button>\\r\\n                </mat-card-title>\\r\\n                Für das Ergebnis relevant? &nbsp;&nbsp; Nein &nbsp;\\r\\n                <mat-slide-toggle [(ngModel)]=\\\"sectionelement.resultRelevant\\\"></mat-slide-toggle>\\r\\n                &nbsp;&nbsp;&nbsp;Ja<br>\\r\\n                <hr>\\r\\n                <div cdkDropList class=\\\"studyObjectList\\\" id=\\\"studyObjectList{{ index }}\\\"\\r\\n                    [cdkDropListData]=\\\"sectionelement.studyObjects\\\"\\r\\n                    (cdkDropListDropped)=\\\"onDrop($event, sectionelement)\\\">\\r\\n                    <div *ngFor=\\\"let ref of sectionelement.studyObjects; let index = index\\\">\\r\\n                        <mat-card cdkDrag\\r\\n                            [style.background-color]=\\\"this.colorService.getStudyObjectColor(findStudyObjectById(ref.ID))\\\"\\r\\n                            style=\\\"font-size:18px; cursor: move;\\\">{{(index+1) + \\\". \\\" + \\r\\n              this.studywrapper.referenceTupleMembershipVerifier.getObject(ref).name\\r\\n              }}&nbsp;&nbsp;&nbsp;&nbsp;<mat-slide-toggle [(ngModel)]=\\\"ref.isFixed\\\">Fixiert</mat-slide-toggle><button\\r\\n                                mat-icon-button class=\\\"grayButton\\\"\\r\\n                                (click)=\\\"removeFromArray(sectionelement.studyObjects, index)\\\">\\r\\n                                <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n                            </button>\\r\\n                        </mat-card>\\r\\n                        <div *ngIf=\\\"index+1 != sectionelement.studyObjects.length\\\">\\r\\n                            <br />\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"droplistSubtitle\\\">Hier Elemente aus dem Wergzeugkasten einfügen, um eine Abfolge\\r\\n                        festzulegen.</div>\\r\\n                </div>\\r\\n            </mat-card>\\r\\n            <br>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</div>\";","import { NgForOf } from '@angular/common';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroupDirective, NgForm, Validators } from '@angular/forms';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { TextBlock } from '@src/app/Model/Study/StudyObjects/TextBlock';\r\nimport { StudyWrapperService } from '../../services/study-wrapper/study-wrapper.service';\r\nimport { ValidErrorStateMatcher } from '../error-state-matchers/ValidErrorStateMatcher';\r\n@Component({\r\n    selector: 'app-textblock-editing',\r\n    templateUrl: './textblock-editing.component.html',\r\n    styleUrls: ['./textblock-editing.component.css']\r\n})\r\nexport class TextBlockEditingComponent implements OnInit {\r\n    /**\r\n     * In dem Array befinden sich alle Textblöcke die bereits erstellt wurden.\r\n     */\r\n    textblocks: TextBlock[] = [];\r\n\r\n    formControls: FormControl[][] = [];\r\n\r\n    matcher = new ValidErrorStateMatcher();\r\n\r\n    constructor(private studywrapper: StudyWrapperService) { }\r\n\r\n    /**\r\n     * Die Methode kopiert alle TextBlöcke die sich bereits in der Studie befinden in das teckblocks array.\r\n     */\r\n    ngOnInit() {\r\n        this.studywrapper.study.studyObjects.forEach((studyobject) => {\r\n            if (studyobject instanceof TextBlock) {\r\n                this.textblocks.unshift(studyobject);\r\n                this.addFormControl(studyobject);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Einem TextBlock wird eine FormControl hinzugefügt\r\n     * @param textblock \r\n     */\r\n    addFormControl(textblock: TextBlock) {\r\n        let titleControl = new FormControl(\"\", [\r\n        ]);\r\n        let textControl = new FormControl(\"\", [\r\n        ])\r\n        this.formControls.unshift(\r\n            [\r\n                titleControl,\r\n                textControl,\r\n            ]);\r\n        titleControl.patchValue(textblock.name);\r\n        textControl.patchValue(textblock.text);\r\n        titleControl.valueChanges.subscribe(value => {\r\n            textblock.name = value;\r\n        });\r\n        textControl.valueChanges.subscribe(value => {\r\n            textblock.text = value;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Ein default TextBlock wird erstellt und in das textblocks Array und die Studie geschrieben.\r\n     */\r\n    onAddTextBlock() {\r\n        let toInsert = new TextBlock(\r\n            this.studywrapper.lastID,\r\n            \"\",\r\n            \"\",\r\n            \"\"\r\n        );\r\n        this.addFormControl(toInsert);\r\n        this.textblocks.unshift(toInsert);\r\n        this.studywrapper.study.studyObjects.unshift(toInsert);\r\n    }\r\n\r\n    /**\r\n     * Der Textblock mit der gegebenen id wird von allen sectionElements entfernt.\r\n     * @param id \r\n     */\r\n    removeFromSectionElement(id: number) {\r\n        for (let sectionelement of this.studywrapper.study.sectionElements) {\r\n            let index = 0;\r\n            for (let studyObjectRef of sectionelement.studyObjects) {\r\n                if (studyObjectRef.ID == id) {\r\n                    sectionelement.studyObjects.splice(index, 1);\r\n                }\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ein Textblock wird aus der Studie und dem textblocks Array entfernt.\r\n     * @param index \r\n     * @param id \r\n     */\r\n    removeFromStudy(index: number, id: number) {\r\n        this.textblocks.splice(index, 1);\r\n        this.formControls.splice(index, 1);\r\n        this.removeFromSectionElement(id);\r\n        this.studywrapper.study.studyObjects = this.studywrapper.study.studyObjects.filter(element => element.id != id);\r\n    }\r\n\r\n}\r\n","export default \".vibration-container {\\r\\n    height: 91vh;\\r\\n}\\r\\n\\r\\n\\r\\n.studyObjectList {\\r\\n    border-style: dashed;\\r\\n    border-width: 5px;\\r\\n    border-radius: 10px;\\r\\n    font-size: 16px;\\r\\n    padding: 15px;\\r\\n    margin-top: 15px;\\r\\n}\\r\\n\\r\\n\\r\\n.toolbox {\\r\\n    width: 250px;\\r\\n    position: fixed;\\r\\n    z-index: 1;\\r\\n    overflow-x: hidden;\\r\\n    right: 15px;\\r\\n}\\r\\n\\r\\n\\r\\n.mainContent {\\r\\n    margin-right: 265px;\\r\\n}\\r\\n\\r\\n\\r\\n.droplistSubtitle {\\r\\n    margin-top: 10px;\\r\\n    font-size: 14px;\\r\\n    text-align: center;\\r\\n}\\r\\n\\r\\n\\r\\n.redButton {\\r\\n    color: #6D0000;\\r\\n    background-color: #FF000000;\\r\\n}\\r\\n\\r\\n\\r\\n.trashCan {\\r\\n    font-size: 40px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi9zZXF1ZW5jZS1lZGl0aW5nL3NlcXVlbmNlLWVkaXRpbmcuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7QUFDaEI7OztBQUdBO0lBQ0ksb0JBQW9CO0lBQ3BCLGlCQUFpQjtJQUNqQixtQkFBbUI7SUFDbkIsZUFBZTtJQUNmLGFBQWE7SUFDYixnQkFBZ0I7QUFDcEI7OztBQUVBO0lBQ0ksWUFBWTtJQUNaLGVBQWU7SUFDZixVQUFVO0lBQ1Ysa0JBQWtCO0lBQ2xCLFdBQVc7QUFDZjs7O0FBRUE7SUFDSSxtQkFBbUI7QUFDdkI7OztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGVBQWU7SUFDZixrQkFBa0I7QUFDdEI7OztBQUVBO0lBQ0ksY0FBYztJQUNkLDJCQUEyQjtBQUMvQjs7O0FBRUE7SUFDSSxlQUFlO0FBQ25CIiwiZmlsZSI6InNyYy9hcHAvc3R1ZHljcmVhdGlvbi9zZXF1ZW5jZS1lZGl0aW5nL3NlcXVlbmNlLWVkaXRpbmcuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi52aWJyYXRpb24tY29udGFpbmVyIHtcclxuICAgIGhlaWdodDogOTF2aDtcclxufVxyXG5cclxuXHJcbi5zdHVkeU9iamVjdExpc3Qge1xyXG4gICAgYm9yZGVyLXN0eWxlOiBkYXNoZWQ7XHJcbiAgICBib3JkZXItd2lkdGg6IDVweDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICBwYWRkaW5nOiAxNXB4O1xyXG4gICAgbWFyZ2luLXRvcDogMTVweDtcclxufVxyXG5cclxuLnRvb2xib3gge1xyXG4gICAgd2lkdGg6IDI1MHB4O1xyXG4gICAgcG9zaXRpb246IGZpeGVkO1xyXG4gICAgei1pbmRleDogMTtcclxuICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcclxuICAgIHJpZ2h0OiAxNXB4O1xyXG59XHJcblxyXG4ubWFpbkNvbnRlbnQge1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAyNjVweDtcclxufVxyXG5cclxuLmRyb3BsaXN0U3VidGl0bGUge1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxuICAgIGZvbnQtc2l6ZTogMTRweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5cclxuLnJlZEJ1dHRvbiB7XHJcbiAgICBjb2xvcjogIzZEMDAwMDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNGRjAwMDAwMDtcclxufVxyXG5cclxuLnRyYXNoQ2FuIHtcclxuICAgIGZvbnQtc2l6ZTogNDBweDtcclxufSJdfQ== */\";","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { StudyCreationRoutingModule } from '@src/app/studycreation/studycreation-routing.module';\r\nimport { GeneralEditingComponent } from '@src/app/studycreation/general-editing/general-editing.component';\r\nimport { MaterialModule } from '@src/material.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { QuestionEditingComponent } from '@src/app/studycreation/question-editing/question-editing.component';\r\nimport { SectionEditingComponent } from '@src/app/studycreation/section-editing/section-editing.component';\r\nimport { SectionElementEditingComponent } from '@src/app/studycreation/sectionelement-editing/sectionelement-editing.component';\r\nimport { SequenceEditingComponent } from '@src/app/studycreation/sequence-editing/sequence-editing.component';\r\nimport { TextBlockEditingComponent } from '@src/app/studycreation/textblock-editing/textblock-editing.component';\r\nimport { VibrationPatternEditingComponent } from '@src/app/studycreation/vibrationpattern-editing/vibrationpattern-editing.component';\r\nimport { QuestionSelectionDialogComponent } from '@src/app/studycreation/question-editing/question-selection-dialog/question-selection-dialog.component';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { VibrationPatternToolboxComponent } from '@src/app/studycreation/toolboxes/vibrationpattern-toolbox/vibrationpattern-toolbox.component';\r\nimport { StudyObjectToolboxComponent } from '@src/app/studycreation/toolboxes/studyobject-toolbox/studyobject-toolbox.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    GeneralEditingComponent, \r\n    QuestionEditingComponent, \r\n    SectionEditingComponent, \r\n    SectionElementEditingComponent, \r\n    SequenceEditingComponent, \r\n    TextBlockEditingComponent, \r\n    VibrationPatternEditingComponent, \r\n    QuestionSelectionDialogComponent, \r\n    VibrationPatternToolboxComponent, \r\n    StudyObjectToolboxComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    StudyCreationRoutingModule,\r\n    MaterialModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    DragDropModule\r\n  ]\r\n})\r\nexport class StudycreationModule { }\r\n","export default \"<a mat-fab class=\\\"greenButton\\\" (click)=\\\"onAddQuestion()\\\" style=\\\"display: block; margin: auto;\\\">\\r\\n    <mat-icon>add</mat-icon>\\r\\n</a><br>\\r\\n<div *ngFor=\\\"let question of questions; let index = index\\\">\\r\\n    <mat-card>\\r\\n        <mat-card-title>\\r\\n            <h3>{{this.getStudyObjectTypeName(question)}}</h3>\\r\\n            <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 50%;font-size:18px\\\">\\r\\n                <input matInput placeholder=\\\"Interne Bezeichnung\\\" [(ngModel)]=\\\"question.name\\\" />\\r\\n            </mat-form-field>&nbsp;&nbsp;\\r\\n            <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 50%;font-size:18px\\\">\\r\\n                <input matInput placeholder=\\\"Anzeigename\\\" [(ngModel)]=\\\"question.displayName\\\" />\\r\\n            </mat-form-field>&nbsp;&nbsp;\\r\\n            <button mat-icon-button class=\\\"redButton\\\" (click)=\\\"removeFromStudy(index, question.id)\\\">\\r\\n                <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n            </button>\\r\\n        </mat-card-title>\\r\\n        <!--FRAGEINHALT-->\\r\\n        <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 50%;\\\">\\r\\n            <input matInput placeholder=\\\"Fragestellung\\\" [(ngModel)]=\\\"question.questionText\\\" />\\r\\n        </mat-form-field>\\r\\n\\r\\n\\r\\n        <div *ngIf=\\\"isLinearScaleQuestion(question) == 'linearScale'\\\">\\r\\n            <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 32%;\\\">\\r\\n                <input matInput placeholder=\\\"Anzahl der Wahlmöglichkeiten (2 bis 12)\\\" [formControl]=\\\"this.formControls[index][1]\\\" [errorStateMatcher]=\\\"this.matcher\\\" />\\r\\n                <mat-error *ngIf=\\\"this.formControls[index][1].invalid\\\">Fehlerhafte Eingabe.</mat-error>\\r\\n            </mat-form-field>&nbsp;&nbsp;\\r\\n            <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 32%;\\\">\\r\\n                <input matInput placeholder=\\\"Linkes Label\\\" [(ngModel)]=\\\"question.leftLabel\\\" />\\r\\n            </mat-form-field>&nbsp;&nbsp;\\r\\n            <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 32%;\\\">\\r\\n                <input matInput placeholder=\\\"Rechtes Label\\\" [(ngModel)]=\\\"question.rightLabel\\\" />\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div *ngIf=\\\"isLinearScaleQuestion(question) == 'multipleChoice'\\\">\\r\\n            <!--<mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 20%;\\\">\\r\\n                <input matInput placeholder=\\\"Mindestens auszuwählen\\\" [(ngModel)]=\\\"question.minSelectable\\\" />\\r\\n            </mat-form-field>&nbsp;&nbsp;-->\\r\\n            <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 20%;\\\">\\r\\n                <input matInput placeholder=\\\"Maximal auswählbar\\\" [formControl]=\\\"this.formControls[index][0]\\\" [errorStateMatcher]=\\\"this.matcher\\\" />\\r\\n                <mat-error *ngIf=\\\"this.formControls[index][0].invalid\\\">Fehlerhafte Eingabe.</mat-error>\\r\\n            </mat-form-field><br>\\r\\n            <label>Antwortmöglichkeiten</label><br><br>\\r\\n            <div *ngFor=\\\"let answerChoice of question.answerOptions; let index = index\\\">\\r\\n                <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 32%;\\\">\\r\\n                    <input matInput placeholder={{index+1}} [ngModel]=\\\"question.answerOptions[index]\\\" (change)=\\\"valueUpdate(question, index, $event)\\\"/>\\r\\n                </mat-form-field>\\r\\n                <button mat-icon-button class=\\\"redButton\\\" (click)=\\\"removeFromArray(question.answerOptions, index)\\\">\\r\\n                    <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n                </button>\\r\\n            </div>\\r\\n            <a mat-fab class=\\\"greenButton\\\" (click)=\\\"onAddAnswerChoice(question)\\\" style=\\\"display: block; margin: auto;\\\">\\r\\n                <mat-icon>add</mat-icon>\\r\\n            </a>\\r\\n        </div>\\r\\n\\r\\n    </mat-card>\\r\\n    <br>\\r\\n</div>\";","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { DateQuestion } from '@src/app/Model/Study/StudyObjects/Questions/DateQuestion';\r\nimport { LinearScaleQuestion } from '@src/app/Model/Study/StudyObjects/Questions/LinearScaleQuestion';\r\nimport { MultipleChoiceQuestion } from '@src/app/Model/Study/StudyObjects/Questions/MultipleChoiceQuestion';\r\nimport { TextQuestion } from '@src/app/Model/Study/StudyObjects/Questions/TextQuestion';\r\nimport { StudyWrapperService } from '../../../services/study-wrapper/study-wrapper.service';\r\n\r\n@Component({\r\n  selector: 'app-question-selection-dialog',\r\n  templateUrl: './question-selection-dialog.component.html',\r\n  styleUrls: ['./question-selection-dialog.component.css']\r\n})\r\nexport class QuestionSelectionDialogComponent implements OnInit {\r\n  constructor(private studywrapper: StudyWrapperService, private dialogRef: MatDialogRef<QuestionSelectionDialogComponent>) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  /**\r\n   * Aus dem Parameter wird der Fragetyp abgeleitet, eine default Frage erstellt und zurückgegeben.\r\n   * @param questionType \r\n   */\r\n  onButtonClick(questionType) {\r\n    let questionResult: any = undefined;\r\n    switch (questionType) {\r\n      case 0:\r\n        questionResult = new DateQuestion(this.studywrapper.lastID, \"\", \"\", \"\");\r\n        break;\r\n      case 1:\r\n        questionResult = new LinearScaleQuestion(this.studywrapper.lastID, \"\", \"\", \"\", 5, \"\", \"\");\r\n        break;\r\n      case 2:\r\n        questionResult = new MultipleChoiceQuestion(this.studywrapper.lastID, \"\", \"\", \"\", [], 1);\r\n        break;\r\n      case 3:\r\n        questionResult = new TextQuestion(this.studywrapper.lastID, \"\", \"\", \"\");\r\n        break;\r\n    }\r\n    this.dialogRef.close(questionResult);\r\n  }\r\n\r\n}\r\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { RandomizingStrategies } from '@src/app/Model/Randomizing/RandomizingStrategies';\r\nimport { ReferenceTuple } from '@src/app/Model/Study/ReferenceTuple';\r\nimport { Section } from '@src/app/Model/Study/StudyObjects/Section';\r\nimport { StudyWrapperService } from '../../services/study-wrapper/study-wrapper.service';\r\nimport { ColorService } from '../services/color/color.service';\r\n\r\n@Component({\r\n  selector: 'app-sequence-editing',\r\n  templateUrl: './sequence-editing.component.html',\r\n  styleUrls: ['./sequence-editing.component.css']\r\n})\r\nexport class SequenceEditingComponent implements OnInit {\r\n  /**\r\n   * In dem toolbox Array befinden sich alle Elemente, die erstellt wurden und einer Section hinzugefügt werden können.\r\n   */\r\n  toolbox = [];\r\n\r\n  /**\r\n   * In diesem Array befinden sich alle Randomisierungsstrategien, die innerhalb einer Section verwendet werden können.\r\n   */\r\n  randomizers: string[] = [];\r\n\r\n  constructor(public studywrapper: StudyWrapperService, public colorService: ColorService) {\r\n    for (let randomizer in RandomizingStrategies) {\r\n      if (typeof RandomizingStrategies[randomizer] === \"number\") {\r\n        this.randomizers.push(randomizer);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bereits erstellte Sections und SectionElements werden in das sections bzw. toolbox Array geladen.\r\n   */\r\n  ngOnInit() {\r\n    for (let section of this.studywrapper.study.sections) {\r\n      this.toolbox.push(section);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sucht die Id in der Liste sectionElements aus StudyPrototype und gibt es zurück wenn es gefunden wird\r\n   * @param id \r\n   */\r\n  findSectionById(id: number): Section {\r\n    for (let section of this.studywrapper.study.sections) {\r\n      if (id == section.id) {\r\n        return section;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Die Aktion die mit den Toolbox Elementen ausgeführt wurde wird in den entsprechenden Datenstrukturen aktualisiert\r\n   * @param event \r\n   */\r\n  onDrop(event: CdkDragDrop<any[]>) {\r\n    if (\r\n      event.previousContainer.id == \"toolbox\" &&\r\n      event.container.id != \"toolbox\"\r\n    ) {\r\n      this.studywrapper.study.refSections.push(\r\n        new ReferenceTuple(\r\n          event.previousContainer.data[event.previousIndex].id,\r\n          false\r\n        )\r\n      );\r\n    } else {\r\n      if (event.previousContainer === event.container) {\r\n        moveItemInArray(\r\n          event.container.data,\r\n          event.previousIndex,\r\n          event.currentIndex\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Entfernt aus dem Array targetArray an der Stelle index einen Eintrag.\r\n   * @param targetArray \r\n   * @param index \r\n   */\r\n  removeFromArray(targetArray: any, index: number) {\r\n    targetArray.splice(index, 1);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { routes } from \"./studycreation.routes\";\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class StudyCreationRoutingModule { }\r\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { RandomizingStrategies } from '@src/app/Model/Randomizing/RandomizingStrategies';\r\nimport { ReferenceTuple } from '@src/app/Model/Study/ReferenceTuple';\r\nimport { SectionElement } from '@src/app/Model/Study/StudyObjects/SectionElement';\r\nimport { StudyWrapperService } from '../../services/study-wrapper/study-wrapper.service';\r\nimport { ColorService } from '../services/color/color.service';\r\n\r\n@Component({\r\n    selector: 'app-sectionelement-editing',\r\n    templateUrl: './sectionelement-editing.component.html',\r\n    styleUrls: ['./sectionelement-editing.component.css']\r\n})\r\nexport class SectionElementEditingComponent implements OnInit {\r\n    /**\r\n     * In dem toolbox Array befinden sich alle Elemente, die erstellt wurden und einer Section hinzugefügt werden können.\r\n     */\r\n    toolbox = [];\r\n\r\n    /**\r\n     * In dem sectionelements Array befinden sich alle SectionElements die in dieser Sicht erstellt wurden.\r\n     */\r\n    sectionelements: SectionElement[] = [];\r\n\r\n    /**\r\n     * In diesem Array befinden sich alle Randomisierungsstrategien, die innerhalb einer Section verwendet werden können.\r\n     */\r\n    randomizers: string[] = [];\r\n\r\n    constructor(public studywrapper: StudyWrapperService, public colorService: ColorService) {\r\n        for (let randomizer in RandomizingStrategies) {\r\n            if (typeof RandomizingStrategies[randomizer] === \"number\") {\r\n                this.randomizers.push(randomizer);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Bereits erstellte SectionElements und StudyObjects werden in das sections bzw. toolbox Array geladen. \r\n     */\r\n    ngOnInit() {\r\n        for (let sectionelement of this.studywrapper.study.sectionElements) {\r\n            if (sectionelement instanceof SectionElement) {\r\n                this.sectionelements.push(sectionelement);\r\n            }\r\n        }\r\n\r\n        for (let studyobject of this.studywrapper.study.studyObjects) {\r\n            this.toolbox.push(studyobject);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sucht die Id in der Liste studyObjects aus StudyPrototype und gibt es zurück wenn das Element gefunden wurde.\r\n     * @param id \r\n     */\r\n    findStudyObjectById(id: number): any {\r\n        for (let studyobject of this.studywrapper.study.studyObjects) {\r\n            if (id == studyobject.id) {\r\n                return studyobject;\r\n            }\r\n        }\r\n        throw new Error(\"AbstractStudyObject mit der id \" + id + \" gibt es nicht.\")\r\n    }\r\n\r\n    /**\r\n     * Ein neues SectionElement wird erzeugt und in die Listen eingebunden\r\n     */\r\n    onAddPlayground() {\r\n        let toInsert = new SectionElement(this.studywrapper.lastID, \"\", \"\", 1);\r\n        this.sectionelements.unshift(toInsert);\r\n        this.studywrapper.study.sectionElements.unshift(toInsert);\r\n    }\r\n\r\n    /**\r\n     * Die Aktion die mit den Toolbox Elementen ausgeführt wurde wird \r\n     * in den entsprechenden Datenstrukturen aktualisiert\r\n     * @param event \r\n     * @param sectionelement \r\n     */\r\n    onDrop(event: CdkDragDrop<any[]>, sectionelement: SectionElement) {\r\n        if (\r\n            event.previousContainer.id.startsWith(\"toolbox\") &&\r\n            event.container.id != \"toolbox\"\r\n        ) {\r\n            sectionelement.studyObjects.push(\r\n                new ReferenceTuple(\r\n                    event.previousContainer.data[event.previousIndex].id,\r\n                    false\r\n                )\r\n            );\r\n        } else {\r\n            if (event.previousContainer === event.container) {\r\n                moveItemInArray(\r\n                    event.container.data,\r\n                    event.previousIndex,\r\n                    event.currentIndex\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Entfernt aus dem Array targetArray an der Stelle index einen Eintrag. \r\n     * @param targetArray \r\n     * @param index \r\n     */\r\n    removeFromArray(targetArray: any, index: number) {\r\n        targetArray.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Entfernt ein sectionElement mit der gegebenen Id von allen Sections\r\n     * @param id \r\n     */\r\n    removeFromSection(id: number) {\r\n        for (let section of this.studywrapper.study.sections) {\r\n            let index = 0;\r\n            for (let sectionElementRef of section.sectionElements) {\r\n                if (sectionElementRef.ID == id) {\r\n                    section.sectionElements.splice(index, 1);\r\n                }\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Löscht ein StudyObject aus der Studie und aus dem toolbox Array.\r\n     * @param index \r\n     * @param id \r\n     */\r\n    deleteTest(index: number, id: number) {\r\n        this.studywrapper.study.sectionElements.splice(index, 1);\r\n        this.removeFromSection(id);\r\n        this.sectionelements.splice(index, 1);\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { DateQuestion } from '@src/app/Model/Study/StudyObjects/Questions/DateQuestion';\r\nimport { LinearScaleQuestion } from '@src/app/Model/Study/StudyObjects/Questions/LinearScaleQuestion';\r\nimport { MultipleChoiceQuestion } from '@src/app/Model/Study/StudyObjects/Questions/MultipleChoiceQuestion';\r\nimport { TextQuestion } from '@src/app/Model/Study/StudyObjects/Questions/TextQuestion';\r\nimport { Section } from '@src/app/Model/Study/StudyObjects/Section';\r\nimport { SectionElement } from '@src/app/Model/Study/StudyObjects/SectionElement';\r\nimport { TextBlock } from '@src/app/Model/Study/StudyObjects/TextBlock';\r\nimport { VibrationPattern } from '@src/app/Model/Study/StudyObjects/VibrationPattern';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n/**\r\n * Der Service ist dafür zuständig, einzelnen Objekten die richtige Farbe und das richtige Label zuzuordnen\r\n */\r\nexport class ColorService {\r\n\r\n    constructor() { }\r\n\r\n    /**\r\n     * Gibt einem Objekt den Typ seines Objekts als String zurück.\r\n     * @param item \r\n     */\r\n    getStudyObjectType(item: any): string {\r\n        switch (true) {\r\n            case item instanceof VibrationPattern:\r\n                return \"VibrationPattern\";\r\n            case item instanceof TextBlock:\r\n                return \"TextBlock\";\r\n            case item instanceof DateQuestion:\r\n                return \"DateQuestion\";\r\n            case item instanceof LinearScaleQuestion:\r\n                return \"LinearScaleQuestion\";\r\n            case item instanceof MultipleChoiceQuestion:\r\n                return \"MultipleChoiceQuestion\";\r\n            case item instanceof TextQuestion:\r\n                return \"TextQuestion\";\r\n            case item instanceof SectionElement:\r\n                return \"SectionElement\";\r\n            case item instanceof Section:\r\n                return \"Section\";\r\n            default:\r\n                return \"undefined\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gibt einem Objekt den Farbcode als String zurück, den das Objekt haben soll.\r\n     * @param item \r\n     */\r\n    getStudyObjectColor(item: any): string {\r\n        switch (true) {\r\n            case item instanceof VibrationPattern:\r\n                return \"#6D0000\";\r\n            case item instanceof TextBlock:\r\n                return \"#3e753b\";\r\n            case item instanceof DateQuestion:\r\n                return \"#4c2f27\";\r\n            case item instanceof LinearScaleQuestion:\r\n                return \"#1b5583\";\r\n            case item instanceof MultipleChoiceQuestion:\r\n                return \"#79553d\";\r\n            case item instanceof TextQuestion:\r\n                return \"#374447\";\r\n            case item instanceof SectionElement:\r\n                return \"#669ad2\";\r\n            case item instanceof Section:\r\n                return \"#c8708e\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n}\r\n","export default \".redButton {\\r\\n    color: #6D0000;\\r\\n    background-color: #FF000000;\\r\\n}\\r\\n\\r\\n.greenButton {\\r\\n    background-color: #3e753b;\\r\\n    color: white;\\r\\n}\\r\\n\\r\\n.trashCan {\\r\\n    font-size: 40px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi9xdWVzdGlvbi1lZGl0aW5nL3F1ZXN0aW9uLWVkaXRpbmcuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGNBQWM7SUFDZCwyQkFBMkI7QUFDL0I7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGVBQWU7QUFDbkIiLCJmaWxlIjoic3JjL2FwcC9zdHVkeWNyZWF0aW9uL3F1ZXN0aW9uLWVkaXRpbmcvcXVlc3Rpb24tZWRpdGluZy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnJlZEJ1dHRvbiB7XHJcbiAgICBjb2xvcjogIzZEMDAwMDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNGRjAwMDAwMDtcclxufVxyXG5cclxuLmdyZWVuQnV0dG9uIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzZTc1M2I7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbn1cclxuXHJcbi50cmFzaENhbiB7XHJcbiAgICBmb250LXNpemU6IDQwcHg7XHJcbn0iXX0= */\";","export default \"<mat-card>\\r\\n    <mat-card-title>\\r\\n        <mat-form-field style=\\\"width: 45vw;font-size:18px\\\">\\r\\n            <input matInput placeholder=\\\"Name der Studie\\\" [(ngModel)]=\\\"this.studywrapper.study.keyData.name\\\"\\r\\n                 /> </mat-form-field>\\r\\n    </mat-card-title>\\r\\n    <mat-form-field class=\\\"textblock-textarea\\\">\\r\\n        <textarea matInput [formControl]=\\\"this.shortControl\\\" [errorStateMatcher]=\\\"this.matcher\\\"\\r\\n            [placeholder]=\\\"'Kurzbeschreibung (' + this.studywrapper.study.keyData.shortDescription.text.length + '/200)'\\\"></textarea>\\r\\n            <mat-error *ngIf=\\\"this.shortControl.invalid\\\">Maximal 200 Zeichen erlaubt.</mat-error>\\r\\n    </mat-form-field>\\r\\n    <mat-form-field class=\\\"textblock-textarea\\\">\\r\\n        <textarea matInput [(ngModel)]=\\\"this.studywrapper.study.keyData.fullDescription\\\"\\r\\n            placeholder=\\\"Vollständige Beschreibung\\\"></textarea>\\r\\n    </mat-form-field>\\r\\n</mat-card>\\r\\n<br>\\r\\n<mat-card>\\r\\n    <mat-card-title style = \\\"font-size: 18px\\\">Ausschlussfragen</mat-card-title>\\r\\n    <hr />\\r\\n    Amplitude im teilnehmenden Gerät verpflichtend?&nbsp;&nbsp;<mat-slide-toggle\\r\\n        [(ngModel)]=\\\"this.studywrapper.study.keyData.amplitudeNecessary\\\"></mat-slide-toggle>\\r\\n    <hr><br>\\r\\n    <a mat-fab class=\\\"greenButton\\\" (click)=\\\"onAddQualificationQuestion()\\\" style=\\\"display: block; margin: auto;\\\">\\r\\n        <mat-icon>add</mat-icon>\\r\\n    </a>\\r\\n    <br>\\r\\n    <div *ngFor=\\\"let qualiQuestion of this.studywrapper.study.keyData.qualiQuestions; let index=index\\\">\\r\\n        <mat-card>\\r\\n            <mat-form-field style=\\\"font-size: 18px; width: 45vw;\\\">\\r\\n                <input matInput placeholder=\\\"Frage\\\" [(ngModel)]=\\\"qualiQuestion.questionText\\\" />\\r\\n            </mat-form-field>\\r\\n            &nbsp;&nbsp; Notwendige Antwort: &nbsp;&nbsp; Nein &nbsp;\\r\\n            <mat-slide-toggle [(ngModel)]=\\\"qualiQuestion.requiredAnswer\\\"></mat-slide-toggle>&nbsp;&nbsp;&nbsp;Ja<button\\r\\n                mat-icon-button class=\\\"redButton\\\" (click)=\\\"removeFromArray(this.studywrapper.study.keyData.qualiQuestions, index)\\\">\\r\\n                <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n            </button>\\r\\n        </mat-card>\\r\\n        <br>\\r\\n    </div>    \\r\\n</mat-card>\";","export default \"mat-card {\\r\\n    margin-bottom: 15px;\\r\\n    text-align: center;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi90b29sYm94ZXMvc3R1ZHlvYmplY3QtdG9vbGJveC9zdHVkeW9iamVjdC10b29sYm94LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxtQkFBbUI7SUFDbkIsa0JBQWtCO0FBQ3RCIiwiZmlsZSI6InNyYy9hcHAvc3R1ZHljcmVhdGlvbi90b29sYm94ZXMvc3R1ZHlvYmplY3QtdG9vbGJveC9zdHVkeW9iamVjdC10b29sYm94LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJtYXQtY2FyZCB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59Il19 */\";","import { Component, OnInit } from '@angular/core';\r\nimport { RandomizingStrategies } from '@src/app/Model/Randomizing/RandomizingStrategies';\r\nimport { Section } from '@src/app/Model/Study/StudyObjects/Section';\r\nimport { StudyWrapperService } from '../../services/study-wrapper/study-wrapper.service';\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { ReferenceTuple } from '@src/app/Model/Study/ReferenceTuple';\r\nimport { ColorService } from '../services/color/color.service';\r\n\r\n@Component({\r\n    selector: 'app-section-editing',\r\n    templateUrl: './section-editing.component.html',\r\n    styleUrls: ['./section-editing.component.css']\r\n})\r\n/**\r\n * Die Klasse ist zur Verwaltung der Operationen, die beim editieren von Sections benötigt werden.\r\n */\r\nexport class SectionEditingComponent implements OnInit {\r\n    /**\r\n     * In dem toolbox Array befinden sich alle Elemente, die erstellt wurden und einer Section hinzugefügt werden können.\r\n     */\r\n    toolbox = [];\r\n\r\n    /**\r\n     * In dem sections Array befinden sich alle Section die in dieser Sicht erstellt wurden.\r\n     */\r\n    sections: Section[] = [];\r\n\r\n    /**\r\n     * In diesem Array befinden sich alle Randomisierungsstrategien, die innerhalb einer Section verwendet werden können.\r\n     */\r\n    randomizers: string[] = [];\r\n\r\n    constructor(public studywrapper: StudyWrapperService, public colorService: ColorService) {\r\n        for (let randomizer in RandomizingStrategies) {\r\n            if (typeof RandomizingStrategies[randomizer] === \"number\") {\r\n                this.randomizers.push(randomizer);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Bereits erstellte Sections und SectionElements werden in das sections bzw. toolbox Array geladen.\r\n     */\r\n    ngOnInit() {\r\n        for (let section of this.studywrapper.study.sections) {\r\n            this.sections.push(section);\r\n        }\r\n\r\n        for (let sectionelement of this.studywrapper.study.sectionElements) {\r\n            this.toolbox.push(sectionelement);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sucht die Id in der Liste sectionElements aus StudyPrototype und gibt es zurück wenn es gefunden wird\r\n     * @param id\r\n     */\r\n    findSectionElementById(id: number): any {\r\n        for (let sectionelement of this.studywrapper.study.sectionElements) {\r\n            if (id == sectionelement.id) {\r\n                return sectionelement;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Eine neue default Section wird erstellt und der Studie und dem sections Array hinzugefügt.\r\n     */\r\n    onAddSection() {\r\n        let toInsert = new Section(this.studywrapper.lastID, \"\", \"\", false, true, 1);\r\n        this.sections.unshift(toInsert);\r\n        this.studywrapper.study.sections.unshift(toInsert);\r\n    }\r\n\r\n  /**\r\n   * Updated je nach Event section und synchronisiert das Model\r\n   * @param event \r\n   * @param section \r\n   */\r\n    onDrop(event: CdkDragDrop<any[]>, section: Section) {\r\n        if (\r\n            event.previousContainer.id == \"toolbox\" &&\r\n            event.container.id != \"toolbox\"\r\n        ) {\r\n            section.sectionElements.push(\r\n                new ReferenceTuple(\r\n                    event.previousContainer.data[event.previousIndex].id,\r\n                    false\r\n                )\r\n            );\r\n        } else {\r\n            if (event.previousContainer === event.container) {\r\n                moveItemInArray(\r\n                    event.container.data,\r\n                    event.previousIndex,\r\n                    event.currentIndex\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Entfernt aus dem Array targetArray an der Stelle index einen Eintrag.\r\n     */\r\n    removeFromArray(targetArray: any, index: number) {\r\n        targetArray.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Entfernt aus dem Array refsection in der Studie das Element an der Stelle Id\r\n     * @param id\r\n     */\r\n    removeFromReference(id: number) {\r\n        let index = 0;\r\n        for (let ref of this.studywrapper.study.refSections) {\r\n            if (ref.ID == id) {\r\n                this.studywrapper.study.refSections.splice(index, 1);\r\n            }\r\n            index++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Löscht eine Section aus der Studie und aus dem sections Array.\r\n     * @param index \r\n     * @param number\r\n     */\r\n    deleteSection(index: number, id: number) {\r\n        this.studywrapper.study.sections.splice(index, 1);\r\n        this.removeFromReference(id);\r\n        this.sections.splice(index, 1);\r\n    }\r\n\r\n}\r\n","import { Component, Input, OnInit, SimpleChanges } from '@angular/core';\r\nimport { PauseElement } from '@src/app/Model/Study/StudyObjects/PauseElement';\r\nimport { VibrationElement } from '@src/app/Model/Study/StudyObjects/VibrationElement';\r\n\r\n@Component({\r\n  selector: 'app-vibrationpattern-toolbox',\r\n  templateUrl: './vibrationpattern-toolbox.component.html',\r\n  styleUrls: ['./vibrationpattern-toolbox.component.css']\r\n})\r\nexport class VibrationPatternToolboxComponent implements OnInit {\r\n  /**\r\n   * In diesem Attribut befinden sich alle Elemente, die in einer Toolbox auf einer bestimmten Seite der studycreation liegen.\r\n   */\r\n  @Input()\r\n  toolbox: any[];\r\n\r\n  /**\r\n   * Enthält die Anzahl der VibrationPattern, die sich in der Toolbox befinden.\r\n   */\r\n  @Input()\r\n  vibrationpatternCount: number;\r\n\r\n  connectedLists: string[];\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Initialisiert die connectedLists mit der Anzahl der VibrationPattern die sie enthalten sollen.\r\n   */\r\n  ngOnInit() {\r\n    this.initConnectedLists(this.vibrationpatternCount);\r\n  }\r\n\r\n  /**\r\n   * Initialisiert die die connectedLists mit der Anzahl numOfLists.\r\n   * @param numOfLists \r\n   */\r\n  initConnectedLists(numOfLists) {\r\n    this.connectedLists = undefined;\r\n    for (let i = 0; i < numOfLists; i++) {\r\n      if (this.connectedLists == undefined) {\r\n        this.connectedLists = [\"vibrationpatternList\" + i];\r\n      } else {\r\n        this.connectedLists.push(\"vibrationpatternList\" + i);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ruft initConnectedLists auf, wenn sich die VibrationPatternCount geändert hat\r\n   * @param changes \r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes[\"vibrationpatternCount\"]) {\r\n      this.initConnectedLists(this.vibrationpatternCount);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prüft, ob ein Element vom Typ VibrationElement ist.\r\n   * @param val \r\n   */\r\n  isVibration(val: any): boolean {\r\n    return val instanceof VibrationElement;\r\n  }\r\n\r\n  /**\r\n   * Prüft, ob ein Element vom Typ PauseElement ist.\r\n   * @param val \r\n   */\r\n  isPause(val: any): boolean {\r\n    return val instanceof PauseElement;\r\n  }\r\n\r\n}\r\n","export default \"<div class=\\\"vibration-contianer\\\">\\r\\n    <div class=\\\"toolbox\\\">\\r\\n        <app-vibrationpattern-toolbox [toolbox]=\\\"toolbox\\\" [vibrationpatternCount]=\\\"vibrationpatterns.length\\\">\\r\\n        </app-vibrationpattern-toolbox>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"mainContent\\\">\\r\\n        <a mat-fab class=\\\"greenButton\\\" (click)=\\\"onAddVibrationPattern()\\\" style=\\\"display: block; margin: auto;\\\">\\r\\n            <mat-icon>add</mat-icon>\\r\\n        </a><br>\\r\\n        <div *ngFor=\\\"let vibrationpattern of vibrationpatterns; let index = index\\\">\\r\\n            <mat-card>\\r\\n                <mat-card-title>\\r\\n                    <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 50%; font-size:18px\\\">\\r\\n                        <input matInput placeholder=\\\"Interne Bezeichnung\\\" [(ngModel)]=\\\"vibrationpattern.name\\\" />\\r\\n                    </mat-form-field>\\r\\n                    &nbsp;&nbsp;\\r\\n                    <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 50%; font-size:18px\\\">\\r\\n                        <input matInput placeholder=\\\"Anzeigename\\\" [(ngModel)]=\\\"vibrationpattern.displayName\\\" />\\r\\n                    </mat-form-field>\\r\\n                    <button mat-icon-button class=\\\"redButton\\\" (click)=\\\"removeFromStudy(index, vibrationpattern.id)\\\">\\r\\n                        <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n                    </button>\\r\\n                </mat-card-title>\\r\\n                <div cdkDropList class=\\\"vibrationpatternList\\\" id=\\\"vibrationpatternList{{ index }}\\\"\\r\\n                    [cdkDropListData]=\\\"vibrationpattern.vibrationPatternElements\\\"\\r\\n                    (cdkDropListDropped)=\\\"onDrop($event, index)\\\">\\r\\n                    <div *ngFor=\\\"let item of vibrationpattern.vibrationPatternElements; let elIndex = index\\\">\\r\\n                        <div *ngIf=\\\"isVibration(item); then showVibration; else showPause\\\"></div>\\r\\n\\r\\n                        <ng-template #showVibration>\\r\\n                            <mat-card class=\\\"vibration-card\\\" cdkDrag>{{elIndex+1}}. Vibration&nbsp;&nbsp;\\r\\n                                <mat-form-field>\\r\\n                                    <input matInput placeholder=\\\"Länge in ms\\\"\\r\\n                                        [formControl]=\\\"this.formControls[index][elIndex][0]\\\"\\r\\n                                        [errorStateMatcher]=\\\"this.matcher\\\" />\\r\\n                                    <mat-error *ngIf=\\\"this.formControls[index][elIndex][0].invalid\\\">Falsche Eingabe.\\r\\n                                    </mat-error>\\r\\n                                </mat-form-field>&nbsp;&nbsp;\\r\\n                                <mat-form-field>\\r\\n                                    <input matInput placeholder=\\\"Amplitude (1 bis 255)\\\"\\r\\n                                        [formControl]=\\\"this.formControls[index][elIndex][1]\\\"\\r\\n                                        [errorStateMatcher]=\\\"this.matcher\\\" />\\r\\n                                    <mat-error *ngIf=\\\"this.formControls[index][elIndex][1].invalid\\\">Falsche Eingabe.\\r\\n                                    </mat-error>\\r\\n                                </mat-form-field><button mat-icon-button class=\\\"redButton\\\"\\r\\n                                    (click)=\\\"removeFromVibrationPattern(index, elIndex)\\\">\\r\\n                                    <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n                                </button>\\r\\n                            </mat-card>\\r\\n                        </ng-template>\\r\\n                        <ng-template #showPause>\\r\\n                            <mat-card class=\\\"pause-card\\\" cdkDrag>{{elIndex+1}}. Pause&nbsp;&nbsp;<mat-form-field>\\r\\n                                    <input matInput placeholder=\\\"Länge in ms\\\"\\r\\n                                        [formControl]=\\\"this.formControls[index][elIndex][0]\\\"\\r\\n                                        [errorStateMatcher]=\\\"this.matcher\\\" />\\r\\n                                    <mat-error *ngIf=\\\"this.formControls[index][elIndex][0].invalid\\\">Falsche Eingabe.\\r\\n                                    </mat-error>\\r\\n\\r\\n                                </mat-form-field><button mat-icon-button class=\\\"redButton\\\"\\r\\n                                    (click)=\\\"removeFromVibrationPattern(index, elIndex)\\\">\\r\\n                                    <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n                                </button></mat-card>\\r\\n                        </ng-template>\\r\\n                        <div *ngIf=\\\"elIndex+1 != vibrationpattern.vibrationPatternElements.length\\\">\\r\\n                            <br />\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"droplistSubtitle\\\">Hier Elemente aus dem Wergzeugkasten einfügen, um eine Abfolge\\r\\n                        festzulegen.</div>\\r\\n                </div>\\r\\n            </mat-card>\\r\\n            <br>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</div>\";","import { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Inject, InjectionToken, Directive, Input, EventEmitter, ElementRef, ChangeDetectorRef, Optional, SkipSelf, Output, TemplateRef, ViewContainerRef, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document, _viewportRuler) {\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element)\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = event.target;\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support\n        // `contains` on the `document`.\n        const scrolledParentNode = target === this._document ? target.documentElement : target;\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    clone.value = source.value;\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch (_a) { }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._handles.find(handle => {\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains(target));\n                });\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            // Prevent the default action as early as possible in order to block\n            // native actions like dragging the selected text or images with the mouse.\n            event.preventDefault();\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!this._dropContainer || !this._dropContainer.isDragging()) {\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        this.withRootElement(element);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, false));\n        this._toggleNativeDragInteractions();\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        this._disabledHandles.delete(handle);\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const preview = this._preview = this._createPreviewElement();\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            this.started.next({ source: this }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && event.target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.subscribe(scrollEvent => {\n            this._updateOnScroll(scrollEvent);\n        });\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition =\n            this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance, this._initialIndex);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this)\n                });\n            });\n        }\n        this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n        this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: `${this._config.zIndex || 1000}`\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event) ?\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n            // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n            // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n            // throwing an error. The value returned here will be incorrect, but since this only\n            // breaks inside a developer tool and the value is only used for secondary information,\n            // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n            (event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }) : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const previewRect = this._previewRect;\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            x = clamp(x, minX, maxX);\n            y = clamp(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = event.target;\n            // ClientRect dimensions are based on the scroll position of the page and its parent node so\n            // we have to update the cached boundary ClientRect if the user has scrolled. Check for\n            // the `document` specifically since IE doesn't support `contains` on it.\n            if (this._boundaryRect && (target === this._document ||\n                (target !== this._boundaryElement && target.contains(this._boundaryElement)))) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        const cachedPosition = this._parentPositions.positions.get(this._document);\n        return cachedPosition ? cachedPosition.scrollPosition :\n            this._viewportRuler.getViewportScrollPosition();\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Gets the element into which the drag preview should be inserted. */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp$1(fromIndex, array.length - 1);\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n */\nconst AUTO_SCROLL_STEP = 2;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occured and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = { drag: null, delta: 0, overlaps: false };\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Direction in which the list is oriented. */\n        this._orientation = 'vertical';\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Layout direction of the drop list. */\n        this._direction = 'ltr';\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._siblings.forEach(sibling => sibling._startReceiving(this));\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            const reference = activeDraggables[0].getRootElement();\n            reference.parentNode.insertBefore(placeholder, reference);\n            activeDraggables.unshift(item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param previousIndex Index of the item when dragging started.\n     *\n     * @breaking-change 11.0.0 `previousIndex` parameter to become required.\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer, distance, previousIndex) {\n        this._reset();\n        // @breaking-change 11.0.0 Remove this fallback logic once `previousIndex` is a required param.\n        if (previousIndex == null) {\n            previousIndex = previousContainer.getItemIndex(item);\n        }\n        this.dropped.next({ item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._cacheItems();\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        this._orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, currentItem => currentItem.drag === item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* NONE */;\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        }).sort((a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                rootElement.style.transform = '';\n            }\n        });\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n    }\n    /** Caches the current items in the list and their positions. */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach(({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    });\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach(({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    });\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* NONE */;\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = new Set();\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /** Emits when the viewport has been scrolled while the user is dragging an item. */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.has(drag)) {\n            return;\n        }\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.has(drag);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nDragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\nDragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }])] });\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup',\n                providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }]\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\nconst ɵ0 = undefined;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _dir, _group, \n    /**\n     * @deprecated _scrollDispatcher parameter to become required.\n     * @breaking-change 11.0.0\n     */\n    _scrollDispatcher, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        this._scrollDispatcher = _scrollDispatcher;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            // @breaking-change 11.0.0 Remove null check for _scrollDispatcher once it's required.\n            if (!this._scrollableParentsResolved && this._scrollDispatcher) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8)); };\nCdkDropList.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], id: \"id\", enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], data: [\"cdkDropListData\", \"data\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/** Keeps track of the drop lists that are currently on the page. */\nCdkDropList._dropLists = [];\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DROP_LIST_GROUP,] }, { type: SkipSelf }] },\n    { type: ScrollDispatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n];\nCdkDropList.propDecorators = {\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DROP_LIST_GROUP]\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc1.ScrollDispatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], id: [{\n            type: Input\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n    }\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDragHandle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }])] });\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }, { type: SkipSelf }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                },\n                providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }])] });\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]',\n                providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() { return this._matchSize; }\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { matchSize: \"matchSize\", data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }])] });\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }],\n    matchSize: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]',\n                providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { matchSize: [{\n            type: Input\n        }], data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            }))).subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5,\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex\n        });\n        this._dragRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe(() => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((handles) => {\n                const childHandleElements = handles\n                    .filter(handle => handle._parentDrag === this)\n                    .map(handle => handle.element);\n                // Usually handles are only allowed to be a descendant of the drag element, but if\n                // the consumer defined a different drag root, we should allow the drag element\n                // itself to be a handle too.\n                if (this._selfHandle && this.rootElementSelector) {\n                    childHandleElements.push(this.element);\n                }\n                this._dragRef.withHandles(childHandleElements);\n            }), \n            // Listen if the state of any of the handles changes.\n            switchMap((handles) => {\n                return merge(...handles.map(item => {\n                    return item._stateChanges.pipe(startWith(item));\n                }));\n            }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                const dragRef = this._dragRef;\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            });\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`cdkDrag must be attached to an element node. ` +\n                `Currently attached to \"${rootElement.nodeName}\".`);\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        const element = coerceElement(boundary);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    matchSize: this._previewTemplate.matchSize,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(() => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(() => {\n            this.released.emit({ source: this });\n        });\n        ref.ended.subscribe(event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n    }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10)); };\nCdkDrag.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PREVIEW, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PLACEHOLDER, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_HANDLE, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { disabled: [\"cdkDragDisabled\", \"disabled\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], data: [\"cdkDragData\", \"data\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: CdkDragHandle, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [CDK_DRAG_HANDLE,] }] }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CDK_DRAG_HANDLE, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CDK_DRAG_PREVIEW,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CDK_DRAG_PLACEHOLDER,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': 'cdk-drag',\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_HANDLE]\n            }] }]; }, { started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CDK_DRAG_HANDLE, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PREVIEW]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PLACEHOLDER]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }] }); })();\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element, selector) {\n    let currentElement = element.parentElement;\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            currentElement.msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DragDropModule {\n}\nDragDropModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DragDropModule_Factory(t) { return new (t || DragDropModule)(); }, providers: [\n        DragDrop,\n    ], imports: [CdkScrollableModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: function () { return [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; }, exports: function () { return [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n\n//# sourceMappingURL=drag-drop.js.map","export default \"<a mat-fab class=\\\"greenButton\\\" (click)=\\\"onAddTextBlock()\\\" style=\\\"display: block; margin: auto;\\\">\\r\\n    <mat-icon>add</mat-icon>\\r\\n</a><br>\\r\\n<div *ngFor=\\\"let textblock of textblocks; let index = index\\\">\\r\\n    <mat-card>\\r\\n        <mat-card-title>\\r\\n            <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 50%; font-size:18px\\\">\\r\\n                <input matInput placeholder=\\\"Interne Bezeichnung\\\" [formControl]=\\\"this.formControls[index][0]\\\"\\r\\n                    [errorStateMatcher]=\\\"this.matcher\\\" />\\r\\n                <mat-hint style=\\\"font-size: 15px;color: #f44336;\\\"\\r\\n                    *ngIf=\\\"this.formControls[index][0].hasError('required')\\\">\\r\\n                    Feld\\r\\n                    darf nicht leer sein.</mat-hint>\\r\\n            </mat-form-field>\\r\\n            &nbsp;&nbsp;\\r\\n            <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 50%; font-size:18px\\\">\\r\\n                <input matInput placeholder=\\\"Anzeigename\\\" [(ngModel)]=\\\"textblock.displayName\\\" />\\r\\n            </mat-form-field>\\r\\n\\r\\n            <button mat-icon-button class=\\\"redButton\\\" (click)=\\\"removeFromStudy(index, textblock.id)\\\">\\r\\n                <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n            </button>\\r\\n        </mat-card-title>\\r\\n        <mat-form-field class=\\\"textblock-textarea\\\">\\r\\n            <mat-label>Text</mat-label>\\r\\n            <textarea matInput [formControl]=\\\"this.formControls[index][1]\\\"\\r\\n                [errorStateMatcher]=\\\"this.matcher\\\"></textarea>\\r\\n            <mat-hint style=\\\"font-size: 15px;color: #f44336;\\\" *ngIf=\\\"this.formControls[index][1].hasError('required')\\\">\\r\\n                Feld\\r\\n                darf nicht leer sein.</mat-hint>\\r\\n        </mat-form-field>\\r\\n        <br>\\r\\n    </mat-card>\\r\\n    <br>\\r\\n</div>\";","export default \"<mat-card style=\\\"background-color: #212121;\\\"><br>\\r\\n    <mat-card-title>Werkzeugkasten</mat-card-title>\\r\\n    <div style=\\\"margin-top: 10px;\\\">\\r\\n        <mat-card-subtitle>Vibrationen oder Pausen per Drag and Drog links einfügen</mat-card-subtitle>\\r\\n    </div>\\r\\n    <mat-chip-list></mat-chip-list>\\r\\n    <mat-card-content>\\r\\n        <mat-divider></mat-divider>\\r\\n        <br />\\r\\n        <div cdkDropList id=\\\"toolbox\\\" [cdkDropListConnectedTo]=\\\"connectedLists\\\" [cdkDropListData]=\\\"toolbox\\\">\\r\\n            <div *ngFor=\\\"let tool of toolbox\\\">\\r\\n                <div *ngIf=\\\"isVibration(tool); then showVibration; else showPause\\\"></div>\\r\\n                <ng-template #showVibration>\\r\\n                    <mat-chip style=\\\"background-color: #6f8aab; cursor: move;\\\" cdkDrag>Vibration</mat-chip>\\r\\n                </ng-template>\\r\\n                <ng-template #showPause>\\r\\n                    <mat-chip style=\\\"background-color: #ba624f; cursor: move;\\\" cdkDrag>Pause</mat-chip>\\r\\n                </ng-template>\\r\\n                <br /><br />\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\";","export default \".vibration-container {\\r\\n    height: 91vh;\\r\\n}\\r\\n\\r\\n.toolbox {\\r\\n    width: 250px;\\r\\n    position: fixed;\\r\\n    z-index: 1;\\r\\n    overflow-x: hidden;\\r\\n    right: 15px;\\r\\n}\\r\\n\\r\\n.mainContent {\\r\\n    margin-right: 265px;\\r\\n}\\r\\n\\r\\nmat-chip {\\r\\n    margin: 5px;\\r\\n}\\r\\n\\r\\n.vibration-card {\\r\\n    background-color:#6f8aab;\\r\\n    cursor: move;\\r\\n    font-size: 16px;\\r\\n}\\r\\n\\r\\n.pause-card {\\r\\n    background-color:#ba624f;\\r\\n    cursor: move;\\r\\n    font-size: 16px;\\r\\n}\\r\\n\\r\\n.vibrationpatternList {\\r\\n    border-style: dashed;\\r\\n    border-width: 5px;\\r\\n    border-radius: 10px;\\r\\n    font-size: large;\\r\\n    padding: 15px;\\r\\n}\\r\\n\\r\\n.droplistSubtitle {\\r\\n    margin-top: 10px;\\r\\n    font-size: 14px;\\r\\n    text-align: center;\\r\\n}\\r\\n\\r\\n.greenButton {\\r\\n    background-color: #3e753b;\\r\\n    color: white;\\r\\n}\\r\\n\\r\\n.redButton {\\r\\n    color: #6D0000;\\r\\n    background-color: #FF000000;\\r\\n}\\r\\n\\r\\n.trashCan {\\r\\n    font-size: 40px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi92aWJyYXRpb25wYXR0ZXJuLWVkaXRpbmcvdmlicmF0aW9ucGF0dGVybi1lZGl0aW5nLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksWUFBWTtJQUNaLGVBQWU7SUFDZixVQUFVO0lBQ1Ysa0JBQWtCO0lBQ2xCLFdBQVc7QUFDZjs7QUFFQTtJQUNJLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7QUFFQTtJQUNJLHdCQUF3QjtJQUN4QixZQUFZO0lBQ1osZUFBZTtBQUNuQjs7QUFFQTtJQUNJLHdCQUF3QjtJQUN4QixZQUFZO0lBQ1osZUFBZTtBQUNuQjs7QUFFQTtJQUNJLG9CQUFvQjtJQUNwQixpQkFBaUI7SUFDakIsbUJBQW1CO0lBQ25CLGdCQUFnQjtJQUNoQixhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGVBQWU7SUFDZixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGNBQWM7SUFDZCwyQkFBMkI7QUFDL0I7O0FBRUE7SUFDSSxlQUFlO0FBQ25CIiwiZmlsZSI6InNyYy9hcHAvc3R1ZHljcmVhdGlvbi92aWJyYXRpb25wYXR0ZXJuLWVkaXRpbmcvdmlicmF0aW9ucGF0dGVybi1lZGl0aW5nLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIudmlicmF0aW9uLWNvbnRhaW5lciB7XHJcbiAgICBoZWlnaHQ6IDkxdmg7XHJcbn1cclxuXHJcbi50b29sYm94IHtcclxuICAgIHdpZHRoOiAyNTBweDtcclxuICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgIHotaW5kZXg6IDE7XHJcbiAgICBvdmVyZmxvdy14OiBoaWRkZW47XHJcbiAgICByaWdodDogMTVweDtcclxufVxyXG5cclxuLm1haW5Db250ZW50IHtcclxuICAgIG1hcmdpbi1yaWdodDogMjY1cHg7XHJcbn1cclxuXHJcbm1hdC1jaGlwIHtcclxuICAgIG1hcmdpbjogNXB4O1xyXG59XHJcblxyXG4udmlicmF0aW9uLWNhcmQge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjojNmY4YWFiO1xyXG4gICAgY3Vyc29yOiBtb3ZlO1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG59XHJcblxyXG4ucGF1c2UtY2FyZCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiNiYTYyNGY7XHJcbiAgICBjdXJzb3I6IG1vdmU7XHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbn1cclxuXHJcbi52aWJyYXRpb25wYXR0ZXJuTGlzdCB7XHJcbiAgICBib3JkZXItc3R5bGU6IGRhc2hlZDtcclxuICAgIGJvcmRlci13aWR0aDogNXB4O1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcclxuICAgIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbiAgICBwYWRkaW5nOiAxNXB4O1xyXG59XHJcblxyXG4uZHJvcGxpc3RTdWJ0aXRsZSB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG4uZ3JlZW5CdXR0b24ge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzNlNzUzYjtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxufVxyXG5cclxuLnJlZEJ1dHRvbiB7XHJcbiAgICBjb2xvcjogIzZEMDAwMDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNGRjAwMDAwMDtcclxufVxyXG5cclxuLnRyYXNoQ2FuIHtcclxuICAgIGZvbnQtc2l6ZTogNDBweDtcclxufSJdfQ== */\";","export default \"<div class=\\\"vibration-contianer\\\">\\r\\n    <div class=\\\"toolbox\\\">\\r\\n        <app-studyobject-toolbox [toolbox]=\\\"this.toolbox\\\" [playgroundCount]=\\\"sections.length\\\">\\r\\n        </app-studyobject-toolbox>\\r\\n    </div>\\r\\n\\r\\n\\r\\n    <div class=\\\"mainContent\\\">\\r\\n        <a mat-fab class=\\\"greenButton\\\" (click)=\\\"onAddSection()\\\" style=\\\"display: block; margin: auto;\\\">\\r\\n            <mat-icon>add</mat-icon>\\r\\n        </a><br>\\r\\n        <div *ngFor=\\\"let section of sections; let index = index\\\">\\r\\n            <mat-card>\\r\\n                <mat-card-title>\\r\\n                    <mat-form-field class=\\\"example-full-width\\\" style=\\\"width: 50%; font-size:18px\\\">\\r\\n                        <input matInput placeholder=\\\"Bezeichnung\\\" [(ngModel)]=\\\"section.name\\\" />\\r\\n                    </mat-form-field>&nbsp;&nbsp;\\r\\n                    <mat-form-field style=\\\"width: 20%; font-size:18px\\\">\\r\\n                        <mat-label>Randomisierung</mat-label>\\r\\n                        <mat-select [(value)]=\\\"section.randomStrategy\\\">\\r\\n                            <mat-option *ngFor=\\\"let randomizer of randomizers; let index = index\\\" [value]=\\\"index\\\">\\r\\n                                {{ this.studywrapper.getRandomizerName(index) }}\\r\\n                            </mat-option>\\r\\n                        </mat-select>\\r\\n                    </mat-form-field><button mat-icon-button class=\\\"redButton\\\" (click)=\\\"deleteSection(index, section.id)\\\">\\r\\n                        <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n                    </button>\\r\\n                </mat-card-title>\\r\\n                Für das Ergebnis relevant? &nbsp;&nbsp; Nein &nbsp;\\r\\n                <mat-slide-toggle [(ngModel)]=\\\"section.resultRelevant\\\"></mat-slide-toggle>&nbsp;&nbsp;&nbsp;Ja<br>\\r\\n                <div cdkDropList class=\\\"studyObjectList\\\" id=\\\"studyObjectList{{ index }}\\\"\\r\\n                    [cdkDropListData]=\\\"section.sectionElements\\\" (cdkDropListDropped)=\\\"onDrop($event, section)\\\">\\r\\n                    <div *ngFor=\\\"let ref of section.sectionElements; let index = index\\\">\\r\\n                        <mat-card cdkDrag\\r\\n                            [style.background-color]=\\\"this.colorService.getStudyObjectColor(findSectionElementById(ref.ID))\\\"\\r\\n                            style=\\\"cursor: move; font-size:18px\\\">{{(index+1) + \\\". \\\"+\\r\\n                findSectionElementById(ref.ID).name\\r\\n              }}&nbsp;&nbsp;&nbsp;&nbsp;<mat-slide-toggle [(ngModel)]=\\\"ref.isFixed\\\">Fixiert</mat-slide-toggle><button\\r\\n                                mat-icon-button class=\\\"redButton\\\"\\r\\n                                (click)=\\\"removeFromArray(section.sectionElements, index)\\\">\\r\\n                                <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n                            </button>\\r\\n                        </mat-card>\\r\\n                        <div *ngIf=\\\"index+1 != section.sectionElements.length\\\">\\r\\n                            <br />\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"droplistSubtitle\\\">Hier Elemente aus dem Wergzeugkasten einfügen, um eine Abfolge\\r\\n                        festzulegen.</div>\\r\\n                </div>\\r\\n            </mat-card>\\r\\n            <br>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\";","export default \"<div class=\\\"vibration-contianer\\\">\\r\\n    <div class=\\\"toolbox\\\">\\r\\n        <app-studyobject-toolbox [toolbox]=\\\"this.toolbox\\\" [playgroundCount]=\\\"1\\\"></app-studyobject-toolbox>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"mainContent\\\">\\r\\n        <mat-card>\\r\\n            \\r\\n                Studienablauf&nbsp;&nbsp;\\r\\n                <mat-form-field style=\\\"width:20%; font-size:18px\\\">\\r\\n                    <mat-label>Randomisierung</mat-label>\\r\\n                    <mat-select [(value)]=\\\"this.studywrapper.study.randomStrategy\\\">\\r\\n                        <mat-option *ngFor=\\\"let randomizer of randomizers; let index = index\\\" [value]=\\\"index\\\">\\r\\n                            {{ this.studywrapper.getRandomizerName(index) }}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n           \\r\\n            <div cdkDropList class=\\\"studyObjectList\\\" id=\\\"studyObjectList0\\\"\\r\\n                [cdkDropListData]=\\\"this.studywrapper.study.refSections\\\" (cdkDropListDropped)=\\\"onDrop($event)\\\">\\r\\n                <div *ngFor=\\\"let ref of this.studywrapper.study.refSections; let index = index\\\">\\r\\n                    <mat-card cdkDrag [style.background-color]=\\\"this.colorService.getStudyObjectColor(findSectionById(ref.ID))\\\" style=\\\"cursor: move;\\\">{{(index+1) + \\\". \\\" +\\r\\n                findSectionById(ref.ID).name\\r\\n              }}&nbsp;&nbsp;&nbsp;&nbsp;<mat-slide-toggle [(ngModel)]=\\\"ref.isFixed\\\">Fixiert</mat-slide-toggle><button\\r\\n                            mat-icon-button class=\\\"redButton\\\"\\r\\n                            (click)=\\\"removeFromArray(this.studywrapper.study.refSections, index)\\\">\\r\\n                            <mat-icon class=\\\"trashCan\\\">delete</mat-icon>\\r\\n                        </button>\\r\\n                    </mat-card>\\r\\n                    <div *ngIf=\\\"index+1 != this.studywrapper.study.refSections.length\\\">\\r\\n                        <br />\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"droplistSubtitle\\\">Hier Elemente aus dem Wergzeugkasten einfügen, um eine Abfolge festzulegen.</div>\\r\\n            </div>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <br />\\r\\n</div>\";","export default \".textblock-textarea {\\r\\n    width: 100%;\\r\\n  }\\r\\n\\r\\n  .greenButton {\\r\\n    background-color: #3e753b;\\r\\n    color: white;\\r\\n}\\r\\n\\r\\n  .redButton {\\r\\n  color: #6D0000;\\r\\n  background-color: #FF000000;\\r\\n}\\r\\n\\r\\n  .trashCan {\\r\\n  font-size: 40px;\\r\\n}\\r\\n  \\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi90ZXh0YmxvY2stZWRpdGluZy90ZXh0YmxvY2stZWRpdGluZy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksV0FBVztFQUNiOztFQUVBO0lBQ0UseUJBQXlCO0lBQ3pCLFlBQVk7QUFDaEI7O0VBRUE7RUFDRSxjQUFjO0VBQ2QsMkJBQTJCO0FBQzdCOztFQUVBO0VBQ0UsZUFBZTtBQUNqQiIsImZpbGUiOiJzcmMvYXBwL3N0dWR5Y3JlYXRpb24vdGV4dGJsb2NrLWVkaXRpbmcvdGV4dGJsb2NrLWVkaXRpbmcuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi50ZXh0YmxvY2stdGV4dGFyZWEge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfVxyXG5cclxuICAuZ3JlZW5CdXR0b24ge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzNlNzUzYjtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxufVxyXG5cclxuLnJlZEJ1dHRvbiB7XHJcbiAgY29sb3I6ICM2RDAwMDA7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI0ZGMDAwMDAwO1xyXG59XHJcblxyXG4udHJhc2hDYW4ge1xyXG4gIGZvbnQtc2l6ZTogNDBweDtcclxufVxyXG4gIFxyXG4iXX0= */\";","export default \".textblock-textarea {\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\n.greenButton {\\r\\n    background-color: #3e753b;\\r\\n    color: white;\\r\\n}\\r\\n\\r\\n.redButton {\\r\\n    color: #6D0000;\\r\\n    background-color: #FF000000;\\r\\n}\\r\\n\\r\\n.trashCan {\\r\\n    font-size: 40px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3R1ZHljcmVhdGlvbi9nZW5lcmFsLWVkaXRpbmcvZ2VuZXJhbC1lZGl0aW5nLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxXQUFXO0FBQ2Y7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGNBQWM7SUFDZCwyQkFBMkI7QUFDL0I7O0FBRUE7SUFDSSxlQUFlO0FBQ25CIiwiZmlsZSI6InNyYy9hcHAvc3R1ZHljcmVhdGlvbi9nZW5lcmFsLWVkaXRpbmcvZ2VuZXJhbC1lZGl0aW5nLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIudGV4dGJsb2NrLXRleHRhcmVhIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG4uZ3JlZW5CdXR0b24ge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzNlNzUzYjtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxufVxyXG5cclxuLnJlZEJ1dHRvbiB7XHJcbiAgICBjb2xvcjogIzZEMDAwMDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNGRjAwMDAwMDtcclxufVxyXG5cclxuLnRyYXNoQ2FuIHtcclxuICAgIGZvbnQtc2l6ZTogNDBweDtcclxufSJdfQ== */\";","export default \"<h2 mat-dialog-title>Fragetyp wählen</h2>\\r\\n<mat-dialog-content style=\\\"text-align: center;\\\">\\r\\n    <button mat-flat-button color=\\\"#3e753b\\\" (click)=\\\"onButtonClick(0)\\\">Datum/Zeit</button><br>\\r\\n    <button mat-flat-button color=\\\"#3e753b\\\" (click)=\\\"onButtonClick(1)\\\">Lineare Skala</button><br>\\r\\n    <button mat-flat-button color=\\\"#3e753b\\\" (click)=\\\"onButtonClick(2)\\\">Multiple Choice</button><br>\\r\\n    <button mat-flat-button color=\\\"#3e753b\\\" (click)=\\\"onButtonClick(3)\\\">Freitext</button><br>\\r\\n</mat-dialog-content>\\r\\n\";","import { Component, Input, OnInit, SimpleChanges } from '@angular/core';\r\nimport { DateQuestion } from '@src/app/Model/Study/StudyObjects/Questions/DateQuestion';\r\nimport { LinearScaleQuestion } from '@src/app/Model/Study/StudyObjects/Questions/LinearScaleQuestion';\r\nimport { MultipleChoiceQuestion } from '@src/app/Model/Study/StudyObjects/Questions/MultipleChoiceQuestion';\r\nimport { TextQuestion } from '@src/app/Model/Study/StudyObjects/Questions/TextQuestion';\r\nimport { Section } from '@src/app/Model/Study/StudyObjects/Section';\r\nimport { SectionElement } from '@src/app/Model/Study/StudyObjects/SectionElement';\r\nimport { TextBlock } from '@src/app/Model/Study/StudyObjects/TextBlock';\r\nimport { VibrationPattern } from '@src/app/Model/Study/StudyObjects/VibrationPattern';\r\nimport { ColorService } from '../../services/color/color.service';\r\n\r\n@Component({\r\n    selector: 'app-studyobject-toolbox',\r\n    templateUrl: './studyobject-toolbox.component.html',\r\n    styleUrls: ['./studyobject-toolbox.component.css']\r\n})\r\nexport class StudyObjectToolboxComponent implements OnInit {\r\n    /**\r\n     * Enthält alle Elemente, die in der Toolbox verfügbar sind.\r\n     */\r\n    @Input()\r\n    toolbox = [];\r\n\r\n    /**\r\n     * Enthält die Anzahl der Elemente, die sich in der Toolbox befinden.\r\n     */\r\n    @Input()\r\n    playgroundCount: number;\r\n\r\n    /**\r\n     * Namen aller Elemente die sich in der Toolbox befinden.\r\n     */\r\n    connectedLists: string[];\r\n\r\n    constructor(public colorService: ColorService) { }\r\n\r\n    /**\r\n     * Initialisiert connectedLists mit default Werten und nummeriert diese von 0 bis zur Anzahl von playgroundCount.\r\n     */\r\n    ngOnInit() {\r\n        this.initConnectedLists(this.playgroundCount);\r\n    }\r\n\r\n    /**\r\n     * Initialisiert connectedLists mit default Werten und nummeriert diese mit numOfLists.\r\n     * @param numOfLists \r\n     */\r\n    initConnectedLists(numOfLists) {\r\n        this.connectedLists = undefined;\r\n        for (let i = 0; i < numOfLists; i++) {\r\n            if (this.connectedLists == undefined) {\r\n                this.connectedLists = [\"studyObjectList\" + i];\r\n            } else {\r\n                this.connectedLists.push(\"studyObjectList\" + i);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialisiert connectedLists neu.\r\n     * @param changes \r\n     */\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes[\"playgroundCount\"]) {\r\n            this.initConnectedLists(this.playgroundCount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Liefert die Liste aller Objekte des Typs item in der toolbox zurück.\r\n     * @param item \r\n     */\r\n    getObjectsPerType(item: string): any[] {\r\n        let result = [];\r\n        switch (item) {\r\n            case \"DateQuestion\":\r\n                for (let element of this.toolbox) {\r\n                    if (element instanceof DateQuestion) result.push(element);\r\n                }\r\n                break;\r\n            case \"VibrationPattern\":\r\n                for (let element of this.toolbox) {\r\n                    if (element instanceof VibrationPattern) result.push(element);\r\n                }\r\n                break;\r\n            case \"TextBlock\":\r\n                for (let element of this.toolbox) {\r\n                    if (element instanceof TextBlock) result.push(element);\r\n                }\r\n                break;\r\n            case \"LinearScaleQuestion\":\r\n                for (let element of this.toolbox) {\r\n                    if (element instanceof LinearScaleQuestion) result.push(element);\r\n                }\r\n                break;\r\n            case \"MultipleChoiceQuestion\":\r\n                for (let element of this.toolbox) {\r\n                    if (element instanceof MultipleChoiceQuestion) result.push(element);\r\n                }\r\n                break;\r\n            case \"TextQuestion\":\r\n                for (let element of this.toolbox) {\r\n                    if (element instanceof TextQuestion) result.push(element);\r\n                }\r\n                break;\r\n            case \"SectionElement\":\r\n                for (let element of this.toolbox) {\r\n                    if (element instanceof SectionElement) result.push(element);\r\n                }\r\n                break;\r\n            case \"Section\":\r\n                for (let element of this.toolbox) {\r\n                    if (element instanceof Section) result.push(element);\r\n                }\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Zählt alle Objekte in der Toolbox.\r\n     * @param item \r\n     */\r\n    getAmount(item: string): number {\r\n        let counter = 0;\r\n        for (let element of this.toolbox) {\r\n            switch (item) {\r\n                case \"DateQuestion\":\r\n                    if (element instanceof DateQuestion) counter++;\r\n                    break;\r\n                case \"VibrationPattern\":\r\n                    if (element instanceof VibrationPattern) counter++;\r\n                    break;\r\n                case \"TextBlock\":\r\n                    if (element instanceof TextBlock) counter++;\r\n                    break;\r\n                case \"LinearScaleQuestion\":\r\n                    if (element instanceof LinearScaleQuestion) counter++;\r\n                    break;\r\n                case \"MultipleChoiceQuestion\":\r\n                    if (element instanceof MultipleChoiceQuestion) counter++;\r\n                    break;\r\n                case \"TextQuestion\":\r\n                    if (element instanceof TextQuestion) counter++;\r\n                    break;\r\n                case \"SectionElement\":\r\n                    if (element instanceof SectionElement) counter++;\r\n                    break;\r\n                case \"Section\":\r\n                    if (element instanceof Section) counter++;\r\n                    break;\r\n            }\r\n        }\r\n        return counter;\r\n    }\r\n\r\n}\r\n","import { Routes } from \"@angular/router\";\r\nimport { GeneralEditingComponent } from \"./general-editing/general-editing.component\";\r\nimport { QuestionEditingComponent } from \"./question-editing/question-editing.component\";\r\nimport { SectionEditingComponent } from \"./section-editing/section-editing.component\";\r\nimport { SectionElementEditingComponent } from \"./sectionelement-editing/sectionelement-editing.component\";\r\nimport { SequenceEditingComponent } from \"./sequence-editing/sequence-editing.component\";\r\nimport { TextBlockEditingComponent } from \"./textblock-editing/textblock-editing.component\";\r\nimport { VibrationPatternEditingComponent } from \"./vibrationpattern-editing/vibrationpattern-editing.component\";\r\n\r\nexport const routes: Routes = [\r\n    {\r\n      path: \"general-editing\",\r\n      component: GeneralEditingComponent,\r\n    },\r\n    {\r\n      path: \"question-editing\",\r\n      component: QuestionEditingComponent,\r\n    },\r\n    {\r\n      path: \"section-editing\",\r\n      component: SectionEditingComponent,\r\n    },\r\n    {\r\n      path: \"sectionelement-editing\",\r\n      component: SectionElementEditingComponent,\r\n    },\r\n    {\r\n      path: \"sequence-editing\",\r\n      component: SequenceEditingComponent,\r\n    },\r\n    {\r\n      path: \"textblock-editing\",\r\n      component: TextBlockEditingComponent,\r\n    },\r\n    {\r\n      path: \"vibrationpattern-editing\",\r\n      component: VibrationPatternEditingComponent,\r\n    }\r\n  ];"]}